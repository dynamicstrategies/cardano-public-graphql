schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "Asset"
"""
type Asset {
  assetId: bytea!
  assetName: bytea
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  policyId: bytea
  ticker: String
  url: String
}

"""
aggregated selection of "Asset"
"""
type Asset_aggregate {
  aggregate: Asset_aggregate_fields
  nodes: [Asset!]!
}

"""
aggregate fields of "Asset"
"""
type Asset_aggregate_fields {
  avg: Asset_avg_fields
  count(columns: [Asset_select_column!], distinct: Boolean): Int
  max: Asset_max_fields
  min: Asset_min_fields
  stddev: Asset_stddev_fields
  stddev_pop: Asset_stddev_pop_fields
  stddev_samp: Asset_stddev_samp_fields
  sum: Asset_sum_fields
  var_pop: Asset_var_pop_fields
  var_samp: Asset_var_samp_fields
  variance: Asset_variance_fields
}

"""
order by aggregate values of table "Asset"
"""
input Asset_aggregate_order_by {
  avg: Asset_avg_order_by
  count: order_by
  max: Asset_max_order_by
  min: Asset_min_order_by
  stddev: Asset_stddev_order_by
  stddev_pop: Asset_stddev_pop_order_by
  stddev_samp: Asset_stddev_samp_order_by
  sum: Asset_sum_order_by
  var_pop: Asset_var_pop_order_by
  var_samp: Asset_var_samp_order_by
  variance: Asset_variance_order_by
}

"""
input type for inserting array relation for remote table "Asset"
"""
input Asset_arr_rel_insert_input {
  data: [Asset_insert_input!]!
  on_conflict: Asset_on_conflict
}

"""aggregate avg on columns"""
type Asset_avg_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
order by avg() on columns of table "Asset"
"""
input Asset_avg_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""
Boolean expression to filter rows from the table "Asset". All fields are combined with a logical 'AND'.
"""
input Asset_bool_exp {
  _and: [Asset_bool_exp]
  _not: Asset_bool_exp
  _or: [Asset_bool_exp]
  assetId: bytea_comparison_exp
  assetName: bytea_comparison_exp
  decimals: Int_comparison_exp
  description: String_comparison_exp
  fingerprint: bpchar_comparison_exp
  firstAppearedInSlot: Int_comparison_exp
  logo: String_comparison_exp
  metadataHash: bpchar_comparison_exp
  name: String_comparison_exp
  policyId: bytea_comparison_exp
  ticker: String_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "Asset"
"""
enum Asset_constraint {
  """unique or primary key constraint"""
  Asset_pkey
}

"""
input type for incrementing integer column in table "Asset"
"""
input Asset_inc_input {
  decimals: Int
  firstAppearedInSlot: Int
}

"""
input type for inserting data into table "Asset"
"""
input Asset_insert_input {
  assetId: bytea
  assetName: bytea
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  policyId: bytea
  ticker: String
  url: String
}

"""aggregate max on columns"""
type Asset_max_fields {
  decimals: Int
  description: String
  firstAppearedInSlot: Int
  logo: String
  name: String
  ticker: String
  url: String
}

"""
order by max() on columns of table "Asset"
"""
input Asset_max_order_by {
  decimals: order_by
  description: order_by
  firstAppearedInSlot: order_by
  logo: order_by
  name: order_by
  ticker: order_by
  url: order_by
}

"""aggregate min on columns"""
type Asset_min_fields {
  decimals: Int
  description: String
  firstAppearedInSlot: Int
  logo: String
  name: String
  ticker: String
  url: String
}

"""
order by min() on columns of table "Asset"
"""
input Asset_min_order_by {
  decimals: order_by
  description: order_by
  firstAppearedInSlot: order_by
  logo: order_by
  name: order_by
  ticker: order_by
  url: order_by
}

"""
response of any mutation on the table "Asset"
"""
type Asset_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [Asset!]!
}

"""
input type for inserting object relation for remote table "Asset"
"""
input Asset_obj_rel_insert_input {
  data: Asset_insert_input!
  on_conflict: Asset_on_conflict
}

"""
on conflict condition type for table "Asset"
"""
input Asset_on_conflict {
  constraint: Asset_constraint!
  update_columns: [Asset_update_column!]!
  where: Asset_bool_exp
}

"""
ordering options when selecting data from "Asset"
"""
input Asset_order_by {
  assetId: order_by
  assetName: order_by
  decimals: order_by
  description: order_by
  fingerprint: order_by
  firstAppearedInSlot: order_by
  logo: order_by
  metadataHash: order_by
  name: order_by
  policyId: order_by
  ticker: order_by
  url: order_by
}

"""
primary key columns input for table: "Asset"
"""
input Asset_pk_columns_input {
  assetId: bytea!
}

"""
select columns of table "Asset"
"""
enum Asset_select_column {
  """column name"""
  assetId

  """column name"""
  assetName

  """column name"""
  decimals

  """column name"""
  description

  """column name"""
  fingerprint

  """column name"""
  firstAppearedInSlot

  """column name"""
  logo

  """column name"""
  metadataHash

  """column name"""
  name

  """column name"""
  policyId

  """column name"""
  ticker

  """column name"""
  url
}

"""
input type for updating data in table "Asset"
"""
input Asset_set_input {
  assetId: bytea
  assetName: bytea
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  policyId: bytea
  ticker: String
  url: String
}

"""aggregate stddev on columns"""
type Asset_stddev_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
order by stddev() on columns of table "Asset"
"""
input Asset_stddev_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""aggregate stddev_pop on columns"""
type Asset_stddev_pop_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
order by stddev_pop() on columns of table "Asset"
"""
input Asset_stddev_pop_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""aggregate stddev_samp on columns"""
type Asset_stddev_samp_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
order by stddev_samp() on columns of table "Asset"
"""
input Asset_stddev_samp_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""aggregate sum on columns"""
type Asset_sum_fields {
  decimals: Int
  firstAppearedInSlot: Int
}

"""
order by sum() on columns of table "Asset"
"""
input Asset_sum_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""
update columns of table "Asset"
"""
enum Asset_update_column {
  """column name"""
  assetId

  """column name"""
  assetName

  """column name"""
  decimals

  """column name"""
  description

  """column name"""
  fingerprint

  """column name"""
  firstAppearedInSlot

  """column name"""
  logo

  """column name"""
  metadataHash

  """column name"""
  name

  """column name"""
  policyId

  """column name"""
  ticker

  """column name"""
  url
}

"""aggregate var_pop on columns"""
type Asset_var_pop_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
order by var_pop() on columns of table "Asset"
"""
input Asset_var_pop_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""aggregate var_samp on columns"""
type Asset_var_samp_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
order by var_samp() on columns of table "Asset"
"""
input Asset_var_samp_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""aggregate variance on columns"""
type Asset_variance_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
order by variance() on columns of table "Asset"
"""
input Asset_variance_order_by {
  decimals: order_by
  firstAppearedInSlot: order_by
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "ada_pots"
"""
type ada_pots {
  block_id: bigint!
  deposits: numeric!
  epoch_no: Int!
  fees: numeric!
  id: bigint!
  reserves: numeric!
  rewards: numeric!
  slot_no: Int!
  treasury: numeric!
  utxo: numeric!
}

"""
aggregated selection of "ada_pots"
"""
type ada_pots_aggregate {
  aggregate: ada_pots_aggregate_fields
  nodes: [ada_pots!]!
}

"""
aggregate fields of "ada_pots"
"""
type ada_pots_aggregate_fields {
  avg: ada_pots_avg_fields
  count(columns: [ada_pots_select_column!], distinct: Boolean): Int
  max: ada_pots_max_fields
  min: ada_pots_min_fields
  stddev: ada_pots_stddev_fields
  stddev_pop: ada_pots_stddev_pop_fields
  stddev_samp: ada_pots_stddev_samp_fields
  sum: ada_pots_sum_fields
  var_pop: ada_pots_var_pop_fields
  var_samp: ada_pots_var_samp_fields
  variance: ada_pots_variance_fields
}

"""
order by aggregate values of table "ada_pots"
"""
input ada_pots_aggregate_order_by {
  avg: ada_pots_avg_order_by
  count: order_by
  max: ada_pots_max_order_by
  min: ada_pots_min_order_by
  stddev: ada_pots_stddev_order_by
  stddev_pop: ada_pots_stddev_pop_order_by
  stddev_samp: ada_pots_stddev_samp_order_by
  sum: ada_pots_sum_order_by
  var_pop: ada_pots_var_pop_order_by
  var_samp: ada_pots_var_samp_order_by
  variance: ada_pots_variance_order_by
}

"""
input type for inserting array relation for remote table "ada_pots"
"""
input ada_pots_arr_rel_insert_input {
  data: [ada_pots_insert_input!]!
  on_conflict: ada_pots_on_conflict
}

"""aggregate avg on columns"""
type ada_pots_avg_fields {
  block_id: Float
  deposits: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
order by avg() on columns of table "ada_pots"
"""
input ada_pots_avg_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""
Boolean expression to filter rows from the table "ada_pots". All fields are combined with a logical 'AND'.
"""
input ada_pots_bool_exp {
  _and: [ada_pots_bool_exp]
  _not: ada_pots_bool_exp
  _or: [ada_pots_bool_exp]
  block_id: bigint_comparison_exp
  deposits: numeric_comparison_exp
  epoch_no: Int_comparison_exp
  fees: numeric_comparison_exp
  id: bigint_comparison_exp
  reserves: numeric_comparison_exp
  rewards: numeric_comparison_exp
  slot_no: Int_comparison_exp
  treasury: numeric_comparison_exp
  utxo: numeric_comparison_exp
}

"""
unique or primary key constraints on table "ada_pots"
"""
enum ada_pots_constraint {
  """unique or primary key constraint"""
  ada_pots_pkey

  """unique or primary key constraint"""
  unique_ada_pots
}

"""
input type for incrementing integer column in table "ada_pots"
"""
input ada_pots_inc_input {
  block_id: bigint
  deposits: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: Int
  treasury: numeric
  utxo: numeric
}

"""
input type for inserting data into table "ada_pots"
"""
input ada_pots_insert_input {
  block_id: bigint
  deposits: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: Int
  treasury: numeric
  utxo: numeric
}

"""aggregate max on columns"""
type ada_pots_max_fields {
  block_id: bigint
  deposits: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: Int
  treasury: numeric
  utxo: numeric
}

"""
order by max() on columns of table "ada_pots"
"""
input ada_pots_max_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""aggregate min on columns"""
type ada_pots_min_fields {
  block_id: bigint
  deposits: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: Int
  treasury: numeric
  utxo: numeric
}

"""
order by min() on columns of table "ada_pots"
"""
input ada_pots_min_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""
response of any mutation on the table "ada_pots"
"""
type ada_pots_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ada_pots!]!
}

"""
input type for inserting object relation for remote table "ada_pots"
"""
input ada_pots_obj_rel_insert_input {
  data: ada_pots_insert_input!
  on_conflict: ada_pots_on_conflict
}

"""
on conflict condition type for table "ada_pots"
"""
input ada_pots_on_conflict {
  constraint: ada_pots_constraint!
  update_columns: [ada_pots_update_column!]!
  where: ada_pots_bool_exp
}

"""
ordering options when selecting data from "ada_pots"
"""
input ada_pots_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""
primary key columns input for table: "ada_pots"
"""
input ada_pots_pk_columns_input {
  id: bigint!
}

"""
select columns of table "ada_pots"
"""
enum ada_pots_select_column {
  """column name"""
  block_id

  """column name"""
  deposits

  """column name"""
  epoch_no

  """column name"""
  fees

  """column name"""
  id

  """column name"""
  reserves

  """column name"""
  rewards

  """column name"""
  slot_no

  """column name"""
  treasury

  """column name"""
  utxo
}

"""
input type for updating data in table "ada_pots"
"""
input ada_pots_set_input {
  block_id: bigint
  deposits: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: Int
  treasury: numeric
  utxo: numeric
}

"""aggregate stddev on columns"""
type ada_pots_stddev_fields {
  block_id: Float
  deposits: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
order by stddev() on columns of table "ada_pots"
"""
input ada_pots_stddev_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""aggregate stddev_pop on columns"""
type ada_pots_stddev_pop_fields {
  block_id: Float
  deposits: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
order by stddev_pop() on columns of table "ada_pots"
"""
input ada_pots_stddev_pop_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""aggregate stddev_samp on columns"""
type ada_pots_stddev_samp_fields {
  block_id: Float
  deposits: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
order by stddev_samp() on columns of table "ada_pots"
"""
input ada_pots_stddev_samp_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""aggregate sum on columns"""
type ada_pots_sum_fields {
  block_id: bigint
  deposits: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: Int
  treasury: numeric
  utxo: numeric
}

"""
order by sum() on columns of table "ada_pots"
"""
input ada_pots_sum_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""
update columns of table "ada_pots"
"""
enum ada_pots_update_column {
  """column name"""
  block_id

  """column name"""
  deposits

  """column name"""
  epoch_no

  """column name"""
  fees

  """column name"""
  id

  """column name"""
  reserves

  """column name"""
  rewards

  """column name"""
  slot_no

  """column name"""
  treasury

  """column name"""
  utxo
}

"""aggregate var_pop on columns"""
type ada_pots_var_pop_fields {
  block_id: Float
  deposits: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
order by var_pop() on columns of table "ada_pots"
"""
input ada_pots_var_pop_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""aggregate var_samp on columns"""
type ada_pots_var_samp_fields {
  block_id: Float
  deposits: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
order by var_samp() on columns of table "ada_pots"
"""
input ada_pots_var_samp_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""aggregate variance on columns"""
type ada_pots_variance_fields {
  block_id: Float
  deposits: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
order by variance() on columns of table "ada_pots"
"""
input ada_pots_variance_order_by {
  block_id: order_by
  deposits: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""
columns and relationships of "admin_user"
"""
type admin_user {
  id: bigint!
  password: String!
  username: String!
}

"""
aggregated selection of "admin_user"
"""
type admin_user_aggregate {
  aggregate: admin_user_aggregate_fields
  nodes: [admin_user!]!
}

"""
aggregate fields of "admin_user"
"""
type admin_user_aggregate_fields {
  avg: admin_user_avg_fields
  count(columns: [admin_user_select_column!], distinct: Boolean): Int
  max: admin_user_max_fields
  min: admin_user_min_fields
  stddev: admin_user_stddev_fields
  stddev_pop: admin_user_stddev_pop_fields
  stddev_samp: admin_user_stddev_samp_fields
  sum: admin_user_sum_fields
  var_pop: admin_user_var_pop_fields
  var_samp: admin_user_var_samp_fields
  variance: admin_user_variance_fields
}

"""
order by aggregate values of table "admin_user"
"""
input admin_user_aggregate_order_by {
  avg: admin_user_avg_order_by
  count: order_by
  max: admin_user_max_order_by
  min: admin_user_min_order_by
  stddev: admin_user_stddev_order_by
  stddev_pop: admin_user_stddev_pop_order_by
  stddev_samp: admin_user_stddev_samp_order_by
  sum: admin_user_sum_order_by
  var_pop: admin_user_var_pop_order_by
  var_samp: admin_user_var_samp_order_by
  variance: admin_user_variance_order_by
}

"""
input type for inserting array relation for remote table "admin_user"
"""
input admin_user_arr_rel_insert_input {
  data: [admin_user_insert_input!]!
  on_conflict: admin_user_on_conflict
}

"""aggregate avg on columns"""
type admin_user_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "admin_user"
"""
input admin_user_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "admin_user". All fields are combined with a logical 'AND'.
"""
input admin_user_bool_exp {
  _and: [admin_user_bool_exp]
  _not: admin_user_bool_exp
  _or: [admin_user_bool_exp]
  id: bigint_comparison_exp
  password: String_comparison_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "admin_user"
"""
enum admin_user_constraint {
  """unique or primary key constraint"""
  admin_user_pkey

  """unique or primary key constraint"""
  unique_admin_user
}

"""
input type for incrementing integer column in table "admin_user"
"""
input admin_user_inc_input {
  id: bigint
}

"""
input type for inserting data into table "admin_user"
"""
input admin_user_insert_input {
  id: bigint
  password: String
  username: String
}

"""aggregate max on columns"""
type admin_user_max_fields {
  id: bigint
  password: String
  username: String
}

"""
order by max() on columns of table "admin_user"
"""
input admin_user_max_order_by {
  id: order_by
  password: order_by
  username: order_by
}

"""aggregate min on columns"""
type admin_user_min_fields {
  id: bigint
  password: String
  username: String
}

"""
order by min() on columns of table "admin_user"
"""
input admin_user_min_order_by {
  id: order_by
  password: order_by
  username: order_by
}

"""
response of any mutation on the table "admin_user"
"""
type admin_user_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [admin_user!]!
}

"""
input type for inserting object relation for remote table "admin_user"
"""
input admin_user_obj_rel_insert_input {
  data: admin_user_insert_input!
  on_conflict: admin_user_on_conflict
}

"""
on conflict condition type for table "admin_user"
"""
input admin_user_on_conflict {
  constraint: admin_user_constraint!
  update_columns: [admin_user_update_column!]!
  where: admin_user_bool_exp
}

"""
ordering options when selecting data from "admin_user"
"""
input admin_user_order_by {
  id: order_by
  password: order_by
  username: order_by
}

"""
primary key columns input for table: "admin_user"
"""
input admin_user_pk_columns_input {
  id: bigint!
}

"""
select columns of table "admin_user"
"""
enum admin_user_select_column {
  """column name"""
  id

  """column name"""
  password

  """column name"""
  username
}

"""
input type for updating data in table "admin_user"
"""
input admin_user_set_input {
  id: bigint
  password: String
  username: String
}

"""aggregate stddev on columns"""
type admin_user_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "admin_user"
"""
input admin_user_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type admin_user_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "admin_user"
"""
input admin_user_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type admin_user_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "admin_user"
"""
input admin_user_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type admin_user_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "admin_user"
"""
input admin_user_sum_order_by {
  id: order_by
}

"""
update columns of table "admin_user"
"""
enum admin_user_update_column {
  """column name"""
  id

  """column name"""
  password

  """column name"""
  username
}

"""aggregate var_pop on columns"""
type admin_user_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "admin_user"
"""
input admin_user_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type admin_user_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "admin_user"
"""
input admin_user_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type admin_user_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "admin_user"
"""
input admin_user_variance_order_by {
  id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "block"
"""
type block {
  block_no: Int
  epoch_no: Int
  epoch_slot_no: Int
  hash: bytea!
  id: bigint!
  op_cert: bytea
  op_cert_counter: bigint
  previous_id: bigint
  proto_major: Int!
  proto_minor: Int!
  size: Int!
  slot_leader_id: bigint!
  slot_no: Int
  time: timestamp!
  tx_count: bigint!
  vrf_key: String
}

"""
aggregated selection of "block"
"""
type block_aggregate {
  aggregate: block_aggregate_fields
  nodes: [block!]!
}

"""
aggregate fields of "block"
"""
type block_aggregate_fields {
  avg: block_avg_fields
  count(columns: [block_select_column!], distinct: Boolean): Int
  max: block_max_fields
  min: block_min_fields
  stddev: block_stddev_fields
  stddev_pop: block_stddev_pop_fields
  stddev_samp: block_stddev_samp_fields
  sum: block_sum_fields
  var_pop: block_var_pop_fields
  var_samp: block_var_samp_fields
  variance: block_variance_fields
}

"""
order by aggregate values of table "block"
"""
input block_aggregate_order_by {
  avg: block_avg_order_by
  count: order_by
  max: block_max_order_by
  min: block_min_order_by
  stddev: block_stddev_order_by
  stddev_pop: block_stddev_pop_order_by
  stddev_samp: block_stddev_samp_order_by
  sum: block_sum_order_by
  var_pop: block_var_pop_order_by
  var_samp: block_var_samp_order_by
  variance: block_variance_order_by
}

"""
input type for inserting array relation for remote table "block"
"""
input block_arr_rel_insert_input {
  data: [block_insert_input!]!
  on_conflict: block_on_conflict
}

"""aggregate avg on columns"""
type block_avg_fields {
  block_no: Float
  epoch_no: Float
  epoch_slot_no: Float
  id: Float
  op_cert_counter: Float
  previous_id: Float
  proto_major: Float
  proto_minor: Float
  size: Float
  slot_leader_id: Float
  slot_no: Float
  tx_count: Float
}

"""
order by avg() on columns of table "block"
"""
input block_avg_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

"""
Boolean expression to filter rows from the table "block". All fields are combined with a logical 'AND'.
"""
input block_bool_exp {
  _and: [block_bool_exp]
  _not: block_bool_exp
  _or: [block_bool_exp]
  block_no: Int_comparison_exp
  epoch_no: Int_comparison_exp
  epoch_slot_no: Int_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  op_cert: bytea_comparison_exp
  op_cert_counter: bigint_comparison_exp
  previous_id: bigint_comparison_exp
  proto_major: Int_comparison_exp
  proto_minor: Int_comparison_exp
  size: Int_comparison_exp
  slot_leader_id: bigint_comparison_exp
  slot_no: Int_comparison_exp
  time: timestamp_comparison_exp
  tx_count: bigint_comparison_exp
  vrf_key: String_comparison_exp
}

"""
unique or primary key constraints on table "block"
"""
enum block_constraint {
  """unique or primary key constraint"""
  block_pkey

  """unique or primary key constraint"""
  unique_block
}

"""
input type for incrementing integer column in table "block"
"""
input block_inc_input {
  block_no: Int
  epoch_no: Int
  epoch_slot_no: Int
  id: bigint
  op_cert_counter: bigint
  previous_id: bigint
  proto_major: Int
  proto_minor: Int
  size: Int
  slot_leader_id: bigint
  slot_no: Int
  tx_count: bigint
}

"""
input type for inserting data into table "block"
"""
input block_insert_input {
  block_no: Int
  epoch_no: Int
  epoch_slot_no: Int
  hash: bytea
  id: bigint
  op_cert: bytea
  op_cert_counter: bigint
  previous_id: bigint
  proto_major: Int
  proto_minor: Int
  size: Int
  slot_leader_id: bigint
  slot_no: Int
  time: timestamp
  tx_count: bigint
  vrf_key: String
}

"""aggregate max on columns"""
type block_max_fields {
  block_no: Int
  epoch_no: Int
  epoch_slot_no: Int
  id: bigint
  op_cert_counter: bigint
  previous_id: bigint
  proto_major: Int
  proto_minor: Int
  size: Int
  slot_leader_id: bigint
  slot_no: Int
  time: timestamp
  tx_count: bigint
  vrf_key: String
}

"""
order by max() on columns of table "block"
"""
input block_max_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  time: order_by
  tx_count: order_by
  vrf_key: order_by
}

"""aggregate min on columns"""
type block_min_fields {
  block_no: Int
  epoch_no: Int
  epoch_slot_no: Int
  id: bigint
  op_cert_counter: bigint
  previous_id: bigint
  proto_major: Int
  proto_minor: Int
  size: Int
  slot_leader_id: bigint
  slot_no: Int
  time: timestamp
  tx_count: bigint
  vrf_key: String
}

"""
order by min() on columns of table "block"
"""
input block_min_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  time: order_by
  tx_count: order_by
  vrf_key: order_by
}

"""
response of any mutation on the table "block"
"""
type block_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [block!]!
}

"""
input type for inserting object relation for remote table "block"
"""
input block_obj_rel_insert_input {
  data: block_insert_input!
  on_conflict: block_on_conflict
}

"""
on conflict condition type for table "block"
"""
input block_on_conflict {
  constraint: block_constraint!
  update_columns: [block_update_column!]!
  where: block_bool_exp
}

"""
ordering options when selecting data from "block"
"""
input block_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  hash: order_by
  id: order_by
  op_cert: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  time: order_by
  tx_count: order_by
  vrf_key: order_by
}

"""
primary key columns input for table: "block"
"""
input block_pk_columns_input {
  id: bigint!
}

"""
select columns of table "block"
"""
enum block_select_column {
  """column name"""
  block_no

  """column name"""
  epoch_no

  """column name"""
  epoch_slot_no

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  op_cert

  """column name"""
  op_cert_counter

  """column name"""
  previous_id

  """column name"""
  proto_major

  """column name"""
  proto_minor

  """column name"""
  size

  """column name"""
  slot_leader_id

  """column name"""
  slot_no

  """column name"""
  time

  """column name"""
  tx_count

  """column name"""
  vrf_key
}

"""
input type for updating data in table "block"
"""
input block_set_input {
  block_no: Int
  epoch_no: Int
  epoch_slot_no: Int
  hash: bytea
  id: bigint
  op_cert: bytea
  op_cert_counter: bigint
  previous_id: bigint
  proto_major: Int
  proto_minor: Int
  size: Int
  slot_leader_id: bigint
  slot_no: Int
  time: timestamp
  tx_count: bigint
  vrf_key: String
}

"""aggregate stddev on columns"""
type block_stddev_fields {
  block_no: Float
  epoch_no: Float
  epoch_slot_no: Float
  id: Float
  op_cert_counter: Float
  previous_id: Float
  proto_major: Float
  proto_minor: Float
  size: Float
  slot_leader_id: Float
  slot_no: Float
  tx_count: Float
}

"""
order by stddev() on columns of table "block"
"""
input block_stddev_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

"""aggregate stddev_pop on columns"""
type block_stddev_pop_fields {
  block_no: Float
  epoch_no: Float
  epoch_slot_no: Float
  id: Float
  op_cert_counter: Float
  previous_id: Float
  proto_major: Float
  proto_minor: Float
  size: Float
  slot_leader_id: Float
  slot_no: Float
  tx_count: Float
}

"""
order by stddev_pop() on columns of table "block"
"""
input block_stddev_pop_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

"""aggregate stddev_samp on columns"""
type block_stddev_samp_fields {
  block_no: Float
  epoch_no: Float
  epoch_slot_no: Float
  id: Float
  op_cert_counter: Float
  previous_id: Float
  proto_major: Float
  proto_minor: Float
  size: Float
  slot_leader_id: Float
  slot_no: Float
  tx_count: Float
}

"""
order by stddev_samp() on columns of table "block"
"""
input block_stddev_samp_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

"""aggregate sum on columns"""
type block_sum_fields {
  block_no: Int
  epoch_no: Int
  epoch_slot_no: Int
  id: bigint
  op_cert_counter: bigint
  previous_id: bigint
  proto_major: Int
  proto_minor: Int
  size: Int
  slot_leader_id: bigint
  slot_no: Int
  tx_count: bigint
}

"""
order by sum() on columns of table "block"
"""
input block_sum_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

"""
update columns of table "block"
"""
enum block_update_column {
  """column name"""
  block_no

  """column name"""
  epoch_no

  """column name"""
  epoch_slot_no

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  op_cert

  """column name"""
  op_cert_counter

  """column name"""
  previous_id

  """column name"""
  proto_major

  """column name"""
  proto_minor

  """column name"""
  size

  """column name"""
  slot_leader_id

  """column name"""
  slot_no

  """column name"""
  time

  """column name"""
  tx_count

  """column name"""
  vrf_key
}

"""aggregate var_pop on columns"""
type block_var_pop_fields {
  block_no: Float
  epoch_no: Float
  epoch_slot_no: Float
  id: Float
  op_cert_counter: Float
  previous_id: Float
  proto_major: Float
  proto_minor: Float
  size: Float
  slot_leader_id: Float
  slot_no: Float
  tx_count: Float
}

"""
order by var_pop() on columns of table "block"
"""
input block_var_pop_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

"""aggregate var_samp on columns"""
type block_var_samp_fields {
  block_no: Float
  epoch_no: Float
  epoch_slot_no: Float
  id: Float
  op_cert_counter: Float
  previous_id: Float
  proto_major: Float
  proto_minor: Float
  size: Float
  slot_leader_id: Float
  slot_no: Float
  tx_count: Float
}

"""
order by var_samp() on columns of table "block"
"""
input block_var_samp_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

"""aggregate variance on columns"""
type block_variance_fields {
  block_no: Float
  epoch_no: Float
  epoch_slot_no: Float
  id: Float
  op_cert_counter: Float
  previous_id: Float
  proto_major: Float
  proto_minor: Float
  size: Float
  slot_leader_id: Float
  slot_no: Float
  tx_count: Float
}

"""
order by variance() on columns of table "block"
"""
input block_variance_order_by {
  block_no: order_by
  epoch_no: order_by
  epoch_slot_no: order_by
  id: order_by
  op_cert_counter: order_by
  previous_id: order_by
  proto_major: order_by
  proto_minor: order_by
  size: order_by
  slot_leader_id: order_by
  slot_no: order_by
  tx_count: order_by
}

scalar bpchar

"""
expression to compare columns of type bpchar. All fields are combined with logical 'AND'.
"""
input bpchar_comparison_exp {
  _eq: bpchar
  _gt: bpchar
  _gte: bpchar
  _in: [bpchar!]
  _is_null: Boolean
  _lt: bpchar
  _lte: bpchar
  _neq: bpchar
  _nin: [bpchar!]
}

scalar bytea

"""
expression to compare columns of type bytea. All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

"""
columns and relationships of "collateral_tx_in"
"""
type collateral_tx_in {
  id: bigint!
  tx_in_id: bigint!
  tx_out_id: bigint!
  tx_out_index: smallint!
}

"""
aggregated selection of "collateral_tx_in"
"""
type collateral_tx_in_aggregate {
  aggregate: collateral_tx_in_aggregate_fields
  nodes: [collateral_tx_in!]!
}

"""
aggregate fields of "collateral_tx_in"
"""
type collateral_tx_in_aggregate_fields {
  avg: collateral_tx_in_avg_fields
  count(columns: [collateral_tx_in_select_column!], distinct: Boolean): Int
  max: collateral_tx_in_max_fields
  min: collateral_tx_in_min_fields
  stddev: collateral_tx_in_stddev_fields
  stddev_pop: collateral_tx_in_stddev_pop_fields
  stddev_samp: collateral_tx_in_stddev_samp_fields
  sum: collateral_tx_in_sum_fields
  var_pop: collateral_tx_in_var_pop_fields
  var_samp: collateral_tx_in_var_samp_fields
  variance: collateral_tx_in_variance_fields
}

"""
order by aggregate values of table "collateral_tx_in"
"""
input collateral_tx_in_aggregate_order_by {
  avg: collateral_tx_in_avg_order_by
  count: order_by
  max: collateral_tx_in_max_order_by
  min: collateral_tx_in_min_order_by
  stddev: collateral_tx_in_stddev_order_by
  stddev_pop: collateral_tx_in_stddev_pop_order_by
  stddev_samp: collateral_tx_in_stddev_samp_order_by
  sum: collateral_tx_in_sum_order_by
  var_pop: collateral_tx_in_var_pop_order_by
  var_samp: collateral_tx_in_var_samp_order_by
  variance: collateral_tx_in_variance_order_by
}

"""
input type for inserting array relation for remote table "collateral_tx_in"
"""
input collateral_tx_in_arr_rel_insert_input {
  data: [collateral_tx_in_insert_input!]!
  on_conflict: collateral_tx_in_on_conflict
}

"""aggregate avg on columns"""
type collateral_tx_in_avg_fields {
  id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by avg() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_avg_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
Boolean expression to filter rows from the table "collateral_tx_in". All fields are combined with a logical 'AND'.
"""
input collateral_tx_in_bool_exp {
  _and: [collateral_tx_in_bool_exp]
  _not: collateral_tx_in_bool_exp
  _or: [collateral_tx_in_bool_exp]
  id: bigint_comparison_exp
  tx_in_id: bigint_comparison_exp
  tx_out_id: bigint_comparison_exp
  tx_out_index: smallint_comparison_exp
}

"""
unique or primary key constraints on table "collateral_tx_in"
"""
enum collateral_tx_in_constraint {
  """unique or primary key constraint"""
  collateral_tx_in_pkey

  """unique or primary key constraint"""
  unique_col_txin
}

"""
input type for incrementing integer column in table "collateral_tx_in"
"""
input collateral_tx_in_inc_input {
  id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
input type for inserting data into table "collateral_tx_in"
"""
input collateral_tx_in_insert_input {
  id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""aggregate max on columns"""
type collateral_tx_in_max_fields {
  id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
order by max() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_max_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate min on columns"""
type collateral_tx_in_min_fields {
  id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
order by min() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_min_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
response of any mutation on the table "collateral_tx_in"
"""
type collateral_tx_in_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [collateral_tx_in!]!
}

"""
input type for inserting object relation for remote table "collateral_tx_in"
"""
input collateral_tx_in_obj_rel_insert_input {
  data: collateral_tx_in_insert_input!
  on_conflict: collateral_tx_in_on_conflict
}

"""
on conflict condition type for table "collateral_tx_in"
"""
input collateral_tx_in_on_conflict {
  constraint: collateral_tx_in_constraint!
  update_columns: [collateral_tx_in_update_column!]!
  where: collateral_tx_in_bool_exp
}

"""
ordering options when selecting data from "collateral_tx_in"
"""
input collateral_tx_in_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
primary key columns input for table: "collateral_tx_in"
"""
input collateral_tx_in_pk_columns_input {
  id: bigint!
}

"""
select columns of table "collateral_tx_in"
"""
enum collateral_tx_in_select_column {
  """column name"""
  id

  """column name"""
  tx_in_id

  """column name"""
  tx_out_id

  """column name"""
  tx_out_index
}

"""
input type for updating data in table "collateral_tx_in"
"""
input collateral_tx_in_set_input {
  id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""aggregate stddev on columns"""
type collateral_tx_in_stddev_fields {
  id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by stddev() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_stddev_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate stddev_pop on columns"""
type collateral_tx_in_stddev_pop_fields {
  id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by stddev_pop() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_stddev_pop_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate stddev_samp on columns"""
type collateral_tx_in_stddev_samp_fields {
  id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by stddev_samp() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_stddev_samp_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate sum on columns"""
type collateral_tx_in_sum_fields {
  id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
order by sum() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_sum_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
update columns of table "collateral_tx_in"
"""
enum collateral_tx_in_update_column {
  """column name"""
  id

  """column name"""
  tx_in_id

  """column name"""
  tx_out_id

  """column name"""
  tx_out_index
}

"""aggregate var_pop on columns"""
type collateral_tx_in_var_pop_fields {
  id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by var_pop() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_var_pop_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate var_samp on columns"""
type collateral_tx_in_var_samp_fields {
  id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by var_samp() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_var_samp_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate variance on columns"""
type collateral_tx_in_variance_fields {
  id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by variance() on columns of table "collateral_tx_in"
"""
input collateral_tx_in_variance_order_by {
  id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
columns and relationships of "delegation"
"""
type delegation {
  active_epoch_no: bigint!
  addr_id: bigint!
  cert_index: Int!
  id: bigint!
  pool_hash_id: bigint!
  redeemer_id: bigint
  slot_no: Int!
  tx_id: bigint!
}

"""
aggregated selection of "delegation"
"""
type delegation_aggregate {
  aggregate: delegation_aggregate_fields
  nodes: [delegation!]!
}

"""
aggregate fields of "delegation"
"""
type delegation_aggregate_fields {
  avg: delegation_avg_fields
  count(columns: [delegation_select_column!], distinct: Boolean): Int
  max: delegation_max_fields
  min: delegation_min_fields
  stddev: delegation_stddev_fields
  stddev_pop: delegation_stddev_pop_fields
  stddev_samp: delegation_stddev_samp_fields
  sum: delegation_sum_fields
  var_pop: delegation_var_pop_fields
  var_samp: delegation_var_samp_fields
  variance: delegation_variance_fields
}

"""
order by aggregate values of table "delegation"
"""
input delegation_aggregate_order_by {
  avg: delegation_avg_order_by
  count: order_by
  max: delegation_max_order_by
  min: delegation_min_order_by
  stddev: delegation_stddev_order_by
  stddev_pop: delegation_stddev_pop_order_by
  stddev_samp: delegation_stddev_samp_order_by
  sum: delegation_sum_order_by
  var_pop: delegation_var_pop_order_by
  var_samp: delegation_var_samp_order_by
  variance: delegation_variance_order_by
}

"""
input type for inserting array relation for remote table "delegation"
"""
input delegation_arr_rel_insert_input {
  data: [delegation_insert_input!]!
  on_conflict: delegation_on_conflict
}

"""aggregate avg on columns"""
type delegation_avg_fields {
  active_epoch_no: Float
  addr_id: Float
  cert_index: Float
  id: Float
  pool_hash_id: Float
  redeemer_id: Float
  slot_no: Float
  tx_id: Float
}

"""
order by avg() on columns of table "delegation"
"""
input delegation_avg_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "delegation". All fields are combined with a logical 'AND'.
"""
input delegation_bool_exp {
  _and: [delegation_bool_exp]
  _not: delegation_bool_exp
  _or: [delegation_bool_exp]
  active_epoch_no: bigint_comparison_exp
  addr_id: bigint_comparison_exp
  cert_index: Int_comparison_exp
  id: bigint_comparison_exp
  pool_hash_id: bigint_comparison_exp
  redeemer_id: bigint_comparison_exp
  slot_no: Int_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "delegation"
"""
enum delegation_constraint {
  """unique or primary key constraint"""
  delegation_pkey

  """unique or primary key constraint"""
  unique_delegation
}

"""
input type for incrementing integer column in table "delegation"
"""
input delegation_inc_input {
  active_epoch_no: bigint
  addr_id: bigint
  cert_index: Int
  id: bigint
  pool_hash_id: bigint
  redeemer_id: bigint
  slot_no: Int
  tx_id: bigint
}

"""
input type for inserting data into table "delegation"
"""
input delegation_insert_input {
  active_epoch_no: bigint
  addr_id: bigint
  cert_index: Int
  id: bigint
  pool_hash_id: bigint
  redeemer_id: bigint
  slot_no: Int
  tx_id: bigint
}

"""aggregate max on columns"""
type delegation_max_fields {
  active_epoch_no: bigint
  addr_id: bigint
  cert_index: Int
  id: bigint
  pool_hash_id: bigint
  redeemer_id: bigint
  slot_no: Int
  tx_id: bigint
}

"""
order by max() on columns of table "delegation"
"""
input delegation_max_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type delegation_min_fields {
  active_epoch_no: bigint
  addr_id: bigint
  cert_index: Int
  id: bigint
  pool_hash_id: bigint
  redeemer_id: bigint
  slot_no: Int
  tx_id: bigint
}

"""
order by min() on columns of table "delegation"
"""
input delegation_min_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "delegation"
"""
type delegation_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [delegation!]!
}

"""
input type for inserting object relation for remote table "delegation"
"""
input delegation_obj_rel_insert_input {
  data: delegation_insert_input!
  on_conflict: delegation_on_conflict
}

"""
on conflict condition type for table "delegation"
"""
input delegation_on_conflict {
  constraint: delegation_constraint!
  update_columns: [delegation_update_column!]!
  where: delegation_bool_exp
}

"""
ordering options when selecting data from "delegation"
"""
input delegation_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "delegation"
"""
input delegation_pk_columns_input {
  id: bigint!
}

"""
select columns of table "delegation"
"""
enum delegation_select_column {
  """column name"""
  active_epoch_no

  """column name"""
  addr_id

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  pool_hash_id

  """column name"""
  redeemer_id

  """column name"""
  slot_no

  """column name"""
  tx_id
}

"""
input type for updating data in table "delegation"
"""
input delegation_set_input {
  active_epoch_no: bigint
  addr_id: bigint
  cert_index: Int
  id: bigint
  pool_hash_id: bigint
  redeemer_id: bigint
  slot_no: Int
  tx_id: bigint
}

"""aggregate stddev on columns"""
type delegation_stddev_fields {
  active_epoch_no: Float
  addr_id: Float
  cert_index: Float
  id: Float
  pool_hash_id: Float
  redeemer_id: Float
  slot_no: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "delegation"
"""
input delegation_stddev_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type delegation_stddev_pop_fields {
  active_epoch_no: Float
  addr_id: Float
  cert_index: Float
  id: Float
  pool_hash_id: Float
  redeemer_id: Float
  slot_no: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "delegation"
"""
input delegation_stddev_pop_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type delegation_stddev_samp_fields {
  active_epoch_no: Float
  addr_id: Float
  cert_index: Float
  id: Float
  pool_hash_id: Float
  redeemer_id: Float
  slot_no: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "delegation"
"""
input delegation_stddev_samp_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type delegation_sum_fields {
  active_epoch_no: bigint
  addr_id: bigint
  cert_index: Int
  id: bigint
  pool_hash_id: bigint
  redeemer_id: bigint
  slot_no: Int
  tx_id: bigint
}

"""
order by sum() on columns of table "delegation"
"""
input delegation_sum_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""
update columns of table "delegation"
"""
enum delegation_update_column {
  """column name"""
  active_epoch_no

  """column name"""
  addr_id

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  pool_hash_id

  """column name"""
  redeemer_id

  """column name"""
  slot_no

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type delegation_var_pop_fields {
  active_epoch_no: Float
  addr_id: Float
  cert_index: Float
  id: Float
  pool_hash_id: Float
  redeemer_id: Float
  slot_no: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "delegation"
"""
input delegation_var_pop_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type delegation_var_samp_fields {
  active_epoch_no: Float
  addr_id: Float
  cert_index: Float
  id: Float
  pool_hash_id: Float
  redeemer_id: Float
  slot_no: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "delegation"
"""
input delegation_var_samp_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type delegation_variance_fields {
  active_epoch_no: Float
  addr_id: Float
  cert_index: Float
  id: Float
  pool_hash_id: Float
  redeemer_id: Float
  slot_no: Float
  tx_id: Float
}

"""
order by variance() on columns of table "delegation"
"""
input delegation_variance_order_by {
  active_epoch_no: order_by
  addr_id: order_by
  cert_index: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer_id: order_by
  slot_no: order_by
  tx_id: order_by
}

"""
columns and relationships of "epoch"
"""
type epoch {
  blk_count: Int!
  end_time: timestamp!
  fees: numeric!
  id: bigint!
  no: Int!
  out_sum: numeric!
  start_time: timestamp!
  tx_count: Int!
}

"""
aggregated selection of "epoch"
"""
type epoch_aggregate {
  aggregate: epoch_aggregate_fields
  nodes: [epoch!]!
}

"""
aggregate fields of "epoch"
"""
type epoch_aggregate_fields {
  avg: epoch_avg_fields
  count(columns: [epoch_select_column!], distinct: Boolean): Int
  max: epoch_max_fields
  min: epoch_min_fields
  stddev: epoch_stddev_fields
  stddev_pop: epoch_stddev_pop_fields
  stddev_samp: epoch_stddev_samp_fields
  sum: epoch_sum_fields
  var_pop: epoch_var_pop_fields
  var_samp: epoch_var_samp_fields
  variance: epoch_variance_fields
}

"""
order by aggregate values of table "epoch"
"""
input epoch_aggregate_order_by {
  avg: epoch_avg_order_by
  count: order_by
  max: epoch_max_order_by
  min: epoch_min_order_by
  stddev: epoch_stddev_order_by
  stddev_pop: epoch_stddev_pop_order_by
  stddev_samp: epoch_stddev_samp_order_by
  sum: epoch_sum_order_by
  var_pop: epoch_var_pop_order_by
  var_samp: epoch_var_samp_order_by
  variance: epoch_variance_order_by
}

"""
input type for inserting array relation for remote table "epoch"
"""
input epoch_arr_rel_insert_input {
  data: [epoch_insert_input!]!
  on_conflict: epoch_on_conflict
}

"""aggregate avg on columns"""
type epoch_avg_fields {
  blk_count: Float
  fees: Float
  id: Float
  no: Float
  out_sum: Float
  tx_count: Float
}

"""
order by avg() on columns of table "epoch"
"""
input epoch_avg_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

"""
Boolean expression to filter rows from the table "epoch". All fields are combined with a logical 'AND'.
"""
input epoch_bool_exp {
  _and: [epoch_bool_exp]
  _not: epoch_bool_exp
  _or: [epoch_bool_exp]
  blk_count: Int_comparison_exp
  end_time: timestamp_comparison_exp
  fees: numeric_comparison_exp
  id: bigint_comparison_exp
  no: Int_comparison_exp
  out_sum: numeric_comparison_exp
  start_time: timestamp_comparison_exp
  tx_count: Int_comparison_exp
}

"""
unique or primary key constraints on table "epoch"
"""
enum epoch_constraint {
  """unique or primary key constraint"""
  epoch_pkey

  """unique or primary key constraint"""
  unique_epoch
}

"""
input type for incrementing integer column in table "epoch"
"""
input epoch_inc_input {
  blk_count: Int
  fees: numeric
  id: bigint
  no: Int
  out_sum: numeric
  tx_count: Int
}

"""
input type for inserting data into table "epoch"
"""
input epoch_insert_input {
  blk_count: Int
  end_time: timestamp
  fees: numeric
  id: bigint
  no: Int
  out_sum: numeric
  start_time: timestamp
  tx_count: Int
}

"""aggregate max on columns"""
type epoch_max_fields {
  blk_count: Int
  end_time: timestamp
  fees: numeric
  id: bigint
  no: Int
  out_sum: numeric
  start_time: timestamp
  tx_count: Int
}

"""
order by max() on columns of table "epoch"
"""
input epoch_max_order_by {
  blk_count: order_by
  end_time: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  start_time: order_by
  tx_count: order_by
}

"""aggregate min on columns"""
type epoch_min_fields {
  blk_count: Int
  end_time: timestamp
  fees: numeric
  id: bigint
  no: Int
  out_sum: numeric
  start_time: timestamp
  tx_count: Int
}

"""
order by min() on columns of table "epoch"
"""
input epoch_min_order_by {
  blk_count: order_by
  end_time: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  start_time: order_by
  tx_count: order_by
}

"""
response of any mutation on the table "epoch"
"""
type epoch_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [epoch!]!
}

"""
input type for inserting object relation for remote table "epoch"
"""
input epoch_obj_rel_insert_input {
  data: epoch_insert_input!
  on_conflict: epoch_on_conflict
}

"""
on conflict condition type for table "epoch"
"""
input epoch_on_conflict {
  constraint: epoch_constraint!
  update_columns: [epoch_update_column!]!
  where: epoch_bool_exp
}

"""
ordering options when selecting data from "epoch"
"""
input epoch_order_by {
  blk_count: order_by
  end_time: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  start_time: order_by
  tx_count: order_by
}

"""
columns and relationships of "epoch_param"
"""
type epoch_param {
  block_id: bigint!
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8!
  entropy: bytea
  epoch_no: Int!
  id: bigint!
  influence: float8!
  key_deposit: numeric!
  max_bh_size: Int!
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int!
  max_collateral_inputs: Int
  max_epoch: Int!
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int!
  max_val_size: numeric
  min_fee_a: Int!
  min_fee_b: Int!
  min_pool_cost: numeric!
  min_utxo_value: numeric!
  monetary_expand_rate: float8!
  nonce: bytea
  optimal_pool_count: Int!
  pool_deposit: numeric!
  price_mem: float8
  price_step: float8
  protocol_major: Int!
  protocol_minor: Int!
  treasury_growth_rate: float8!
}

"""
aggregated selection of "epoch_param"
"""
type epoch_param_aggregate {
  aggregate: epoch_param_aggregate_fields
  nodes: [epoch_param!]!
}

"""
aggregate fields of "epoch_param"
"""
type epoch_param_aggregate_fields {
  avg: epoch_param_avg_fields
  count(columns: [epoch_param_select_column!], distinct: Boolean): Int
  max: epoch_param_max_fields
  min: epoch_param_min_fields
  stddev: epoch_param_stddev_fields
  stddev_pop: epoch_param_stddev_pop_fields
  stddev_samp: epoch_param_stddev_samp_fields
  sum: epoch_param_sum_fields
  var_pop: epoch_param_var_pop_fields
  var_samp: epoch_param_var_samp_fields
  variance: epoch_param_variance_fields
}

"""
order by aggregate values of table "epoch_param"
"""
input epoch_param_aggregate_order_by {
  avg: epoch_param_avg_order_by
  count: order_by
  max: epoch_param_max_order_by
  min: epoch_param_min_order_by
  stddev: epoch_param_stddev_order_by
  stddev_pop: epoch_param_stddev_pop_order_by
  stddev_samp: epoch_param_stddev_samp_order_by
  sum: epoch_param_sum_order_by
  var_pop: epoch_param_var_pop_order_by
  var_samp: epoch_param_var_samp_order_by
  variance: epoch_param_variance_order_by
}

"""
input type for inserting array relation for remote table "epoch_param"
"""
input epoch_param_arr_rel_insert_input {
  data: [epoch_param_insert_input!]!
  on_conflict: epoch_param_on_conflict
}

"""aggregate avg on columns"""
type epoch_param_avg_fields {
  block_id: Float
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  treasury_growth_rate: Float
}

"""
order by avg() on columns of table "epoch_param"
"""
input epoch_param_avg_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""
Boolean expression to filter rows from the table "epoch_param". All fields are combined with a logical 'AND'.
"""
input epoch_param_bool_exp {
  _and: [epoch_param_bool_exp]
  _not: epoch_param_bool_exp
  _or: [epoch_param_bool_exp]
  block_id: bigint_comparison_exp
  coins_per_utxo_word: numeric_comparison_exp
  collateral_percent: Int_comparison_exp
  cost_models: String_comparison_exp
  decentralisation: float8_comparison_exp
  entropy: bytea_comparison_exp
  epoch_no: Int_comparison_exp
  id: bigint_comparison_exp
  influence: float8_comparison_exp
  key_deposit: numeric_comparison_exp
  max_bh_size: Int_comparison_exp
  max_block_ex_mem: numeric_comparison_exp
  max_block_ex_steps: numeric_comparison_exp
  max_block_size: Int_comparison_exp
  max_collateral_inputs: Int_comparison_exp
  max_epoch: Int_comparison_exp
  max_tx_ex_mem: numeric_comparison_exp
  max_tx_ex_steps: numeric_comparison_exp
  max_tx_size: Int_comparison_exp
  max_val_size: numeric_comparison_exp
  min_fee_a: Int_comparison_exp
  min_fee_b: Int_comparison_exp
  min_pool_cost: numeric_comparison_exp
  min_utxo_value: numeric_comparison_exp
  monetary_expand_rate: float8_comparison_exp
  nonce: bytea_comparison_exp
  optimal_pool_count: Int_comparison_exp
  pool_deposit: numeric_comparison_exp
  price_mem: float8_comparison_exp
  price_step: float8_comparison_exp
  protocol_major: Int_comparison_exp
  protocol_minor: Int_comparison_exp
  treasury_growth_rate: float8_comparison_exp
}

"""
unique or primary key constraints on table "epoch_param"
"""
enum epoch_param_constraint {
  """unique or primary key constraint"""
  epoch_param_pkey

  """unique or primary key constraint"""
  unique_epoch_param
}

"""
input type for incrementing integer column in table "epoch_param"
"""
input epoch_param_inc_input {
  block_id: bigint
  coins_per_utxo_word: numeric
  collateral_percent: Int
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  treasury_growth_rate: float8
}

"""
input type for inserting data into table "epoch_param"
"""
input epoch_param_insert_input {
  block_id: bigint
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  entropy: bytea
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  nonce: bytea
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  treasury_growth_rate: float8
}

"""aggregate max on columns"""
type epoch_param_max_fields {
  block_id: bigint
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  treasury_growth_rate: float8
}

"""
order by max() on columns of table "epoch_param"
"""
input epoch_param_max_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  cost_models: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""aggregate min on columns"""
type epoch_param_min_fields {
  block_id: bigint
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  treasury_growth_rate: float8
}

"""
order by min() on columns of table "epoch_param"
"""
input epoch_param_min_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  cost_models: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""
response of any mutation on the table "epoch_param"
"""
type epoch_param_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [epoch_param!]!
}

"""
input type for inserting object relation for remote table "epoch_param"
"""
input epoch_param_obj_rel_insert_input {
  data: epoch_param_insert_input!
  on_conflict: epoch_param_on_conflict
}

"""
on conflict condition type for table "epoch_param"
"""
input epoch_param_on_conflict {
  constraint: epoch_param_constraint!
  update_columns: [epoch_param_update_column!]!
  where: epoch_param_bool_exp
}

"""
ordering options when selecting data from "epoch_param"
"""
input epoch_param_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  cost_models: order_by
  decentralisation: order_by
  entropy: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  nonce: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""
primary key columns input for table: "epoch_param"
"""
input epoch_param_pk_columns_input {
  id: bigint!
}

"""
select columns of table "epoch_param"
"""
enum epoch_param_select_column {
  """column name"""
  block_id

  """column name"""
  coins_per_utxo_word

  """column name"""
  collateral_percent

  """column name"""
  cost_models

  """column name"""
  decentralisation

  """column name"""
  entropy

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  influence

  """column name"""
  key_deposit

  """column name"""
  max_bh_size

  """column name"""
  max_block_ex_mem

  """column name"""
  max_block_ex_steps

  """column name"""
  max_block_size

  """column name"""
  max_collateral_inputs

  """column name"""
  max_epoch

  """column name"""
  max_tx_ex_mem

  """column name"""
  max_tx_ex_steps

  """column name"""
  max_tx_size

  """column name"""
  max_val_size

  """column name"""
  min_fee_a

  """column name"""
  min_fee_b

  """column name"""
  min_pool_cost

  """column name"""
  min_utxo_value

  """column name"""
  monetary_expand_rate

  """column name"""
  nonce

  """column name"""
  optimal_pool_count

  """column name"""
  pool_deposit

  """column name"""
  price_mem

  """column name"""
  price_step

  """column name"""
  protocol_major

  """column name"""
  protocol_minor

  """column name"""
  treasury_growth_rate
}

"""
input type for updating data in table "epoch_param"
"""
input epoch_param_set_input {
  block_id: bigint
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  entropy: bytea
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  nonce: bytea
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  treasury_growth_rate: float8
}

"""aggregate stddev on columns"""
type epoch_param_stddev_fields {
  block_id: Float
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  treasury_growth_rate: Float
}

"""
order by stddev() on columns of table "epoch_param"
"""
input epoch_param_stddev_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""aggregate stddev_pop on columns"""
type epoch_param_stddev_pop_fields {
  block_id: Float
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  treasury_growth_rate: Float
}

"""
order by stddev_pop() on columns of table "epoch_param"
"""
input epoch_param_stddev_pop_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""aggregate stddev_samp on columns"""
type epoch_param_stddev_samp_fields {
  block_id: Float
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  treasury_growth_rate: Float
}

"""
order by stddev_samp() on columns of table "epoch_param"
"""
input epoch_param_stddev_samp_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""aggregate sum on columns"""
type epoch_param_sum_fields {
  block_id: bigint
  coins_per_utxo_word: numeric
  collateral_percent: Int
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  treasury_growth_rate: float8
}

"""
order by sum() on columns of table "epoch_param"
"""
input epoch_param_sum_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""
update columns of table "epoch_param"
"""
enum epoch_param_update_column {
  """column name"""
  block_id

  """column name"""
  coins_per_utxo_word

  """column name"""
  collateral_percent

  """column name"""
  cost_models

  """column name"""
  decentralisation

  """column name"""
  entropy

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  influence

  """column name"""
  key_deposit

  """column name"""
  max_bh_size

  """column name"""
  max_block_ex_mem

  """column name"""
  max_block_ex_steps

  """column name"""
  max_block_size

  """column name"""
  max_collateral_inputs

  """column name"""
  max_epoch

  """column name"""
  max_tx_ex_mem

  """column name"""
  max_tx_ex_steps

  """column name"""
  max_tx_size

  """column name"""
  max_val_size

  """column name"""
  min_fee_a

  """column name"""
  min_fee_b

  """column name"""
  min_pool_cost

  """column name"""
  min_utxo_value

  """column name"""
  monetary_expand_rate

  """column name"""
  nonce

  """column name"""
  optimal_pool_count

  """column name"""
  pool_deposit

  """column name"""
  price_mem

  """column name"""
  price_step

  """column name"""
  protocol_major

  """column name"""
  protocol_minor

  """column name"""
  treasury_growth_rate
}

"""aggregate var_pop on columns"""
type epoch_param_var_pop_fields {
  block_id: Float
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  treasury_growth_rate: Float
}

"""
order by var_pop() on columns of table "epoch_param"
"""
input epoch_param_var_pop_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""aggregate var_samp on columns"""
type epoch_param_var_samp_fields {
  block_id: Float
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  treasury_growth_rate: Float
}

"""
order by var_samp() on columns of table "epoch_param"
"""
input epoch_param_var_samp_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""aggregate variance on columns"""
type epoch_param_variance_fields {
  block_id: Float
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  treasury_growth_rate: Float
}

"""
order by variance() on columns of table "epoch_param"
"""
input epoch_param_variance_order_by {
  block_id: order_by
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  treasury_growth_rate: order_by
}

"""
primary key columns input for table: "epoch"
"""
input epoch_pk_columns_input {
  id: bigint!
}

"""
columns and relationships of "epoch_reward_total_received"
"""
type epoch_reward_total_received {
  amount: numeric!
  earned_epoch: Int!
  id: bigint!
}

"""
aggregated selection of "epoch_reward_total_received"
"""
type epoch_reward_total_received_aggregate {
  aggregate: epoch_reward_total_received_aggregate_fields
  nodes: [epoch_reward_total_received!]!
}

"""
aggregate fields of "epoch_reward_total_received"
"""
type epoch_reward_total_received_aggregate_fields {
  avg: epoch_reward_total_received_avg_fields
  count(columns: [epoch_reward_total_received_select_column!], distinct: Boolean): Int
  max: epoch_reward_total_received_max_fields
  min: epoch_reward_total_received_min_fields
  stddev: epoch_reward_total_received_stddev_fields
  stddev_pop: epoch_reward_total_received_stddev_pop_fields
  stddev_samp: epoch_reward_total_received_stddev_samp_fields
  sum: epoch_reward_total_received_sum_fields
  var_pop: epoch_reward_total_received_var_pop_fields
  var_samp: epoch_reward_total_received_var_samp_fields
  variance: epoch_reward_total_received_variance_fields
}

"""
order by aggregate values of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_aggregate_order_by {
  avg: epoch_reward_total_received_avg_order_by
  count: order_by
  max: epoch_reward_total_received_max_order_by
  min: epoch_reward_total_received_min_order_by
  stddev: epoch_reward_total_received_stddev_order_by
  stddev_pop: epoch_reward_total_received_stddev_pop_order_by
  stddev_samp: epoch_reward_total_received_stddev_samp_order_by
  sum: epoch_reward_total_received_sum_order_by
  var_pop: epoch_reward_total_received_var_pop_order_by
  var_samp: epoch_reward_total_received_var_samp_order_by
  variance: epoch_reward_total_received_variance_order_by
}

"""
input type for inserting array relation for remote table "epoch_reward_total_received"
"""
input epoch_reward_total_received_arr_rel_insert_input {
  data: [epoch_reward_total_received_insert_input!]!
  on_conflict: epoch_reward_total_received_on_conflict
}

"""aggregate avg on columns"""
type epoch_reward_total_received_avg_fields {
  amount: Float
  earned_epoch: Float
  id: Float
}

"""
order by avg() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_avg_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "epoch_reward_total_received". All fields are combined with a logical 'AND'.
"""
input epoch_reward_total_received_bool_exp {
  _and: [epoch_reward_total_received_bool_exp]
  _not: epoch_reward_total_received_bool_exp
  _or: [epoch_reward_total_received_bool_exp]
  amount: numeric_comparison_exp
  earned_epoch: Int_comparison_exp
  id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "epoch_reward_total_received"
"""
enum epoch_reward_total_received_constraint {
  """unique or primary key constraint"""
  epoch_reward_total_received_pkey

  """unique or primary key constraint"""
  unique_epoch_reward_total_received
}

"""
input type for incrementing integer column in table "epoch_reward_total_received"
"""
input epoch_reward_total_received_inc_input {
  amount: numeric
  earned_epoch: Int
  id: bigint
}

"""
input type for inserting data into table "epoch_reward_total_received"
"""
input epoch_reward_total_received_insert_input {
  amount: numeric
  earned_epoch: Int
  id: bigint
}

"""aggregate max on columns"""
type epoch_reward_total_received_max_fields {
  amount: numeric
  earned_epoch: Int
  id: bigint
}

"""
order by max() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_max_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""aggregate min on columns"""
type epoch_reward_total_received_min_fields {
  amount: numeric
  earned_epoch: Int
  id: bigint
}

"""
order by min() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_min_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""
response of any mutation on the table "epoch_reward_total_received"
"""
type epoch_reward_total_received_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [epoch_reward_total_received!]!
}

"""
input type for inserting object relation for remote table "epoch_reward_total_received"
"""
input epoch_reward_total_received_obj_rel_insert_input {
  data: epoch_reward_total_received_insert_input!
  on_conflict: epoch_reward_total_received_on_conflict
}

"""
on conflict condition type for table "epoch_reward_total_received"
"""
input epoch_reward_total_received_on_conflict {
  constraint: epoch_reward_total_received_constraint!
  update_columns: [epoch_reward_total_received_update_column!]!
  where: epoch_reward_total_received_bool_exp
}

"""
ordering options when selecting data from "epoch_reward_total_received"
"""
input epoch_reward_total_received_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""
primary key columns input for table: "epoch_reward_total_received"
"""
input epoch_reward_total_received_pk_columns_input {
  id: bigint!
}

"""
select columns of table "epoch_reward_total_received"
"""
enum epoch_reward_total_received_select_column {
  """column name"""
  amount

  """column name"""
  earned_epoch

  """column name"""
  id
}

"""
input type for updating data in table "epoch_reward_total_received"
"""
input epoch_reward_total_received_set_input {
  amount: numeric
  earned_epoch: Int
  id: bigint
}

"""aggregate stddev on columns"""
type epoch_reward_total_received_stddev_fields {
  amount: Float
  earned_epoch: Float
  id: Float
}

"""
order by stddev() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_stddev_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type epoch_reward_total_received_stddev_pop_fields {
  amount: Float
  earned_epoch: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_stddev_pop_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type epoch_reward_total_received_stddev_samp_fields {
  amount: Float
  earned_epoch: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_stddev_samp_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""aggregate sum on columns"""
type epoch_reward_total_received_sum_fields {
  amount: numeric
  earned_epoch: Int
  id: bigint
}

"""
order by sum() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_sum_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""
update columns of table "epoch_reward_total_received"
"""
enum epoch_reward_total_received_update_column {
  """column name"""
  amount

  """column name"""
  earned_epoch

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type epoch_reward_total_received_var_pop_fields {
  amount: Float
  earned_epoch: Float
  id: Float
}

"""
order by var_pop() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_var_pop_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type epoch_reward_total_received_var_samp_fields {
  amount: Float
  earned_epoch: Float
  id: Float
}

"""
order by var_samp() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_var_samp_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""aggregate variance on columns"""
type epoch_reward_total_received_variance_fields {
  amount: Float
  earned_epoch: Float
  id: Float
}

"""
order by variance() on columns of table "epoch_reward_total_received"
"""
input epoch_reward_total_received_variance_order_by {
  amount: order_by
  earned_epoch: order_by
  id: order_by
}

"""
select columns of table "epoch"
"""
enum epoch_select_column {
  """column name"""
  blk_count

  """column name"""
  end_time

  """column name"""
  fees

  """column name"""
  id

  """column name"""
  no

  """column name"""
  out_sum

  """column name"""
  start_time

  """column name"""
  tx_count
}

"""
input type for updating data in table "epoch"
"""
input epoch_set_input {
  blk_count: Int
  end_time: timestamp
  fees: numeric
  id: bigint
  no: Int
  out_sum: numeric
  start_time: timestamp
  tx_count: Int
}

"""
columns and relationships of "epoch_stake"
"""
type epoch_stake {
  addr_id: bigint!
  amount: numeric!
  epoch_no: bigint!
  id: bigint!
  pool_id: bigint!
}

"""
aggregated selection of "epoch_stake"
"""
type epoch_stake_aggregate {
  aggregate: epoch_stake_aggregate_fields
  nodes: [epoch_stake!]!
}

"""
aggregate fields of "epoch_stake"
"""
type epoch_stake_aggregate_fields {
  avg: epoch_stake_avg_fields
  count(columns: [epoch_stake_select_column!], distinct: Boolean): Int
  max: epoch_stake_max_fields
  min: epoch_stake_min_fields
  stddev: epoch_stake_stddev_fields
  stddev_pop: epoch_stake_stddev_pop_fields
  stddev_samp: epoch_stake_stddev_samp_fields
  sum: epoch_stake_sum_fields
  var_pop: epoch_stake_var_pop_fields
  var_samp: epoch_stake_var_samp_fields
  variance: epoch_stake_variance_fields
}

"""
order by aggregate values of table "epoch_stake"
"""
input epoch_stake_aggregate_order_by {
  avg: epoch_stake_avg_order_by
  count: order_by
  max: epoch_stake_max_order_by
  min: epoch_stake_min_order_by
  stddev: epoch_stake_stddev_order_by
  stddev_pop: epoch_stake_stddev_pop_order_by
  stddev_samp: epoch_stake_stddev_samp_order_by
  sum: epoch_stake_sum_order_by
  var_pop: epoch_stake_var_pop_order_by
  var_samp: epoch_stake_var_samp_order_by
  variance: epoch_stake_variance_order_by
}

"""
input type for inserting array relation for remote table "epoch_stake"
"""
input epoch_stake_arr_rel_insert_input {
  data: [epoch_stake_insert_input!]!
  on_conflict: epoch_stake_on_conflict
}

"""aggregate avg on columns"""
type epoch_stake_avg_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by avg() on columns of table "epoch_stake"
"""
input epoch_stake_avg_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
Boolean expression to filter rows from the table "epoch_stake". All fields are combined with a logical 'AND'.
"""
input epoch_stake_bool_exp {
  _and: [epoch_stake_bool_exp]
  _not: epoch_stake_bool_exp
  _or: [epoch_stake_bool_exp]
  addr_id: bigint_comparison_exp
  amount: numeric_comparison_exp
  epoch_no: bigint_comparison_exp
  id: bigint_comparison_exp
  pool_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "epoch_stake"
"""
enum epoch_stake_constraint {
  """unique or primary key constraint"""
  epoch_stake_pkey

  """unique or primary key constraint"""
  unique_stake
}

"""
input type for incrementing integer column in table "epoch_stake"
"""
input epoch_stake_inc_input {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
input type for inserting data into table "epoch_stake"
"""
input epoch_stake_insert_input {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""aggregate max on columns"""
type epoch_stake_max_fields {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
order by max() on columns of table "epoch_stake"
"""
input epoch_stake_max_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate min on columns"""
type epoch_stake_min_fields {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
order by min() on columns of table "epoch_stake"
"""
input epoch_stake_min_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
response of any mutation on the table "epoch_stake"
"""
type epoch_stake_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [epoch_stake!]!
}

"""
input type for inserting object relation for remote table "epoch_stake"
"""
input epoch_stake_obj_rel_insert_input {
  data: epoch_stake_insert_input!
  on_conflict: epoch_stake_on_conflict
}

"""
on conflict condition type for table "epoch_stake"
"""
input epoch_stake_on_conflict {
  constraint: epoch_stake_constraint!
  update_columns: [epoch_stake_update_column!]!
  where: epoch_stake_bool_exp
}

"""
ordering options when selecting data from "epoch_stake"
"""
input epoch_stake_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
primary key columns input for table: "epoch_stake"
"""
input epoch_stake_pk_columns_input {
  id: bigint!
}

"""
select columns of table "epoch_stake"
"""
enum epoch_stake_select_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  pool_id
}

"""
input type for updating data in table "epoch_stake"
"""
input epoch_stake_set_input {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""aggregate stddev on columns"""
type epoch_stake_stddev_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by stddev() on columns of table "epoch_stake"
"""
input epoch_stake_stddev_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate stddev_pop on columns"""
type epoch_stake_stddev_pop_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by stddev_pop() on columns of table "epoch_stake"
"""
input epoch_stake_stddev_pop_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate stddev_samp on columns"""
type epoch_stake_stddev_samp_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by stddev_samp() on columns of table "epoch_stake"
"""
input epoch_stake_stddev_samp_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate sum on columns"""
type epoch_stake_sum_fields {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
order by sum() on columns of table "epoch_stake"
"""
input epoch_stake_sum_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
update columns of table "epoch_stake"
"""
enum epoch_stake_update_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  pool_id
}

"""aggregate var_pop on columns"""
type epoch_stake_var_pop_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by var_pop() on columns of table "epoch_stake"
"""
input epoch_stake_var_pop_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate var_samp on columns"""
type epoch_stake_var_samp_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by var_samp() on columns of table "epoch_stake"
"""
input epoch_stake_var_samp_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate variance on columns"""
type epoch_stake_variance_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by variance() on columns of table "epoch_stake"
"""
input epoch_stake_variance_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate stddev on columns"""
type epoch_stddev_fields {
  blk_count: Float
  fees: Float
  id: Float
  no: Float
  out_sum: Float
  tx_count: Float
}

"""
order by stddev() on columns of table "epoch"
"""
input epoch_stddev_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

"""aggregate stddev_pop on columns"""
type epoch_stddev_pop_fields {
  blk_count: Float
  fees: Float
  id: Float
  no: Float
  out_sum: Float
  tx_count: Float
}

"""
order by stddev_pop() on columns of table "epoch"
"""
input epoch_stddev_pop_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

"""aggregate stddev_samp on columns"""
type epoch_stddev_samp_fields {
  blk_count: Float
  fees: Float
  id: Float
  no: Float
  out_sum: Float
  tx_count: Float
}

"""
order by stddev_samp() on columns of table "epoch"
"""
input epoch_stddev_samp_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

"""aggregate sum on columns"""
type epoch_sum_fields {
  blk_count: Int
  fees: numeric
  id: bigint
  no: Int
  out_sum: numeric
  tx_count: Int
}

"""
order by sum() on columns of table "epoch"
"""
input epoch_sum_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

"""
columns and relationships of "epoch_sync_time"
"""
type epoch_sync_time {
  id: bigint!
  no: bigint!
  seconds: bigint!
  state: syncstatetype!
}

"""
aggregated selection of "epoch_sync_time"
"""
type epoch_sync_time_aggregate {
  aggregate: epoch_sync_time_aggregate_fields
  nodes: [epoch_sync_time!]!
}

"""
aggregate fields of "epoch_sync_time"
"""
type epoch_sync_time_aggregate_fields {
  avg: epoch_sync_time_avg_fields
  count(columns: [epoch_sync_time_select_column!], distinct: Boolean): Int
  max: epoch_sync_time_max_fields
  min: epoch_sync_time_min_fields
  stddev: epoch_sync_time_stddev_fields
  stddev_pop: epoch_sync_time_stddev_pop_fields
  stddev_samp: epoch_sync_time_stddev_samp_fields
  sum: epoch_sync_time_sum_fields
  var_pop: epoch_sync_time_var_pop_fields
  var_samp: epoch_sync_time_var_samp_fields
  variance: epoch_sync_time_variance_fields
}

"""
order by aggregate values of table "epoch_sync_time"
"""
input epoch_sync_time_aggregate_order_by {
  avg: epoch_sync_time_avg_order_by
  count: order_by
  max: epoch_sync_time_max_order_by
  min: epoch_sync_time_min_order_by
  stddev: epoch_sync_time_stddev_order_by
  stddev_pop: epoch_sync_time_stddev_pop_order_by
  stddev_samp: epoch_sync_time_stddev_samp_order_by
  sum: epoch_sync_time_sum_order_by
  var_pop: epoch_sync_time_var_pop_order_by
  var_samp: epoch_sync_time_var_samp_order_by
  variance: epoch_sync_time_variance_order_by
}

"""
input type for inserting array relation for remote table "epoch_sync_time"
"""
input epoch_sync_time_arr_rel_insert_input {
  data: [epoch_sync_time_insert_input!]!
  on_conflict: epoch_sync_time_on_conflict
}

"""aggregate avg on columns"""
type epoch_sync_time_avg_fields {
  id: Float
  no: Float
  seconds: Float
}

"""
order by avg() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_avg_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""
Boolean expression to filter rows from the table "epoch_sync_time". All fields are combined with a logical 'AND'.
"""
input epoch_sync_time_bool_exp {
  _and: [epoch_sync_time_bool_exp]
  _not: epoch_sync_time_bool_exp
  _or: [epoch_sync_time_bool_exp]
  id: bigint_comparison_exp
  no: bigint_comparison_exp
  seconds: bigint_comparison_exp
  state: syncstatetype_comparison_exp
}

"""
unique or primary key constraints on table "epoch_sync_time"
"""
enum epoch_sync_time_constraint {
  """unique or primary key constraint"""
  epoch_sync_time_pkey

  """unique or primary key constraint"""
  unique_epoch_sync_time
}

"""
input type for incrementing integer column in table "epoch_sync_time"
"""
input epoch_sync_time_inc_input {
  id: bigint
  no: bigint
  seconds: bigint
}

"""
input type for inserting data into table "epoch_sync_time"
"""
input epoch_sync_time_insert_input {
  id: bigint
  no: bigint
  seconds: bigint
  state: syncstatetype
}

"""aggregate max on columns"""
type epoch_sync_time_max_fields {
  id: bigint
  no: bigint
  seconds: bigint
}

"""
order by max() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_max_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""aggregate min on columns"""
type epoch_sync_time_min_fields {
  id: bigint
  no: bigint
  seconds: bigint
}

"""
order by min() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_min_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""
response of any mutation on the table "epoch_sync_time"
"""
type epoch_sync_time_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [epoch_sync_time!]!
}

"""
input type for inserting object relation for remote table "epoch_sync_time"
"""
input epoch_sync_time_obj_rel_insert_input {
  data: epoch_sync_time_insert_input!
  on_conflict: epoch_sync_time_on_conflict
}

"""
on conflict condition type for table "epoch_sync_time"
"""
input epoch_sync_time_on_conflict {
  constraint: epoch_sync_time_constraint!
  update_columns: [epoch_sync_time_update_column!]!
  where: epoch_sync_time_bool_exp
}

"""
ordering options when selecting data from "epoch_sync_time"
"""
input epoch_sync_time_order_by {
  id: order_by
  no: order_by
  seconds: order_by
  state: order_by
}

"""
primary key columns input for table: "epoch_sync_time"
"""
input epoch_sync_time_pk_columns_input {
  id: bigint!
}

"""
select columns of table "epoch_sync_time"
"""
enum epoch_sync_time_select_column {
  """column name"""
  id

  """column name"""
  no

  """column name"""
  seconds

  """column name"""
  state
}

"""
input type for updating data in table "epoch_sync_time"
"""
input epoch_sync_time_set_input {
  id: bigint
  no: bigint
  seconds: bigint
  state: syncstatetype
}

"""aggregate stddev on columns"""
type epoch_sync_time_stddev_fields {
  id: Float
  no: Float
  seconds: Float
}

"""
order by stddev() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_stddev_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""aggregate stddev_pop on columns"""
type epoch_sync_time_stddev_pop_fields {
  id: Float
  no: Float
  seconds: Float
}

"""
order by stddev_pop() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_stddev_pop_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""aggregate stddev_samp on columns"""
type epoch_sync_time_stddev_samp_fields {
  id: Float
  no: Float
  seconds: Float
}

"""
order by stddev_samp() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_stddev_samp_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""aggregate sum on columns"""
type epoch_sync_time_sum_fields {
  id: bigint
  no: bigint
  seconds: bigint
}

"""
order by sum() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_sum_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""
update columns of table "epoch_sync_time"
"""
enum epoch_sync_time_update_column {
  """column name"""
  id

  """column name"""
  no

  """column name"""
  seconds

  """column name"""
  state
}

"""aggregate var_pop on columns"""
type epoch_sync_time_var_pop_fields {
  id: Float
  no: Float
  seconds: Float
}

"""
order by var_pop() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_var_pop_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""aggregate var_samp on columns"""
type epoch_sync_time_var_samp_fields {
  id: Float
  no: Float
  seconds: Float
}

"""
order by var_samp() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_var_samp_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""aggregate variance on columns"""
type epoch_sync_time_variance_fields {
  id: Float
  no: Float
  seconds: Float
}

"""
order by variance() on columns of table "epoch_sync_time"
"""
input epoch_sync_time_variance_order_by {
  id: order_by
  no: order_by
  seconds: order_by
}

"""
update columns of table "epoch"
"""
enum epoch_update_column {
  """column name"""
  blk_count

  """column name"""
  end_time

  """column name"""
  fees

  """column name"""
  id

  """column name"""
  no

  """column name"""
  out_sum

  """column name"""
  start_time

  """column name"""
  tx_count
}

"""aggregate var_pop on columns"""
type epoch_var_pop_fields {
  blk_count: Float
  fees: Float
  id: Float
  no: Float
  out_sum: Float
  tx_count: Float
}

"""
order by var_pop() on columns of table "epoch"
"""
input epoch_var_pop_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

"""aggregate var_samp on columns"""
type epoch_var_samp_fields {
  blk_count: Float
  fees: Float
  id: Float
  no: Float
  out_sum: Float
  tx_count: Float
}

"""
order by var_samp() on columns of table "epoch"
"""
input epoch_var_samp_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

"""aggregate variance on columns"""
type epoch_variance_fields {
  blk_count: Float
  fees: Float
  id: Float
  no: Float
  out_sum: Float
  tx_count: Float
}

"""
order by variance() on columns of table "epoch"
"""
input epoch_variance_order_by {
  blk_count: order_by
  fees: order_by
  id: order_by
  no: order_by
  out_sum: order_by
  tx_count: order_by
}

scalar float8

"""
expression to compare columns of type float8. All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

scalar jsonb

"""
expression to compare columns of type jsonb. All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "ma_tx_mint"
"""
type ma_tx_mint {
  id: bigint!
  name: bytea!
  policy: bytea!
  quantity: numeric!
  tx_id: bigint!
}

"""
aggregated selection of "ma_tx_mint"
"""
type ma_tx_mint_aggregate {
  aggregate: ma_tx_mint_aggregate_fields
  nodes: [ma_tx_mint!]!
}

"""
aggregate fields of "ma_tx_mint"
"""
type ma_tx_mint_aggregate_fields {
  avg: ma_tx_mint_avg_fields
  count(columns: [ma_tx_mint_select_column!], distinct: Boolean): Int
  max: ma_tx_mint_max_fields
  min: ma_tx_mint_min_fields
  stddev: ma_tx_mint_stddev_fields
  stddev_pop: ma_tx_mint_stddev_pop_fields
  stddev_samp: ma_tx_mint_stddev_samp_fields
  sum: ma_tx_mint_sum_fields
  var_pop: ma_tx_mint_var_pop_fields
  var_samp: ma_tx_mint_var_samp_fields
  variance: ma_tx_mint_variance_fields
}

"""
order by aggregate values of table "ma_tx_mint"
"""
input ma_tx_mint_aggregate_order_by {
  avg: ma_tx_mint_avg_order_by
  count: order_by
  max: ma_tx_mint_max_order_by
  min: ma_tx_mint_min_order_by
  stddev: ma_tx_mint_stddev_order_by
  stddev_pop: ma_tx_mint_stddev_pop_order_by
  stddev_samp: ma_tx_mint_stddev_samp_order_by
  sum: ma_tx_mint_sum_order_by
  var_pop: ma_tx_mint_var_pop_order_by
  var_samp: ma_tx_mint_var_samp_order_by
  variance: ma_tx_mint_variance_order_by
}

"""
input type for inserting array relation for remote table "ma_tx_mint"
"""
input ma_tx_mint_arr_rel_insert_input {
  data: [ma_tx_mint_insert_input!]!
  on_conflict: ma_tx_mint_on_conflict
}

"""aggregate avg on columns"""
type ma_tx_mint_avg_fields {
  id: Float
  quantity: Float
  tx_id: Float
}

"""
order by avg() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_avg_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "ma_tx_mint". All fields are combined with a logical 'AND'.
"""
input ma_tx_mint_bool_exp {
  _and: [ma_tx_mint_bool_exp]
  _not: ma_tx_mint_bool_exp
  _or: [ma_tx_mint_bool_exp]
  id: bigint_comparison_exp
  name: bytea_comparison_exp
  policy: bytea_comparison_exp
  quantity: numeric_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "ma_tx_mint"
"""
enum ma_tx_mint_constraint {
  """unique or primary key constraint"""
  ma_tx_mint_pkey

  """unique or primary key constraint"""
  unique_ma_tx_mint
}

"""
input type for incrementing integer column in table "ma_tx_mint"
"""
input ma_tx_mint_inc_input {
  id: bigint
  quantity: numeric
  tx_id: bigint
}

"""
input type for inserting data into table "ma_tx_mint"
"""
input ma_tx_mint_insert_input {
  id: bigint
  name: bytea
  policy: bytea
  quantity: numeric
  tx_id: bigint
}

"""aggregate max on columns"""
type ma_tx_mint_max_fields {
  id: bigint
  quantity: numeric
  tx_id: bigint
}

"""
order by max() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_max_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type ma_tx_mint_min_fields {
  id: bigint
  quantity: numeric
  tx_id: bigint
}

"""
order by min() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_min_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "ma_tx_mint"
"""
type ma_tx_mint_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ma_tx_mint!]!
}

"""
input type for inserting object relation for remote table "ma_tx_mint"
"""
input ma_tx_mint_obj_rel_insert_input {
  data: ma_tx_mint_insert_input!
  on_conflict: ma_tx_mint_on_conflict
}

"""
on conflict condition type for table "ma_tx_mint"
"""
input ma_tx_mint_on_conflict {
  constraint: ma_tx_mint_constraint!
  update_columns: [ma_tx_mint_update_column!]!
  where: ma_tx_mint_bool_exp
}

"""
ordering options when selecting data from "ma_tx_mint"
"""
input ma_tx_mint_order_by {
  id: order_by
  name: order_by
  policy: order_by
  quantity: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "ma_tx_mint"
"""
input ma_tx_mint_pk_columns_input {
  id: bigint!
}

"""
select columns of table "ma_tx_mint"
"""
enum ma_tx_mint_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  policy

  """column name"""
  quantity

  """column name"""
  tx_id
}

"""
input type for updating data in table "ma_tx_mint"
"""
input ma_tx_mint_set_input {
  id: bigint
  name: bytea
  policy: bytea
  quantity: numeric
  tx_id: bigint
}

"""aggregate stddev on columns"""
type ma_tx_mint_stddev_fields {
  id: Float
  quantity: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_stddev_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type ma_tx_mint_stddev_pop_fields {
  id: Float
  quantity: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_stddev_pop_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type ma_tx_mint_stddev_samp_fields {
  id: Float
  quantity: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_stddev_samp_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type ma_tx_mint_sum_fields {
  id: bigint
  quantity: numeric
  tx_id: bigint
}

"""
order by sum() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_sum_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""
update columns of table "ma_tx_mint"
"""
enum ma_tx_mint_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  policy

  """column name"""
  quantity

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type ma_tx_mint_var_pop_fields {
  id: Float
  quantity: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_var_pop_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type ma_tx_mint_var_samp_fields {
  id: Float
  quantity: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_var_samp_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type ma_tx_mint_variance_fields {
  id: Float
  quantity: Float
  tx_id: Float
}

"""
order by variance() on columns of table "ma_tx_mint"
"""
input ma_tx_mint_variance_order_by {
  id: order_by
  quantity: order_by
  tx_id: order_by
}

"""
columns and relationships of "ma_tx_out"
"""
type ma_tx_out {
  id: bigint!
  name: bytea!
  policy: bytea!
  quantity: numeric!
  tx_out_id: bigint!
}

"""
aggregated selection of "ma_tx_out"
"""
type ma_tx_out_aggregate {
  aggregate: ma_tx_out_aggregate_fields
  nodes: [ma_tx_out!]!
}

"""
aggregate fields of "ma_tx_out"
"""
type ma_tx_out_aggregate_fields {
  avg: ma_tx_out_avg_fields
  count(columns: [ma_tx_out_select_column!], distinct: Boolean): Int
  max: ma_tx_out_max_fields
  min: ma_tx_out_min_fields
  stddev: ma_tx_out_stddev_fields
  stddev_pop: ma_tx_out_stddev_pop_fields
  stddev_samp: ma_tx_out_stddev_samp_fields
  sum: ma_tx_out_sum_fields
  var_pop: ma_tx_out_var_pop_fields
  var_samp: ma_tx_out_var_samp_fields
  variance: ma_tx_out_variance_fields
}

"""
order by aggregate values of table "ma_tx_out"
"""
input ma_tx_out_aggregate_order_by {
  avg: ma_tx_out_avg_order_by
  count: order_by
  max: ma_tx_out_max_order_by
  min: ma_tx_out_min_order_by
  stddev: ma_tx_out_stddev_order_by
  stddev_pop: ma_tx_out_stddev_pop_order_by
  stddev_samp: ma_tx_out_stddev_samp_order_by
  sum: ma_tx_out_sum_order_by
  var_pop: ma_tx_out_var_pop_order_by
  var_samp: ma_tx_out_var_samp_order_by
  variance: ma_tx_out_variance_order_by
}

"""
input type for inserting array relation for remote table "ma_tx_out"
"""
input ma_tx_out_arr_rel_insert_input {
  data: [ma_tx_out_insert_input!]!
  on_conflict: ma_tx_out_on_conflict
}

"""aggregate avg on columns"""
type ma_tx_out_avg_fields {
  id: Float
  quantity: Float
  tx_out_id: Float
}

"""
order by avg() on columns of table "ma_tx_out"
"""
input ma_tx_out_avg_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""
Boolean expression to filter rows from the table "ma_tx_out". All fields are combined with a logical 'AND'.
"""
input ma_tx_out_bool_exp {
  _and: [ma_tx_out_bool_exp]
  _not: ma_tx_out_bool_exp
  _or: [ma_tx_out_bool_exp]
  id: bigint_comparison_exp
  name: bytea_comparison_exp
  policy: bytea_comparison_exp
  quantity: numeric_comparison_exp
  tx_out_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "ma_tx_out"
"""
enum ma_tx_out_constraint {
  """unique or primary key constraint"""
  ma_tx_out_pkey

  """unique or primary key constraint"""
  unique_ma_tx_out
}

"""
input type for incrementing integer column in table "ma_tx_out"
"""
input ma_tx_out_inc_input {
  id: bigint
  quantity: numeric
  tx_out_id: bigint
}

"""
input type for inserting data into table "ma_tx_out"
"""
input ma_tx_out_insert_input {
  id: bigint
  name: bytea
  policy: bytea
  quantity: numeric
  tx_out_id: bigint
}

"""aggregate max on columns"""
type ma_tx_out_max_fields {
  id: bigint
  quantity: numeric
  tx_out_id: bigint
}

"""
order by max() on columns of table "ma_tx_out"
"""
input ma_tx_out_max_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate min on columns"""
type ma_tx_out_min_fields {
  id: bigint
  quantity: numeric
  tx_out_id: bigint
}

"""
order by min() on columns of table "ma_tx_out"
"""
input ma_tx_out_min_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""
response of any mutation on the table "ma_tx_out"
"""
type ma_tx_out_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ma_tx_out!]!
}

"""
input type for inserting object relation for remote table "ma_tx_out"
"""
input ma_tx_out_obj_rel_insert_input {
  data: ma_tx_out_insert_input!
  on_conflict: ma_tx_out_on_conflict
}

"""
on conflict condition type for table "ma_tx_out"
"""
input ma_tx_out_on_conflict {
  constraint: ma_tx_out_constraint!
  update_columns: [ma_tx_out_update_column!]!
  where: ma_tx_out_bool_exp
}

"""
ordering options when selecting data from "ma_tx_out"
"""
input ma_tx_out_order_by {
  id: order_by
  name: order_by
  policy: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""
primary key columns input for table: "ma_tx_out"
"""
input ma_tx_out_pk_columns_input {
  id: bigint!
}

"""
select columns of table "ma_tx_out"
"""
enum ma_tx_out_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  policy

  """column name"""
  quantity

  """column name"""
  tx_out_id
}

"""
input type for updating data in table "ma_tx_out"
"""
input ma_tx_out_set_input {
  id: bigint
  name: bytea
  policy: bytea
  quantity: numeric
  tx_out_id: bigint
}

"""aggregate stddev on columns"""
type ma_tx_out_stddev_fields {
  id: Float
  quantity: Float
  tx_out_id: Float
}

"""
order by stddev() on columns of table "ma_tx_out"
"""
input ma_tx_out_stddev_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate stddev_pop on columns"""
type ma_tx_out_stddev_pop_fields {
  id: Float
  quantity: Float
  tx_out_id: Float
}

"""
order by stddev_pop() on columns of table "ma_tx_out"
"""
input ma_tx_out_stddev_pop_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate stddev_samp on columns"""
type ma_tx_out_stddev_samp_fields {
  id: Float
  quantity: Float
  tx_out_id: Float
}

"""
order by stddev_samp() on columns of table "ma_tx_out"
"""
input ma_tx_out_stddev_samp_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate sum on columns"""
type ma_tx_out_sum_fields {
  id: bigint
  quantity: numeric
  tx_out_id: bigint
}

"""
order by sum() on columns of table "ma_tx_out"
"""
input ma_tx_out_sum_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""
update columns of table "ma_tx_out"
"""
enum ma_tx_out_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  policy

  """column name"""
  quantity

  """column name"""
  tx_out_id
}

"""aggregate var_pop on columns"""
type ma_tx_out_var_pop_fields {
  id: Float
  quantity: Float
  tx_out_id: Float
}

"""
order by var_pop() on columns of table "ma_tx_out"
"""
input ma_tx_out_var_pop_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate var_samp on columns"""
type ma_tx_out_var_samp_fields {
  id: Float
  quantity: Float
  tx_out_id: Float
}

"""
order by var_samp() on columns of table "ma_tx_out"
"""
input ma_tx_out_var_samp_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate variance on columns"""
type ma_tx_out_variance_fields {
  id: Float
  quantity: Float
  tx_out_id: Float
}

"""
order by variance() on columns of table "ma_tx_out"
"""
input ma_tx_out_variance_order_by {
  id: order_by
  quantity: order_by
  tx_out_id: order_by
}

"""
columns and relationships of "meta"
"""
type meta {
  id: bigint!
  network_name: String!
  start_time: timestamp!
}

"""
aggregated selection of "meta"
"""
type meta_aggregate {
  aggregate: meta_aggregate_fields
  nodes: [meta!]!
}

"""
aggregate fields of "meta"
"""
type meta_aggregate_fields {
  avg: meta_avg_fields
  count(columns: [meta_select_column!], distinct: Boolean): Int
  max: meta_max_fields
  min: meta_min_fields
  stddev: meta_stddev_fields
  stddev_pop: meta_stddev_pop_fields
  stddev_samp: meta_stddev_samp_fields
  sum: meta_sum_fields
  var_pop: meta_var_pop_fields
  var_samp: meta_var_samp_fields
  variance: meta_variance_fields
}

"""
order by aggregate values of table "meta"
"""
input meta_aggregate_order_by {
  avg: meta_avg_order_by
  count: order_by
  max: meta_max_order_by
  min: meta_min_order_by
  stddev: meta_stddev_order_by
  stddev_pop: meta_stddev_pop_order_by
  stddev_samp: meta_stddev_samp_order_by
  sum: meta_sum_order_by
  var_pop: meta_var_pop_order_by
  var_samp: meta_var_samp_order_by
  variance: meta_variance_order_by
}

"""
input type for inserting array relation for remote table "meta"
"""
input meta_arr_rel_insert_input {
  data: [meta_insert_input!]!
  on_conflict: meta_on_conflict
}

"""aggregate avg on columns"""
type meta_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "meta"
"""
input meta_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "meta". All fields are combined with a logical 'AND'.
"""
input meta_bool_exp {
  _and: [meta_bool_exp]
  _not: meta_bool_exp
  _or: [meta_bool_exp]
  id: bigint_comparison_exp
  network_name: String_comparison_exp
  start_time: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "meta"
"""
enum meta_constraint {
  """unique or primary key constraint"""
  meta_pkey

  """unique or primary key constraint"""
  unique_meta
}

"""
input type for incrementing integer column in table "meta"
"""
input meta_inc_input {
  id: bigint
}

"""
input type for inserting data into table "meta"
"""
input meta_insert_input {
  id: bigint
  network_name: String
  start_time: timestamp
}

"""aggregate max on columns"""
type meta_max_fields {
  id: bigint
  network_name: String
  start_time: timestamp
}

"""
order by max() on columns of table "meta"
"""
input meta_max_order_by {
  id: order_by
  network_name: order_by
  start_time: order_by
}

"""aggregate min on columns"""
type meta_min_fields {
  id: bigint
  network_name: String
  start_time: timestamp
}

"""
order by min() on columns of table "meta"
"""
input meta_min_order_by {
  id: order_by
  network_name: order_by
  start_time: order_by
}

"""
response of any mutation on the table "meta"
"""
type meta_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [meta!]!
}

"""
input type for inserting object relation for remote table "meta"
"""
input meta_obj_rel_insert_input {
  data: meta_insert_input!
  on_conflict: meta_on_conflict
}

"""
on conflict condition type for table "meta"
"""
input meta_on_conflict {
  constraint: meta_constraint!
  update_columns: [meta_update_column!]!
  where: meta_bool_exp
}

"""
ordering options when selecting data from "meta"
"""
input meta_order_by {
  id: order_by
  network_name: order_by
  start_time: order_by
}

"""
primary key columns input for table: "meta"
"""
input meta_pk_columns_input {
  id: bigint!
}

"""
select columns of table "meta"
"""
enum meta_select_column {
  """column name"""
  id

  """column name"""
  network_name

  """column name"""
  start_time
}

"""
input type for updating data in table "meta"
"""
input meta_set_input {
  id: bigint
  network_name: String
  start_time: timestamp
}

"""aggregate stddev on columns"""
type meta_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "meta"
"""
input meta_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type meta_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "meta"
"""
input meta_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type meta_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "meta"
"""
input meta_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type meta_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "meta"
"""
input meta_sum_order_by {
  id: order_by
}

"""
update columns of table "meta"
"""
enum meta_update_column {
  """column name"""
  id

  """column name"""
  network_name

  """column name"""
  start_time
}

"""aggregate var_pop on columns"""
type meta_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "meta"
"""
input meta_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type meta_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "meta"
"""
input meta_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type meta_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "meta"
"""
input meta_variance_order_by {
  id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "Asset"
  """
  delete_Asset(
    """filter the rows which have to be deleted"""
    where: Asset_bool_exp!
  ): Asset_mutation_response

  """
  delete single row from the table: "Asset"
  """
  delete_Asset_by_pk(assetId: bytea!): Asset

  """
  delete data from the table: "ada_pots"
  """
  delete_ada_pots(
    """filter the rows which have to be deleted"""
    where: ada_pots_bool_exp!
  ): ada_pots_mutation_response

  """
  delete single row from the table: "ada_pots"
  """
  delete_ada_pots_by_pk(id: bigint!): ada_pots

  """
  delete data from the table: "admin_user"
  """
  delete_admin_user(
    """filter the rows which have to be deleted"""
    where: admin_user_bool_exp!
  ): admin_user_mutation_response

  """
  delete single row from the table: "admin_user"
  """
  delete_admin_user_by_pk(id: bigint!): admin_user

  """
  delete data from the table: "block"
  """
  delete_block(
    """filter the rows which have to be deleted"""
    where: block_bool_exp!
  ): block_mutation_response

  """
  delete single row from the table: "block"
  """
  delete_block_by_pk(id: bigint!): block

  """
  delete data from the table: "collateral_tx_in"
  """
  delete_collateral_tx_in(
    """filter the rows which have to be deleted"""
    where: collateral_tx_in_bool_exp!
  ): collateral_tx_in_mutation_response

  """
  delete single row from the table: "collateral_tx_in"
  """
  delete_collateral_tx_in_by_pk(id: bigint!): collateral_tx_in

  """
  delete data from the table: "delegation"
  """
  delete_delegation(
    """filter the rows which have to be deleted"""
    where: delegation_bool_exp!
  ): delegation_mutation_response

  """
  delete single row from the table: "delegation"
  """
  delete_delegation_by_pk(id: bigint!): delegation

  """
  delete data from the table: "epoch"
  """
  delete_epoch(
    """filter the rows which have to be deleted"""
    where: epoch_bool_exp!
  ): epoch_mutation_response

  """
  delete single row from the table: "epoch"
  """
  delete_epoch_by_pk(id: bigint!): epoch

  """
  delete data from the table: "epoch_param"
  """
  delete_epoch_param(
    """filter the rows which have to be deleted"""
    where: epoch_param_bool_exp!
  ): epoch_param_mutation_response

  """
  delete single row from the table: "epoch_param"
  """
  delete_epoch_param_by_pk(id: bigint!): epoch_param

  """
  delete data from the table: "epoch_reward_total_received"
  """
  delete_epoch_reward_total_received(
    """filter the rows which have to be deleted"""
    where: epoch_reward_total_received_bool_exp!
  ): epoch_reward_total_received_mutation_response

  """
  delete single row from the table: "epoch_reward_total_received"
  """
  delete_epoch_reward_total_received_by_pk(id: bigint!): epoch_reward_total_received

  """
  delete data from the table: "epoch_stake"
  """
  delete_epoch_stake(
    """filter the rows which have to be deleted"""
    where: epoch_stake_bool_exp!
  ): epoch_stake_mutation_response

  """
  delete single row from the table: "epoch_stake"
  """
  delete_epoch_stake_by_pk(id: bigint!): epoch_stake

  """
  delete data from the table: "epoch_sync_time"
  """
  delete_epoch_sync_time(
    """filter the rows which have to be deleted"""
    where: epoch_sync_time_bool_exp!
  ): epoch_sync_time_mutation_response

  """
  delete single row from the table: "epoch_sync_time"
  """
  delete_epoch_sync_time_by_pk(id: bigint!): epoch_sync_time

  """
  delete data from the table: "ma_tx_mint"
  """
  delete_ma_tx_mint(
    """filter the rows which have to be deleted"""
    where: ma_tx_mint_bool_exp!
  ): ma_tx_mint_mutation_response

  """
  delete single row from the table: "ma_tx_mint"
  """
  delete_ma_tx_mint_by_pk(id: bigint!): ma_tx_mint

  """
  delete data from the table: "ma_tx_out"
  """
  delete_ma_tx_out(
    """filter the rows which have to be deleted"""
    where: ma_tx_out_bool_exp!
  ): ma_tx_out_mutation_response

  """
  delete single row from the table: "ma_tx_out"
  """
  delete_ma_tx_out_by_pk(id: bigint!): ma_tx_out

  """
  delete data from the table: "meta"
  """
  delete_meta(
    """filter the rows which have to be deleted"""
    where: meta_bool_exp!
  ): meta_mutation_response

  """
  delete single row from the table: "meta"
  """
  delete_meta_by_pk(id: bigint!): meta

  """
  delete data from the table: "orphaned_reward"
  """
  delete_orphaned_reward(
    """filter the rows which have to be deleted"""
    where: orphaned_reward_bool_exp!
  ): orphaned_reward_mutation_response

  """
  delete single row from the table: "orphaned_reward"
  """
  delete_orphaned_reward_by_pk(id: bigint!): orphaned_reward

  """
  delete data from the table: "param_proposal"
  """
  delete_param_proposal(
    """filter the rows which have to be deleted"""
    where: param_proposal_bool_exp!
  ): param_proposal_mutation_response

  """
  delete single row from the table: "param_proposal"
  """
  delete_param_proposal_by_pk(id: bigint!): param_proposal

  """
  delete data from the table: "pool_hash"
  """
  delete_pool_hash(
    """filter the rows which have to be deleted"""
    where: pool_hash_bool_exp!
  ): pool_hash_mutation_response

  """
  delete single row from the table: "pool_hash"
  """
  delete_pool_hash_by_pk(id: bigint!): pool_hash

  """
  delete data from the table: "pool_metadata_ref"
  """
  delete_pool_metadata_ref(
    """filter the rows which have to be deleted"""
    where: pool_metadata_ref_bool_exp!
  ): pool_metadata_ref_mutation_response

  """
  delete single row from the table: "pool_metadata_ref"
  """
  delete_pool_metadata_ref_by_pk(id: bigint!): pool_metadata_ref

  """
  delete data from the table: "pool_offline_data"
  """
  delete_pool_offline_data(
    """filter the rows which have to be deleted"""
    where: pool_offline_data_bool_exp!
  ): pool_offline_data_mutation_response

  """
  delete single row from the table: "pool_offline_data"
  """
  delete_pool_offline_data_by_pk(id: bigint!): pool_offline_data

  """
  delete data from the table: "pool_offline_fetch_error"
  """
  delete_pool_offline_fetch_error(
    """filter the rows which have to be deleted"""
    where: pool_offline_fetch_error_bool_exp!
  ): pool_offline_fetch_error_mutation_response

  """
  delete single row from the table: "pool_offline_fetch_error"
  """
  delete_pool_offline_fetch_error_by_pk(id: bigint!): pool_offline_fetch_error

  """
  delete data from the table: "pool_owner"
  """
  delete_pool_owner(
    """filter the rows which have to be deleted"""
    where: pool_owner_bool_exp!
  ): pool_owner_mutation_response

  """
  delete single row from the table: "pool_owner"
  """
  delete_pool_owner_by_pk(id: bigint!): pool_owner

  """
  delete data from the table: "pool_relay"
  """
  delete_pool_relay(
    """filter the rows which have to be deleted"""
    where: pool_relay_bool_exp!
  ): pool_relay_mutation_response

  """
  delete single row from the table: "pool_relay"
  """
  delete_pool_relay_by_pk(id: bigint!): pool_relay

  """
  delete data from the table: "pool_retire"
  """
  delete_pool_retire(
    """filter the rows which have to be deleted"""
    where: pool_retire_bool_exp!
  ): pool_retire_mutation_response

  """
  delete single row from the table: "pool_retire"
  """
  delete_pool_retire_by_pk(id: bigint!): pool_retire

  """
  delete data from the table: "pool_update"
  """
  delete_pool_update(
    """filter the rows which have to be deleted"""
    where: pool_update_bool_exp!
  ): pool_update_mutation_response

  """
  delete single row from the table: "pool_update"
  """
  delete_pool_update_by_pk(id: bigint!): pool_update

  """
  delete data from the table: "pot_transfer"
  """
  delete_pot_transfer(
    """filter the rows which have to be deleted"""
    where: pot_transfer_bool_exp!
  ): pot_transfer_mutation_response

  """
  delete single row from the table: "pot_transfer"
  """
  delete_pot_transfer_by_pk(id: bigint!): pot_transfer

  """
  delete data from the table: "redeemer"
  """
  delete_redeemer(
    """filter the rows which have to be deleted"""
    where: redeemer_bool_exp!
  ): redeemer_mutation_response

  """
  delete single row from the table: "redeemer"
  """
  delete_redeemer_by_pk(id: bigint!): redeemer

  """
  delete data from the table: "reserve"
  """
  delete_reserve(
    """filter the rows which have to be deleted"""
    where: reserve_bool_exp!
  ): reserve_mutation_response

  """
  delete single row from the table: "reserve"
  """
  delete_reserve_by_pk(id: bigint!): reserve

  """
  delete data from the table: "reserved_pool_ticker"
  """
  delete_reserved_pool_ticker(
    """filter the rows which have to be deleted"""
    where: reserved_pool_ticker_bool_exp!
  ): reserved_pool_ticker_mutation_response

  """
  delete single row from the table: "reserved_pool_ticker"
  """
  delete_reserved_pool_ticker_by_pk(id: bigint!): reserved_pool_ticker

  """
  delete data from the table: "reward"
  """
  delete_reward(
    """filter the rows which have to be deleted"""
    where: reward_bool_exp!
  ): reward_mutation_response

  """
  delete single row from the table: "reward"
  """
  delete_reward_by_pk(id: bigint!): reward

  """
  delete data from the table: "schema_version"
  """
  delete_schema_version(
    """filter the rows which have to be deleted"""
    where: schema_version_bool_exp!
  ): schema_version_mutation_response

  """
  delete single row from the table: "schema_version"
  """
  delete_schema_version_by_pk(id: bigint!): schema_version

  """
  delete data from the table: "script"
  """
  delete_script(
    """filter the rows which have to be deleted"""
    where: script_bool_exp!
  ): script_mutation_response

  """
  delete single row from the table: "script"
  """
  delete_script_by_pk(id: bigint!): script

  """
  delete data from the table: "slot_leader"
  """
  delete_slot_leader(
    """filter the rows which have to be deleted"""
    where: slot_leader_bool_exp!
  ): slot_leader_mutation_response

  """
  delete single row from the table: "slot_leader"
  """
  delete_slot_leader_by_pk(id: bigint!): slot_leader

  """
  delete data from the table: "stake_address"
  """
  delete_stake_address(
    """filter the rows which have to be deleted"""
    where: stake_address_bool_exp!
  ): stake_address_mutation_response

  """
  delete single row from the table: "stake_address"
  """
  delete_stake_address_by_pk(id: bigint!): stake_address

  """
  delete data from the table: "stake_deregistration"
  """
  delete_stake_deregistration(
    """filter the rows which have to be deleted"""
    where: stake_deregistration_bool_exp!
  ): stake_deregistration_mutation_response

  """
  delete single row from the table: "stake_deregistration"
  """
  delete_stake_deregistration_by_pk(id: bigint!): stake_deregistration

  """
  delete data from the table: "stake_registration"
  """
  delete_stake_registration(
    """filter the rows which have to be deleted"""
    where: stake_registration_bool_exp!
  ): stake_registration_mutation_response

  """
  delete single row from the table: "stake_registration"
  """
  delete_stake_registration_by_pk(id: bigint!): stake_registration

  """
  delete data from the table: "treasury"
  """
  delete_treasury(
    """filter the rows which have to be deleted"""
    where: treasury_bool_exp!
  ): treasury_mutation_response

  """
  delete single row from the table: "treasury"
  """
  delete_treasury_by_pk(id: bigint!): treasury

  """
  delete data from the table: "tx"
  """
  delete_tx(
    """filter the rows which have to be deleted"""
    where: tx_bool_exp!
  ): tx_mutation_response

  """
  delete single row from the table: "tx"
  """
  delete_tx_by_pk(id: bigint!): tx

  """
  delete data from the table: "tx_in"
  """
  delete_tx_in(
    """filter the rows which have to be deleted"""
    where: tx_in_bool_exp!
  ): tx_in_mutation_response

  """
  delete single row from the table: "tx_in"
  """
  delete_tx_in_by_pk(id: bigint!): tx_in

  """
  delete data from the table: "tx_metadata"
  """
  delete_tx_metadata(
    """filter the rows which have to be deleted"""
    where: tx_metadata_bool_exp!
  ): tx_metadata_mutation_response

  """
  delete single row from the table: "tx_metadata"
  """
  delete_tx_metadata_by_pk(id: bigint!): tx_metadata

  """
  delete data from the table: "tx_out"
  """
  delete_tx_out(
    """filter the rows which have to be deleted"""
    where: tx_out_bool_exp!
  ): tx_out_mutation_response

  """
  delete single row from the table: "tx_out"
  """
  delete_tx_out_by_pk(id: bigint!): tx_out

  """
  delete data from the table: "withdrawal"
  """
  delete_withdrawal(
    """filter the rows which have to be deleted"""
    where: withdrawal_bool_exp!
  ): withdrawal_mutation_response

  """
  delete single row from the table: "withdrawal"
  """
  delete_withdrawal_by_pk(id: bigint!): withdrawal

  """
  insert data into the table: "Asset"
  """
  insert_Asset(
    """the rows to be inserted"""
    objects: [Asset_insert_input!]!

    """on conflict condition"""
    on_conflict: Asset_on_conflict
  ): Asset_mutation_response

  """
  insert a single row into the table: "Asset"
  """
  insert_Asset_one(
    """the row to be inserted"""
    object: Asset_insert_input!

    """on conflict condition"""
    on_conflict: Asset_on_conflict
  ): Asset

  """
  insert data into the table: "ada_pots"
  """
  insert_ada_pots(
    """the rows to be inserted"""
    objects: [ada_pots_insert_input!]!

    """on conflict condition"""
    on_conflict: ada_pots_on_conflict
  ): ada_pots_mutation_response

  """
  insert a single row into the table: "ada_pots"
  """
  insert_ada_pots_one(
    """the row to be inserted"""
    object: ada_pots_insert_input!

    """on conflict condition"""
    on_conflict: ada_pots_on_conflict
  ): ada_pots

  """
  insert data into the table: "admin_user"
  """
  insert_admin_user(
    """the rows to be inserted"""
    objects: [admin_user_insert_input!]!

    """on conflict condition"""
    on_conflict: admin_user_on_conflict
  ): admin_user_mutation_response

  """
  insert a single row into the table: "admin_user"
  """
  insert_admin_user_one(
    """the row to be inserted"""
    object: admin_user_insert_input!

    """on conflict condition"""
    on_conflict: admin_user_on_conflict
  ): admin_user

  """
  insert data into the table: "block"
  """
  insert_block(
    """the rows to be inserted"""
    objects: [block_insert_input!]!

    """on conflict condition"""
    on_conflict: block_on_conflict
  ): block_mutation_response

  """
  insert a single row into the table: "block"
  """
  insert_block_one(
    """the row to be inserted"""
    object: block_insert_input!

    """on conflict condition"""
    on_conflict: block_on_conflict
  ): block

  """
  insert data into the table: "collateral_tx_in"
  """
  insert_collateral_tx_in(
    """the rows to be inserted"""
    objects: [collateral_tx_in_insert_input!]!

    """on conflict condition"""
    on_conflict: collateral_tx_in_on_conflict
  ): collateral_tx_in_mutation_response

  """
  insert a single row into the table: "collateral_tx_in"
  """
  insert_collateral_tx_in_one(
    """the row to be inserted"""
    object: collateral_tx_in_insert_input!

    """on conflict condition"""
    on_conflict: collateral_tx_in_on_conflict
  ): collateral_tx_in

  """
  insert data into the table: "delegation"
  """
  insert_delegation(
    """the rows to be inserted"""
    objects: [delegation_insert_input!]!

    """on conflict condition"""
    on_conflict: delegation_on_conflict
  ): delegation_mutation_response

  """
  insert a single row into the table: "delegation"
  """
  insert_delegation_one(
    """the row to be inserted"""
    object: delegation_insert_input!

    """on conflict condition"""
    on_conflict: delegation_on_conflict
  ): delegation

  """
  insert data into the table: "epoch"
  """
  insert_epoch(
    """the rows to be inserted"""
    objects: [epoch_insert_input!]!

    """on conflict condition"""
    on_conflict: epoch_on_conflict
  ): epoch_mutation_response

  """
  insert a single row into the table: "epoch"
  """
  insert_epoch_one(
    """the row to be inserted"""
    object: epoch_insert_input!

    """on conflict condition"""
    on_conflict: epoch_on_conflict
  ): epoch

  """
  insert data into the table: "epoch_param"
  """
  insert_epoch_param(
    """the rows to be inserted"""
    objects: [epoch_param_insert_input!]!

    """on conflict condition"""
    on_conflict: epoch_param_on_conflict
  ): epoch_param_mutation_response

  """
  insert a single row into the table: "epoch_param"
  """
  insert_epoch_param_one(
    """the row to be inserted"""
    object: epoch_param_insert_input!

    """on conflict condition"""
    on_conflict: epoch_param_on_conflict
  ): epoch_param

  """
  insert data into the table: "epoch_reward_total_received"
  """
  insert_epoch_reward_total_received(
    """the rows to be inserted"""
    objects: [epoch_reward_total_received_insert_input!]!

    """on conflict condition"""
    on_conflict: epoch_reward_total_received_on_conflict
  ): epoch_reward_total_received_mutation_response

  """
  insert a single row into the table: "epoch_reward_total_received"
  """
  insert_epoch_reward_total_received_one(
    """the row to be inserted"""
    object: epoch_reward_total_received_insert_input!

    """on conflict condition"""
    on_conflict: epoch_reward_total_received_on_conflict
  ): epoch_reward_total_received

  """
  insert data into the table: "epoch_stake"
  """
  insert_epoch_stake(
    """the rows to be inserted"""
    objects: [epoch_stake_insert_input!]!

    """on conflict condition"""
    on_conflict: epoch_stake_on_conflict
  ): epoch_stake_mutation_response

  """
  insert a single row into the table: "epoch_stake"
  """
  insert_epoch_stake_one(
    """the row to be inserted"""
    object: epoch_stake_insert_input!

    """on conflict condition"""
    on_conflict: epoch_stake_on_conflict
  ): epoch_stake

  """
  insert data into the table: "epoch_sync_time"
  """
  insert_epoch_sync_time(
    """the rows to be inserted"""
    objects: [epoch_sync_time_insert_input!]!

    """on conflict condition"""
    on_conflict: epoch_sync_time_on_conflict
  ): epoch_sync_time_mutation_response

  """
  insert a single row into the table: "epoch_sync_time"
  """
  insert_epoch_sync_time_one(
    """the row to be inserted"""
    object: epoch_sync_time_insert_input!

    """on conflict condition"""
    on_conflict: epoch_sync_time_on_conflict
  ): epoch_sync_time

  """
  insert data into the table: "ma_tx_mint"
  """
  insert_ma_tx_mint(
    """the rows to be inserted"""
    objects: [ma_tx_mint_insert_input!]!

    """on conflict condition"""
    on_conflict: ma_tx_mint_on_conflict
  ): ma_tx_mint_mutation_response

  """
  insert a single row into the table: "ma_tx_mint"
  """
  insert_ma_tx_mint_one(
    """the row to be inserted"""
    object: ma_tx_mint_insert_input!

    """on conflict condition"""
    on_conflict: ma_tx_mint_on_conflict
  ): ma_tx_mint

  """
  insert data into the table: "ma_tx_out"
  """
  insert_ma_tx_out(
    """the rows to be inserted"""
    objects: [ma_tx_out_insert_input!]!

    """on conflict condition"""
    on_conflict: ma_tx_out_on_conflict
  ): ma_tx_out_mutation_response

  """
  insert a single row into the table: "ma_tx_out"
  """
  insert_ma_tx_out_one(
    """the row to be inserted"""
    object: ma_tx_out_insert_input!

    """on conflict condition"""
    on_conflict: ma_tx_out_on_conflict
  ): ma_tx_out

  """
  insert data into the table: "meta"
  """
  insert_meta(
    """the rows to be inserted"""
    objects: [meta_insert_input!]!

    """on conflict condition"""
    on_conflict: meta_on_conflict
  ): meta_mutation_response

  """
  insert a single row into the table: "meta"
  """
  insert_meta_one(
    """the row to be inserted"""
    object: meta_insert_input!

    """on conflict condition"""
    on_conflict: meta_on_conflict
  ): meta

  """
  insert data into the table: "orphaned_reward"
  """
  insert_orphaned_reward(
    """the rows to be inserted"""
    objects: [orphaned_reward_insert_input!]!

    """on conflict condition"""
    on_conflict: orphaned_reward_on_conflict
  ): orphaned_reward_mutation_response

  """
  insert a single row into the table: "orphaned_reward"
  """
  insert_orphaned_reward_one(
    """the row to be inserted"""
    object: orphaned_reward_insert_input!

    """on conflict condition"""
    on_conflict: orphaned_reward_on_conflict
  ): orphaned_reward

  """
  insert data into the table: "param_proposal"
  """
  insert_param_proposal(
    """the rows to be inserted"""
    objects: [param_proposal_insert_input!]!

    """on conflict condition"""
    on_conflict: param_proposal_on_conflict
  ): param_proposal_mutation_response

  """
  insert a single row into the table: "param_proposal"
  """
  insert_param_proposal_one(
    """the row to be inserted"""
    object: param_proposal_insert_input!

    """on conflict condition"""
    on_conflict: param_proposal_on_conflict
  ): param_proposal

  """
  insert data into the table: "pool_hash"
  """
  insert_pool_hash(
    """the rows to be inserted"""
    objects: [pool_hash_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_hash_on_conflict
  ): pool_hash_mutation_response

  """
  insert a single row into the table: "pool_hash"
  """
  insert_pool_hash_one(
    """the row to be inserted"""
    object: pool_hash_insert_input!

    """on conflict condition"""
    on_conflict: pool_hash_on_conflict
  ): pool_hash

  """
  insert data into the table: "pool_metadata_ref"
  """
  insert_pool_metadata_ref(
    """the rows to be inserted"""
    objects: [pool_metadata_ref_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_metadata_ref_on_conflict
  ): pool_metadata_ref_mutation_response

  """
  insert a single row into the table: "pool_metadata_ref"
  """
  insert_pool_metadata_ref_one(
    """the row to be inserted"""
    object: pool_metadata_ref_insert_input!

    """on conflict condition"""
    on_conflict: pool_metadata_ref_on_conflict
  ): pool_metadata_ref

  """
  insert data into the table: "pool_offline_data"
  """
  insert_pool_offline_data(
    """the rows to be inserted"""
    objects: [pool_offline_data_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_offline_data_on_conflict
  ): pool_offline_data_mutation_response

  """
  insert a single row into the table: "pool_offline_data"
  """
  insert_pool_offline_data_one(
    """the row to be inserted"""
    object: pool_offline_data_insert_input!

    """on conflict condition"""
    on_conflict: pool_offline_data_on_conflict
  ): pool_offline_data

  """
  insert data into the table: "pool_offline_fetch_error"
  """
  insert_pool_offline_fetch_error(
    """the rows to be inserted"""
    objects: [pool_offline_fetch_error_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_offline_fetch_error_on_conflict
  ): pool_offline_fetch_error_mutation_response

  """
  insert a single row into the table: "pool_offline_fetch_error"
  """
  insert_pool_offline_fetch_error_one(
    """the row to be inserted"""
    object: pool_offline_fetch_error_insert_input!

    """on conflict condition"""
    on_conflict: pool_offline_fetch_error_on_conflict
  ): pool_offline_fetch_error

  """
  insert data into the table: "pool_owner"
  """
  insert_pool_owner(
    """the rows to be inserted"""
    objects: [pool_owner_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_owner_on_conflict
  ): pool_owner_mutation_response

  """
  insert a single row into the table: "pool_owner"
  """
  insert_pool_owner_one(
    """the row to be inserted"""
    object: pool_owner_insert_input!

    """on conflict condition"""
    on_conflict: pool_owner_on_conflict
  ): pool_owner

  """
  insert data into the table: "pool_relay"
  """
  insert_pool_relay(
    """the rows to be inserted"""
    objects: [pool_relay_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_relay_on_conflict
  ): pool_relay_mutation_response

  """
  insert a single row into the table: "pool_relay"
  """
  insert_pool_relay_one(
    """the row to be inserted"""
    object: pool_relay_insert_input!

    """on conflict condition"""
    on_conflict: pool_relay_on_conflict
  ): pool_relay

  """
  insert data into the table: "pool_retire"
  """
  insert_pool_retire(
    """the rows to be inserted"""
    objects: [pool_retire_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_retire_on_conflict
  ): pool_retire_mutation_response

  """
  insert a single row into the table: "pool_retire"
  """
  insert_pool_retire_one(
    """the row to be inserted"""
    object: pool_retire_insert_input!

    """on conflict condition"""
    on_conflict: pool_retire_on_conflict
  ): pool_retire

  """
  insert data into the table: "pool_update"
  """
  insert_pool_update(
    """the rows to be inserted"""
    objects: [pool_update_insert_input!]!

    """on conflict condition"""
    on_conflict: pool_update_on_conflict
  ): pool_update_mutation_response

  """
  insert a single row into the table: "pool_update"
  """
  insert_pool_update_one(
    """the row to be inserted"""
    object: pool_update_insert_input!

    """on conflict condition"""
    on_conflict: pool_update_on_conflict
  ): pool_update

  """
  insert data into the table: "pot_transfer"
  """
  insert_pot_transfer(
    """the rows to be inserted"""
    objects: [pot_transfer_insert_input!]!

    """on conflict condition"""
    on_conflict: pot_transfer_on_conflict
  ): pot_transfer_mutation_response

  """
  insert a single row into the table: "pot_transfer"
  """
  insert_pot_transfer_one(
    """the row to be inserted"""
    object: pot_transfer_insert_input!

    """on conflict condition"""
    on_conflict: pot_transfer_on_conflict
  ): pot_transfer

  """
  insert data into the table: "redeemer"
  """
  insert_redeemer(
    """the rows to be inserted"""
    objects: [redeemer_insert_input!]!

    """on conflict condition"""
    on_conflict: redeemer_on_conflict
  ): redeemer_mutation_response

  """
  insert a single row into the table: "redeemer"
  """
  insert_redeemer_one(
    """the row to be inserted"""
    object: redeemer_insert_input!

    """on conflict condition"""
    on_conflict: redeemer_on_conflict
  ): redeemer

  """
  insert data into the table: "reserve"
  """
  insert_reserve(
    """the rows to be inserted"""
    objects: [reserve_insert_input!]!

    """on conflict condition"""
    on_conflict: reserve_on_conflict
  ): reserve_mutation_response

  """
  insert a single row into the table: "reserve"
  """
  insert_reserve_one(
    """the row to be inserted"""
    object: reserve_insert_input!

    """on conflict condition"""
    on_conflict: reserve_on_conflict
  ): reserve

  """
  insert data into the table: "reserved_pool_ticker"
  """
  insert_reserved_pool_ticker(
    """the rows to be inserted"""
    objects: [reserved_pool_ticker_insert_input!]!

    """on conflict condition"""
    on_conflict: reserved_pool_ticker_on_conflict
  ): reserved_pool_ticker_mutation_response

  """
  insert a single row into the table: "reserved_pool_ticker"
  """
  insert_reserved_pool_ticker_one(
    """the row to be inserted"""
    object: reserved_pool_ticker_insert_input!

    """on conflict condition"""
    on_conflict: reserved_pool_ticker_on_conflict
  ): reserved_pool_ticker

  """
  insert data into the table: "reward"
  """
  insert_reward(
    """the rows to be inserted"""
    objects: [reward_insert_input!]!

    """on conflict condition"""
    on_conflict: reward_on_conflict
  ): reward_mutation_response

  """
  insert a single row into the table: "reward"
  """
  insert_reward_one(
    """the row to be inserted"""
    object: reward_insert_input!

    """on conflict condition"""
    on_conflict: reward_on_conflict
  ): reward

  """
  insert data into the table: "schema_version"
  """
  insert_schema_version(
    """the rows to be inserted"""
    objects: [schema_version_insert_input!]!

    """on conflict condition"""
    on_conflict: schema_version_on_conflict
  ): schema_version_mutation_response

  """
  insert a single row into the table: "schema_version"
  """
  insert_schema_version_one(
    """the row to be inserted"""
    object: schema_version_insert_input!

    """on conflict condition"""
    on_conflict: schema_version_on_conflict
  ): schema_version

  """
  insert data into the table: "script"
  """
  insert_script(
    """the rows to be inserted"""
    objects: [script_insert_input!]!

    """on conflict condition"""
    on_conflict: script_on_conflict
  ): script_mutation_response

  """
  insert a single row into the table: "script"
  """
  insert_script_one(
    """the row to be inserted"""
    object: script_insert_input!

    """on conflict condition"""
    on_conflict: script_on_conflict
  ): script

  """
  insert data into the table: "slot_leader"
  """
  insert_slot_leader(
    """the rows to be inserted"""
    objects: [slot_leader_insert_input!]!

    """on conflict condition"""
    on_conflict: slot_leader_on_conflict
  ): slot_leader_mutation_response

  """
  insert a single row into the table: "slot_leader"
  """
  insert_slot_leader_one(
    """the row to be inserted"""
    object: slot_leader_insert_input!

    """on conflict condition"""
    on_conflict: slot_leader_on_conflict
  ): slot_leader

  """
  insert data into the table: "stake_address"
  """
  insert_stake_address(
    """the rows to be inserted"""
    objects: [stake_address_insert_input!]!

    """on conflict condition"""
    on_conflict: stake_address_on_conflict
  ): stake_address_mutation_response

  """
  insert a single row into the table: "stake_address"
  """
  insert_stake_address_one(
    """the row to be inserted"""
    object: stake_address_insert_input!

    """on conflict condition"""
    on_conflict: stake_address_on_conflict
  ): stake_address

  """
  insert data into the table: "stake_deregistration"
  """
  insert_stake_deregistration(
    """the rows to be inserted"""
    objects: [stake_deregistration_insert_input!]!

    """on conflict condition"""
    on_conflict: stake_deregistration_on_conflict
  ): stake_deregistration_mutation_response

  """
  insert a single row into the table: "stake_deregistration"
  """
  insert_stake_deregistration_one(
    """the row to be inserted"""
    object: stake_deregistration_insert_input!

    """on conflict condition"""
    on_conflict: stake_deregistration_on_conflict
  ): stake_deregistration

  """
  insert data into the table: "stake_registration"
  """
  insert_stake_registration(
    """the rows to be inserted"""
    objects: [stake_registration_insert_input!]!

    """on conflict condition"""
    on_conflict: stake_registration_on_conflict
  ): stake_registration_mutation_response

  """
  insert a single row into the table: "stake_registration"
  """
  insert_stake_registration_one(
    """the row to be inserted"""
    object: stake_registration_insert_input!

    """on conflict condition"""
    on_conflict: stake_registration_on_conflict
  ): stake_registration

  """
  insert data into the table: "treasury"
  """
  insert_treasury(
    """the rows to be inserted"""
    objects: [treasury_insert_input!]!

    """on conflict condition"""
    on_conflict: treasury_on_conflict
  ): treasury_mutation_response

  """
  insert a single row into the table: "treasury"
  """
  insert_treasury_one(
    """the row to be inserted"""
    object: treasury_insert_input!

    """on conflict condition"""
    on_conflict: treasury_on_conflict
  ): treasury

  """
  insert data into the table: "tx"
  """
  insert_tx(
    """the rows to be inserted"""
    objects: [tx_insert_input!]!

    """on conflict condition"""
    on_conflict: tx_on_conflict
  ): tx_mutation_response

  """
  insert data into the table: "tx_in"
  """
  insert_tx_in(
    """the rows to be inserted"""
    objects: [tx_in_insert_input!]!

    """on conflict condition"""
    on_conflict: tx_in_on_conflict
  ): tx_in_mutation_response

  """
  insert a single row into the table: "tx_in"
  """
  insert_tx_in_one(
    """the row to be inserted"""
    object: tx_in_insert_input!

    """on conflict condition"""
    on_conflict: tx_in_on_conflict
  ): tx_in

  """
  insert data into the table: "tx_metadata"
  """
  insert_tx_metadata(
    """the rows to be inserted"""
    objects: [tx_metadata_insert_input!]!

    """on conflict condition"""
    on_conflict: tx_metadata_on_conflict
  ): tx_metadata_mutation_response

  """
  insert a single row into the table: "tx_metadata"
  """
  insert_tx_metadata_one(
    """the row to be inserted"""
    object: tx_metadata_insert_input!

    """on conflict condition"""
    on_conflict: tx_metadata_on_conflict
  ): tx_metadata

  """
  insert a single row into the table: "tx"
  """
  insert_tx_one(
    """the row to be inserted"""
    object: tx_insert_input!

    """on conflict condition"""
    on_conflict: tx_on_conflict
  ): tx

  """
  insert data into the table: "tx_out"
  """
  insert_tx_out(
    """the rows to be inserted"""
    objects: [tx_out_insert_input!]!

    """on conflict condition"""
    on_conflict: tx_out_on_conflict
  ): tx_out_mutation_response

  """
  insert a single row into the table: "tx_out"
  """
  insert_tx_out_one(
    """the row to be inserted"""
    object: tx_out_insert_input!

    """on conflict condition"""
    on_conflict: tx_out_on_conflict
  ): tx_out

  """
  insert data into the table: "withdrawal"
  """
  insert_withdrawal(
    """the rows to be inserted"""
    objects: [withdrawal_insert_input!]!

    """on conflict condition"""
    on_conflict: withdrawal_on_conflict
  ): withdrawal_mutation_response

  """
  insert a single row into the table: "withdrawal"
  """
  insert_withdrawal_one(
    """the row to be inserted"""
    object: withdrawal_insert_input!

    """on conflict condition"""
    on_conflict: withdrawal_on_conflict
  ): withdrawal

  """
  update data of the table: "Asset"
  """
  update_Asset(
    """increments the integer columns with given value of the filtered values"""
    _inc: Asset_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Asset_set_input

    """filter the rows which have to be updated"""
    where: Asset_bool_exp!
  ): Asset_mutation_response

  """
  update single row of the table: "Asset"
  """
  update_Asset_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: Asset_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Asset_set_input
    pk_columns: Asset_pk_columns_input!
  ): Asset

  """
  update data of the table: "ada_pots"
  """
  update_ada_pots(
    """increments the integer columns with given value of the filtered values"""
    _inc: ada_pots_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ada_pots_set_input

    """filter the rows which have to be updated"""
    where: ada_pots_bool_exp!
  ): ada_pots_mutation_response

  """
  update single row of the table: "ada_pots"
  """
  update_ada_pots_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: ada_pots_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ada_pots_set_input
    pk_columns: ada_pots_pk_columns_input!
  ): ada_pots

  """
  update data of the table: "admin_user"
  """
  update_admin_user(
    """increments the integer columns with given value of the filtered values"""
    _inc: admin_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: admin_user_set_input

    """filter the rows which have to be updated"""
    where: admin_user_bool_exp!
  ): admin_user_mutation_response

  """
  update single row of the table: "admin_user"
  """
  update_admin_user_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: admin_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: admin_user_set_input
    pk_columns: admin_user_pk_columns_input!
  ): admin_user

  """
  update data of the table: "block"
  """
  update_block(
    """increments the integer columns with given value of the filtered values"""
    _inc: block_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: block_set_input

    """filter the rows which have to be updated"""
    where: block_bool_exp!
  ): block_mutation_response

  """
  update single row of the table: "block"
  """
  update_block_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: block_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: block_set_input
    pk_columns: block_pk_columns_input!
  ): block

  """
  update data of the table: "collateral_tx_in"
  """
  update_collateral_tx_in(
    """increments the integer columns with given value of the filtered values"""
    _inc: collateral_tx_in_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: collateral_tx_in_set_input

    """filter the rows which have to be updated"""
    where: collateral_tx_in_bool_exp!
  ): collateral_tx_in_mutation_response

  """
  update single row of the table: "collateral_tx_in"
  """
  update_collateral_tx_in_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: collateral_tx_in_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: collateral_tx_in_set_input
    pk_columns: collateral_tx_in_pk_columns_input!
  ): collateral_tx_in

  """
  update data of the table: "delegation"
  """
  update_delegation(
    """increments the integer columns with given value of the filtered values"""
    _inc: delegation_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: delegation_set_input

    """filter the rows which have to be updated"""
    where: delegation_bool_exp!
  ): delegation_mutation_response

  """
  update single row of the table: "delegation"
  """
  update_delegation_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: delegation_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: delegation_set_input
    pk_columns: delegation_pk_columns_input!
  ): delegation

  """
  update data of the table: "epoch"
  """
  update_epoch(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_set_input

    """filter the rows which have to be updated"""
    where: epoch_bool_exp!
  ): epoch_mutation_response

  """
  update single row of the table: "epoch"
  """
  update_epoch_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_set_input
    pk_columns: epoch_pk_columns_input!
  ): epoch

  """
  update data of the table: "epoch_param"
  """
  update_epoch_param(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_param_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_param_set_input

    """filter the rows which have to be updated"""
    where: epoch_param_bool_exp!
  ): epoch_param_mutation_response

  """
  update single row of the table: "epoch_param"
  """
  update_epoch_param_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_param_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_param_set_input
    pk_columns: epoch_param_pk_columns_input!
  ): epoch_param

  """
  update data of the table: "epoch_reward_total_received"
  """
  update_epoch_reward_total_received(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_reward_total_received_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_reward_total_received_set_input

    """filter the rows which have to be updated"""
    where: epoch_reward_total_received_bool_exp!
  ): epoch_reward_total_received_mutation_response

  """
  update single row of the table: "epoch_reward_total_received"
  """
  update_epoch_reward_total_received_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_reward_total_received_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_reward_total_received_set_input
    pk_columns: epoch_reward_total_received_pk_columns_input!
  ): epoch_reward_total_received

  """
  update data of the table: "epoch_stake"
  """
  update_epoch_stake(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_stake_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_stake_set_input

    """filter the rows which have to be updated"""
    where: epoch_stake_bool_exp!
  ): epoch_stake_mutation_response

  """
  update single row of the table: "epoch_stake"
  """
  update_epoch_stake_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_stake_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_stake_set_input
    pk_columns: epoch_stake_pk_columns_input!
  ): epoch_stake

  """
  update data of the table: "epoch_sync_time"
  """
  update_epoch_sync_time(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_sync_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_sync_time_set_input

    """filter the rows which have to be updated"""
    where: epoch_sync_time_bool_exp!
  ): epoch_sync_time_mutation_response

  """
  update single row of the table: "epoch_sync_time"
  """
  update_epoch_sync_time_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: epoch_sync_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_sync_time_set_input
    pk_columns: epoch_sync_time_pk_columns_input!
  ): epoch_sync_time

  """
  update data of the table: "ma_tx_mint"
  """
  update_ma_tx_mint(
    """increments the integer columns with given value of the filtered values"""
    _inc: ma_tx_mint_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ma_tx_mint_set_input

    """filter the rows which have to be updated"""
    where: ma_tx_mint_bool_exp!
  ): ma_tx_mint_mutation_response

  """
  update single row of the table: "ma_tx_mint"
  """
  update_ma_tx_mint_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: ma_tx_mint_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ma_tx_mint_set_input
    pk_columns: ma_tx_mint_pk_columns_input!
  ): ma_tx_mint

  """
  update data of the table: "ma_tx_out"
  """
  update_ma_tx_out(
    """increments the integer columns with given value of the filtered values"""
    _inc: ma_tx_out_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ma_tx_out_set_input

    """filter the rows which have to be updated"""
    where: ma_tx_out_bool_exp!
  ): ma_tx_out_mutation_response

  """
  update single row of the table: "ma_tx_out"
  """
  update_ma_tx_out_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: ma_tx_out_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ma_tx_out_set_input
    pk_columns: ma_tx_out_pk_columns_input!
  ): ma_tx_out

  """
  update data of the table: "meta"
  """
  update_meta(
    """increments the integer columns with given value of the filtered values"""
    _inc: meta_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: meta_set_input

    """filter the rows which have to be updated"""
    where: meta_bool_exp!
  ): meta_mutation_response

  """
  update single row of the table: "meta"
  """
  update_meta_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: meta_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: meta_set_input
    pk_columns: meta_pk_columns_input!
  ): meta

  """
  update data of the table: "orphaned_reward"
  """
  update_orphaned_reward(
    """increments the integer columns with given value of the filtered values"""
    _inc: orphaned_reward_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orphaned_reward_set_input

    """filter the rows which have to be updated"""
    where: orphaned_reward_bool_exp!
  ): orphaned_reward_mutation_response

  """
  update single row of the table: "orphaned_reward"
  """
  update_orphaned_reward_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: orphaned_reward_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orphaned_reward_set_input
    pk_columns: orphaned_reward_pk_columns_input!
  ): orphaned_reward

  """
  update data of the table: "param_proposal"
  """
  update_param_proposal(
    """increments the integer columns with given value of the filtered values"""
    _inc: param_proposal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: param_proposal_set_input

    """filter the rows which have to be updated"""
    where: param_proposal_bool_exp!
  ): param_proposal_mutation_response

  """
  update single row of the table: "param_proposal"
  """
  update_param_proposal_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: param_proposal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: param_proposal_set_input
    pk_columns: param_proposal_pk_columns_input!
  ): param_proposal

  """
  update data of the table: "pool_hash"
  """
  update_pool_hash(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_hash_set_input

    """filter the rows which have to be updated"""
    where: pool_hash_bool_exp!
  ): pool_hash_mutation_response

  """
  update single row of the table: "pool_hash"
  """
  update_pool_hash_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_hash_set_input
    pk_columns: pool_hash_pk_columns_input!
  ): pool_hash

  """
  update data of the table: "pool_metadata_ref"
  """
  update_pool_metadata_ref(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_metadata_ref_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_metadata_ref_set_input

    """filter the rows which have to be updated"""
    where: pool_metadata_ref_bool_exp!
  ): pool_metadata_ref_mutation_response

  """
  update single row of the table: "pool_metadata_ref"
  """
  update_pool_metadata_ref_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_metadata_ref_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_metadata_ref_set_input
    pk_columns: pool_metadata_ref_pk_columns_input!
  ): pool_metadata_ref

  """
  update data of the table: "pool_offline_data"
  """
  update_pool_offline_data(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: pool_offline_data_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: pool_offline_data_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: pool_offline_data_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: pool_offline_data_delete_key_input

    """increments the integer columns with given value of the filtered values"""
    _inc: pool_offline_data_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: pool_offline_data_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_offline_data_set_input

    """filter the rows which have to be updated"""
    where: pool_offline_data_bool_exp!
  ): pool_offline_data_mutation_response

  """
  update single row of the table: "pool_offline_data"
  """
  update_pool_offline_data_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: pool_offline_data_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: pool_offline_data_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: pool_offline_data_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: pool_offline_data_delete_key_input

    """increments the integer columns with given value of the filtered values"""
    _inc: pool_offline_data_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: pool_offline_data_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_offline_data_set_input
    pk_columns: pool_offline_data_pk_columns_input!
  ): pool_offline_data

  """
  update data of the table: "pool_offline_fetch_error"
  """
  update_pool_offline_fetch_error(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_offline_fetch_error_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_offline_fetch_error_set_input

    """filter the rows which have to be updated"""
    where: pool_offline_fetch_error_bool_exp!
  ): pool_offline_fetch_error_mutation_response

  """
  update single row of the table: "pool_offline_fetch_error"
  """
  update_pool_offline_fetch_error_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_offline_fetch_error_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_offline_fetch_error_set_input
    pk_columns: pool_offline_fetch_error_pk_columns_input!
  ): pool_offline_fetch_error

  """
  update data of the table: "pool_owner"
  """
  update_pool_owner(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_owner_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_owner_set_input

    """filter the rows which have to be updated"""
    where: pool_owner_bool_exp!
  ): pool_owner_mutation_response

  """
  update single row of the table: "pool_owner"
  """
  update_pool_owner_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_owner_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_owner_set_input
    pk_columns: pool_owner_pk_columns_input!
  ): pool_owner

  """
  update data of the table: "pool_relay"
  """
  update_pool_relay(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_relay_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_relay_set_input

    """filter the rows which have to be updated"""
    where: pool_relay_bool_exp!
  ): pool_relay_mutation_response

  """
  update single row of the table: "pool_relay"
  """
  update_pool_relay_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_relay_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_relay_set_input
    pk_columns: pool_relay_pk_columns_input!
  ): pool_relay

  """
  update data of the table: "pool_retire"
  """
  update_pool_retire(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_retire_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_retire_set_input

    """filter the rows which have to be updated"""
    where: pool_retire_bool_exp!
  ): pool_retire_mutation_response

  """
  update single row of the table: "pool_retire"
  """
  update_pool_retire_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_retire_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_retire_set_input
    pk_columns: pool_retire_pk_columns_input!
  ): pool_retire

  """
  update data of the table: "pool_update"
  """
  update_pool_update(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_update_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_update_set_input

    """filter the rows which have to be updated"""
    where: pool_update_bool_exp!
  ): pool_update_mutation_response

  """
  update single row of the table: "pool_update"
  """
  update_pool_update_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pool_update_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_update_set_input
    pk_columns: pool_update_pk_columns_input!
  ): pool_update

  """
  update data of the table: "pot_transfer"
  """
  update_pot_transfer(
    """increments the integer columns with given value of the filtered values"""
    _inc: pot_transfer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pot_transfer_set_input

    """filter the rows which have to be updated"""
    where: pot_transfer_bool_exp!
  ): pot_transfer_mutation_response

  """
  update single row of the table: "pot_transfer"
  """
  update_pot_transfer_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pot_transfer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pot_transfer_set_input
    pk_columns: pot_transfer_pk_columns_input!
  ): pot_transfer

  """
  update data of the table: "redeemer"
  """
  update_redeemer(
    """increments the integer columns with given value of the filtered values"""
    _inc: redeemer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: redeemer_set_input

    """filter the rows which have to be updated"""
    where: redeemer_bool_exp!
  ): redeemer_mutation_response

  """
  update single row of the table: "redeemer"
  """
  update_redeemer_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: redeemer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: redeemer_set_input
    pk_columns: redeemer_pk_columns_input!
  ): redeemer

  """
  update data of the table: "reserve"
  """
  update_reserve(
    """increments the integer columns with given value of the filtered values"""
    _inc: reserve_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reserve_set_input

    """filter the rows which have to be updated"""
    where: reserve_bool_exp!
  ): reserve_mutation_response

  """
  update single row of the table: "reserve"
  """
  update_reserve_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: reserve_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reserve_set_input
    pk_columns: reserve_pk_columns_input!
  ): reserve

  """
  update data of the table: "reserved_pool_ticker"
  """
  update_reserved_pool_ticker(
    """increments the integer columns with given value of the filtered values"""
    _inc: reserved_pool_ticker_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reserved_pool_ticker_set_input

    """filter the rows which have to be updated"""
    where: reserved_pool_ticker_bool_exp!
  ): reserved_pool_ticker_mutation_response

  """
  update single row of the table: "reserved_pool_ticker"
  """
  update_reserved_pool_ticker_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: reserved_pool_ticker_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reserved_pool_ticker_set_input
    pk_columns: reserved_pool_ticker_pk_columns_input!
  ): reserved_pool_ticker

  """
  update data of the table: "reward"
  """
  update_reward(
    """increments the integer columns with given value of the filtered values"""
    _inc: reward_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reward_set_input

    """filter the rows which have to be updated"""
    where: reward_bool_exp!
  ): reward_mutation_response

  """
  update single row of the table: "reward"
  """
  update_reward_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: reward_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reward_set_input
    pk_columns: reward_pk_columns_input!
  ): reward

  """
  update data of the table: "schema_version"
  """
  update_schema_version(
    """increments the integer columns with given value of the filtered values"""
    _inc: schema_version_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: schema_version_set_input

    """filter the rows which have to be updated"""
    where: schema_version_bool_exp!
  ): schema_version_mutation_response

  """
  update single row of the table: "schema_version"
  """
  update_schema_version_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: schema_version_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: schema_version_set_input
    pk_columns: schema_version_pk_columns_input!
  ): schema_version

  """
  update data of the table: "script"
  """
  update_script(
    """increments the integer columns with given value of the filtered values"""
    _inc: script_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: script_set_input

    """filter the rows which have to be updated"""
    where: script_bool_exp!
  ): script_mutation_response

  """
  update single row of the table: "script"
  """
  update_script_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: script_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: script_set_input
    pk_columns: script_pk_columns_input!
  ): script

  """
  update data of the table: "slot_leader"
  """
  update_slot_leader(
    """increments the integer columns with given value of the filtered values"""
    _inc: slot_leader_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: slot_leader_set_input

    """filter the rows which have to be updated"""
    where: slot_leader_bool_exp!
  ): slot_leader_mutation_response

  """
  update single row of the table: "slot_leader"
  """
  update_slot_leader_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: slot_leader_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: slot_leader_set_input
    pk_columns: slot_leader_pk_columns_input!
  ): slot_leader

  """
  update data of the table: "stake_address"
  """
  update_stake_address(
    """increments the integer columns with given value of the filtered values"""
    _inc: stake_address_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_address_set_input

    """filter the rows which have to be updated"""
    where: stake_address_bool_exp!
  ): stake_address_mutation_response

  """
  update single row of the table: "stake_address"
  """
  update_stake_address_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: stake_address_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_address_set_input
    pk_columns: stake_address_pk_columns_input!
  ): stake_address

  """
  update data of the table: "stake_deregistration"
  """
  update_stake_deregistration(
    """increments the integer columns with given value of the filtered values"""
    _inc: stake_deregistration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_deregistration_set_input

    """filter the rows which have to be updated"""
    where: stake_deregistration_bool_exp!
  ): stake_deregistration_mutation_response

  """
  update single row of the table: "stake_deregistration"
  """
  update_stake_deregistration_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: stake_deregistration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_deregistration_set_input
    pk_columns: stake_deregistration_pk_columns_input!
  ): stake_deregistration

  """
  update data of the table: "stake_registration"
  """
  update_stake_registration(
    """increments the integer columns with given value of the filtered values"""
    _inc: stake_registration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_registration_set_input

    """filter the rows which have to be updated"""
    where: stake_registration_bool_exp!
  ): stake_registration_mutation_response

  """
  update single row of the table: "stake_registration"
  """
  update_stake_registration_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: stake_registration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_registration_set_input
    pk_columns: stake_registration_pk_columns_input!
  ): stake_registration

  """
  update data of the table: "treasury"
  """
  update_treasury(
    """increments the integer columns with given value of the filtered values"""
    _inc: treasury_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: treasury_set_input

    """filter the rows which have to be updated"""
    where: treasury_bool_exp!
  ): treasury_mutation_response

  """
  update single row of the table: "treasury"
  """
  update_treasury_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: treasury_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: treasury_set_input
    pk_columns: treasury_pk_columns_input!
  ): treasury

  """
  update data of the table: "tx"
  """
  update_tx(
    """increments the integer columns with given value of the filtered values"""
    _inc: tx_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_set_input

    """filter the rows which have to be updated"""
    where: tx_bool_exp!
  ): tx_mutation_response

  """
  update single row of the table: "tx"
  """
  update_tx_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: tx_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_set_input
    pk_columns: tx_pk_columns_input!
  ): tx

  """
  update data of the table: "tx_in"
  """
  update_tx_in(
    """increments the integer columns with given value of the filtered values"""
    _inc: tx_in_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_in_set_input

    """filter the rows which have to be updated"""
    where: tx_in_bool_exp!
  ): tx_in_mutation_response

  """
  update single row of the table: "tx_in"
  """
  update_tx_in_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: tx_in_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_in_set_input
    pk_columns: tx_in_pk_columns_input!
  ): tx_in

  """
  update data of the table: "tx_metadata"
  """
  update_tx_metadata(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: tx_metadata_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: tx_metadata_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: tx_metadata_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: tx_metadata_delete_key_input

    """increments the integer columns with given value of the filtered values"""
    _inc: tx_metadata_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: tx_metadata_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_metadata_set_input

    """filter the rows which have to be updated"""
    where: tx_metadata_bool_exp!
  ): tx_metadata_mutation_response

  """
  update single row of the table: "tx_metadata"
  """
  update_tx_metadata_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: tx_metadata_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: tx_metadata_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: tx_metadata_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: tx_metadata_delete_key_input

    """increments the integer columns with given value of the filtered values"""
    _inc: tx_metadata_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: tx_metadata_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_metadata_set_input
    pk_columns: tx_metadata_pk_columns_input!
  ): tx_metadata

  """
  update data of the table: "tx_out"
  """
  update_tx_out(
    """increments the integer columns with given value of the filtered values"""
    _inc: tx_out_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_out_set_input

    """filter the rows which have to be updated"""
    where: tx_out_bool_exp!
  ): tx_out_mutation_response

  """
  update single row of the table: "tx_out"
  """
  update_tx_out_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: tx_out_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_out_set_input
    pk_columns: tx_out_pk_columns_input!
  ): tx_out

  """
  update data of the table: "withdrawal"
  """
  update_withdrawal(
    """increments the integer columns with given value of the filtered values"""
    _inc: withdrawal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: withdrawal_set_input

    """filter the rows which have to be updated"""
    where: withdrawal_bool_exp!
  ): withdrawal_mutation_response

  """
  update single row of the table: "withdrawal"
  """
  update_withdrawal_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: withdrawal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: withdrawal_set_input
    pk_columns: withdrawal_pk_columns_input!
  ): withdrawal
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "orphaned_reward"
"""
type orphaned_reward {
  addr_id: bigint!
  amount: numeric!
  epoch_no: bigint!
  id: bigint!
  pool_id: bigint
  type: rewardtype!
}

"""
aggregated selection of "orphaned_reward"
"""
type orphaned_reward_aggregate {
  aggregate: orphaned_reward_aggregate_fields
  nodes: [orphaned_reward!]!
}

"""
aggregate fields of "orphaned_reward"
"""
type orphaned_reward_aggregate_fields {
  avg: orphaned_reward_avg_fields
  count(columns: [orphaned_reward_select_column!], distinct: Boolean): Int
  max: orphaned_reward_max_fields
  min: orphaned_reward_min_fields
  stddev: orphaned_reward_stddev_fields
  stddev_pop: orphaned_reward_stddev_pop_fields
  stddev_samp: orphaned_reward_stddev_samp_fields
  sum: orphaned_reward_sum_fields
  var_pop: orphaned_reward_var_pop_fields
  var_samp: orphaned_reward_var_samp_fields
  variance: orphaned_reward_variance_fields
}

"""
order by aggregate values of table "orphaned_reward"
"""
input orphaned_reward_aggregate_order_by {
  avg: orphaned_reward_avg_order_by
  count: order_by
  max: orphaned_reward_max_order_by
  min: orphaned_reward_min_order_by
  stddev: orphaned_reward_stddev_order_by
  stddev_pop: orphaned_reward_stddev_pop_order_by
  stddev_samp: orphaned_reward_stddev_samp_order_by
  sum: orphaned_reward_sum_order_by
  var_pop: orphaned_reward_var_pop_order_by
  var_samp: orphaned_reward_var_samp_order_by
  variance: orphaned_reward_variance_order_by
}

"""
input type for inserting array relation for remote table "orphaned_reward"
"""
input orphaned_reward_arr_rel_insert_input {
  data: [orphaned_reward_insert_input!]!
  on_conflict: orphaned_reward_on_conflict
}

"""aggregate avg on columns"""
type orphaned_reward_avg_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by avg() on columns of table "orphaned_reward"
"""
input orphaned_reward_avg_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
Boolean expression to filter rows from the table "orphaned_reward". All fields are combined with a logical 'AND'.
"""
input orphaned_reward_bool_exp {
  _and: [orphaned_reward_bool_exp]
  _not: orphaned_reward_bool_exp
  _or: [orphaned_reward_bool_exp]
  addr_id: bigint_comparison_exp
  amount: numeric_comparison_exp
  epoch_no: bigint_comparison_exp
  id: bigint_comparison_exp
  pool_id: bigint_comparison_exp
  type: rewardtype_comparison_exp
}

"""
unique or primary key constraints on table "orphaned_reward"
"""
enum orphaned_reward_constraint {
  """unique or primary key constraint"""
  orphaned_reward_pkey

  """unique or primary key constraint"""
  unique_orphaned
}

"""
input type for incrementing integer column in table "orphaned_reward"
"""
input orphaned_reward_inc_input {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
input type for inserting data into table "orphaned_reward"
"""
input orphaned_reward_insert_input {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
  type: rewardtype
}

"""aggregate max on columns"""
type orphaned_reward_max_fields {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
order by max() on columns of table "orphaned_reward"
"""
input orphaned_reward_max_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate min on columns"""
type orphaned_reward_min_fields {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
order by min() on columns of table "orphaned_reward"
"""
input orphaned_reward_min_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
response of any mutation on the table "orphaned_reward"
"""
type orphaned_reward_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [orphaned_reward!]!
}

"""
input type for inserting object relation for remote table "orphaned_reward"
"""
input orphaned_reward_obj_rel_insert_input {
  data: orphaned_reward_insert_input!
  on_conflict: orphaned_reward_on_conflict
}

"""
on conflict condition type for table "orphaned_reward"
"""
input orphaned_reward_on_conflict {
  constraint: orphaned_reward_constraint!
  update_columns: [orphaned_reward_update_column!]!
  where: orphaned_reward_bool_exp
}

"""
ordering options when selecting data from "orphaned_reward"
"""
input orphaned_reward_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
  type: order_by
}

"""
primary key columns input for table: "orphaned_reward"
"""
input orphaned_reward_pk_columns_input {
  id: bigint!
}

"""
select columns of table "orphaned_reward"
"""
enum orphaned_reward_select_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  pool_id

  """column name"""
  type
}

"""
input type for updating data in table "orphaned_reward"
"""
input orphaned_reward_set_input {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
  type: rewardtype
}

"""aggregate stddev on columns"""
type orphaned_reward_stddev_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by stddev() on columns of table "orphaned_reward"
"""
input orphaned_reward_stddev_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate stddev_pop on columns"""
type orphaned_reward_stddev_pop_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by stddev_pop() on columns of table "orphaned_reward"
"""
input orphaned_reward_stddev_pop_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate stddev_samp on columns"""
type orphaned_reward_stddev_samp_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by stddev_samp() on columns of table "orphaned_reward"
"""
input orphaned_reward_stddev_samp_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate sum on columns"""
type orphaned_reward_sum_fields {
  addr_id: bigint
  amount: numeric
  epoch_no: bigint
  id: bigint
  pool_id: bigint
}

"""
order by sum() on columns of table "orphaned_reward"
"""
input orphaned_reward_sum_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
update columns of table "orphaned_reward"
"""
enum orphaned_reward_update_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  pool_id

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type orphaned_reward_var_pop_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by var_pop() on columns of table "orphaned_reward"
"""
input orphaned_reward_var_pop_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate var_samp on columns"""
type orphaned_reward_var_samp_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by var_samp() on columns of table "orphaned_reward"
"""
input orphaned_reward_var_samp_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""aggregate variance on columns"""
type orphaned_reward_variance_fields {
  addr_id: Float
  amount: Float
  epoch_no: Float
  id: Float
  pool_id: Float
}

"""
order by variance() on columns of table "orphaned_reward"
"""
input orphaned_reward_variance_order_by {
  addr_id: order_by
  amount: order_by
  epoch_no: order_by
  id: order_by
  pool_id: order_by
}

"""
columns and relationships of "param_proposal"
"""
type param_proposal {
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  entropy: bytea
  epoch_no: Int!
  id: bigint!
  influence: float8
  key: bytea!
  key_deposit: numeric
  max_bh_size: numeric
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: numeric
  max_collateral_inputs: Int
  max_epoch: numeric
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: numeric
  max_val_size: numeric
  min_fee_a: numeric
  min_fee_b: numeric
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: numeric
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  registered_tx_id: bigint!
  treasury_growth_rate: float8
}

"""
aggregated selection of "param_proposal"
"""
type param_proposal_aggregate {
  aggregate: param_proposal_aggregate_fields
  nodes: [param_proposal!]!
}

"""
aggregate fields of "param_proposal"
"""
type param_proposal_aggregate_fields {
  avg: param_proposal_avg_fields
  count(columns: [param_proposal_select_column!], distinct: Boolean): Int
  max: param_proposal_max_fields
  min: param_proposal_min_fields
  stddev: param_proposal_stddev_fields
  stddev_pop: param_proposal_stddev_pop_fields
  stddev_samp: param_proposal_stddev_samp_fields
  sum: param_proposal_sum_fields
  var_pop: param_proposal_var_pop_fields
  var_samp: param_proposal_var_samp_fields
  variance: param_proposal_variance_fields
}

"""
order by aggregate values of table "param_proposal"
"""
input param_proposal_aggregate_order_by {
  avg: param_proposal_avg_order_by
  count: order_by
  max: param_proposal_max_order_by
  min: param_proposal_min_order_by
  stddev: param_proposal_stddev_order_by
  stddev_pop: param_proposal_stddev_pop_order_by
  stddev_samp: param_proposal_stddev_samp_order_by
  sum: param_proposal_sum_order_by
  var_pop: param_proposal_var_pop_order_by
  var_samp: param_proposal_var_samp_order_by
  variance: param_proposal_variance_order_by
}

"""
input type for inserting array relation for remote table "param_proposal"
"""
input param_proposal_arr_rel_insert_input {
  data: [param_proposal_insert_input!]!
  on_conflict: param_proposal_on_conflict
}

"""aggregate avg on columns"""
type param_proposal_avg_fields {
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  registered_tx_id: Float
  treasury_growth_rate: Float
}

"""
order by avg() on columns of table "param_proposal"
"""
input param_proposal_avg_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""
Boolean expression to filter rows from the table "param_proposal". All fields are combined with a logical 'AND'.
"""
input param_proposal_bool_exp {
  _and: [param_proposal_bool_exp]
  _not: param_proposal_bool_exp
  _or: [param_proposal_bool_exp]
  coins_per_utxo_word: numeric_comparison_exp
  collateral_percent: Int_comparison_exp
  cost_models: String_comparison_exp
  decentralisation: float8_comparison_exp
  entropy: bytea_comparison_exp
  epoch_no: Int_comparison_exp
  id: bigint_comparison_exp
  influence: float8_comparison_exp
  key: bytea_comparison_exp
  key_deposit: numeric_comparison_exp
  max_bh_size: numeric_comparison_exp
  max_block_ex_mem: numeric_comparison_exp
  max_block_ex_steps: numeric_comparison_exp
  max_block_size: numeric_comparison_exp
  max_collateral_inputs: Int_comparison_exp
  max_epoch: numeric_comparison_exp
  max_tx_ex_mem: numeric_comparison_exp
  max_tx_ex_steps: numeric_comparison_exp
  max_tx_size: numeric_comparison_exp
  max_val_size: numeric_comparison_exp
  min_fee_a: numeric_comparison_exp
  min_fee_b: numeric_comparison_exp
  min_pool_cost: numeric_comparison_exp
  min_utxo_value: numeric_comparison_exp
  monetary_expand_rate: float8_comparison_exp
  optimal_pool_count: numeric_comparison_exp
  pool_deposit: numeric_comparison_exp
  price_mem: float8_comparison_exp
  price_step: float8_comparison_exp
  protocol_major: Int_comparison_exp
  protocol_minor: Int_comparison_exp
  registered_tx_id: bigint_comparison_exp
  treasury_growth_rate: float8_comparison_exp
}

"""
unique or primary key constraints on table "param_proposal"
"""
enum param_proposal_constraint {
  """unique or primary key constraint"""
  param_proposal_pkey

  """unique or primary key constraint"""
  unique_param_proposal
}

"""
input type for incrementing integer column in table "param_proposal"
"""
input param_proposal_inc_input {
  coins_per_utxo_word: numeric
  collateral_percent: Int
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: numeric
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: numeric
  max_collateral_inputs: Int
  max_epoch: numeric
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: numeric
  max_val_size: numeric
  min_fee_a: numeric
  min_fee_b: numeric
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: numeric
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  registered_tx_id: bigint
  treasury_growth_rate: float8
}

"""
input type for inserting data into table "param_proposal"
"""
input param_proposal_insert_input {
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  entropy: bytea
  epoch_no: Int
  id: bigint
  influence: float8
  key: bytea
  key_deposit: numeric
  max_bh_size: numeric
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: numeric
  max_collateral_inputs: Int
  max_epoch: numeric
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: numeric
  max_val_size: numeric
  min_fee_a: numeric
  min_fee_b: numeric
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: numeric
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  registered_tx_id: bigint
  treasury_growth_rate: float8
}

"""aggregate max on columns"""
type param_proposal_max_fields {
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: numeric
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: numeric
  max_collateral_inputs: Int
  max_epoch: numeric
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: numeric
  max_val_size: numeric
  min_fee_a: numeric
  min_fee_b: numeric
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: numeric
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  registered_tx_id: bigint
  treasury_growth_rate: float8
}

"""
order by max() on columns of table "param_proposal"
"""
input param_proposal_max_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  cost_models: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""aggregate min on columns"""
type param_proposal_min_fields {
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: numeric
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: numeric
  max_collateral_inputs: Int
  max_epoch: numeric
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: numeric
  max_val_size: numeric
  min_fee_a: numeric
  min_fee_b: numeric
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: numeric
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  registered_tx_id: bigint
  treasury_growth_rate: float8
}

"""
order by min() on columns of table "param_proposal"
"""
input param_proposal_min_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  cost_models: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""
response of any mutation on the table "param_proposal"
"""
type param_proposal_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [param_proposal!]!
}

"""
input type for inserting object relation for remote table "param_proposal"
"""
input param_proposal_obj_rel_insert_input {
  data: param_proposal_insert_input!
  on_conflict: param_proposal_on_conflict
}

"""
on conflict condition type for table "param_proposal"
"""
input param_proposal_on_conflict {
  constraint: param_proposal_constraint!
  update_columns: [param_proposal_update_column!]!
  where: param_proposal_bool_exp
}

"""
ordering options when selecting data from "param_proposal"
"""
input param_proposal_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  cost_models: order_by
  decentralisation: order_by
  entropy: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""
primary key columns input for table: "param_proposal"
"""
input param_proposal_pk_columns_input {
  id: bigint!
}

"""
select columns of table "param_proposal"
"""
enum param_proposal_select_column {
  """column name"""
  coins_per_utxo_word

  """column name"""
  collateral_percent

  """column name"""
  cost_models

  """column name"""
  decentralisation

  """column name"""
  entropy

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  influence

  """column name"""
  key

  """column name"""
  key_deposit

  """column name"""
  max_bh_size

  """column name"""
  max_block_ex_mem

  """column name"""
  max_block_ex_steps

  """column name"""
  max_block_size

  """column name"""
  max_collateral_inputs

  """column name"""
  max_epoch

  """column name"""
  max_tx_ex_mem

  """column name"""
  max_tx_ex_steps

  """column name"""
  max_tx_size

  """column name"""
  max_val_size

  """column name"""
  min_fee_a

  """column name"""
  min_fee_b

  """column name"""
  min_pool_cost

  """column name"""
  min_utxo_value

  """column name"""
  monetary_expand_rate

  """column name"""
  optimal_pool_count

  """column name"""
  pool_deposit

  """column name"""
  price_mem

  """column name"""
  price_step

  """column name"""
  protocol_major

  """column name"""
  protocol_minor

  """column name"""
  registered_tx_id

  """column name"""
  treasury_growth_rate
}

"""
input type for updating data in table "param_proposal"
"""
input param_proposal_set_input {
  coins_per_utxo_word: numeric
  collateral_percent: Int
  cost_models: String
  decentralisation: float8
  entropy: bytea
  epoch_no: Int
  id: bigint
  influence: float8
  key: bytea
  key_deposit: numeric
  max_bh_size: numeric
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: numeric
  max_collateral_inputs: Int
  max_epoch: numeric
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: numeric
  max_val_size: numeric
  min_fee_a: numeric
  min_fee_b: numeric
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: numeric
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  registered_tx_id: bigint
  treasury_growth_rate: float8
}

"""aggregate stddev on columns"""
type param_proposal_stddev_fields {
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  registered_tx_id: Float
  treasury_growth_rate: Float
}

"""
order by stddev() on columns of table "param_proposal"
"""
input param_proposal_stddev_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""aggregate stddev_pop on columns"""
type param_proposal_stddev_pop_fields {
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  registered_tx_id: Float
  treasury_growth_rate: Float
}

"""
order by stddev_pop() on columns of table "param_proposal"
"""
input param_proposal_stddev_pop_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""aggregate stddev_samp on columns"""
type param_proposal_stddev_samp_fields {
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  registered_tx_id: Float
  treasury_growth_rate: Float
}

"""
order by stddev_samp() on columns of table "param_proposal"
"""
input param_proposal_stddev_samp_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""aggregate sum on columns"""
type param_proposal_sum_fields {
  coins_per_utxo_word: numeric
  collateral_percent: Int
  decentralisation: float8
  epoch_no: Int
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: numeric
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: numeric
  max_collateral_inputs: Int
  max_epoch: numeric
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: numeric
  max_val_size: numeric
  min_fee_a: numeric
  min_fee_b: numeric
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: numeric
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  registered_tx_id: bigint
  treasury_growth_rate: float8
}

"""
order by sum() on columns of table "param_proposal"
"""
input param_proposal_sum_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""
update columns of table "param_proposal"
"""
enum param_proposal_update_column {
  """column name"""
  coins_per_utxo_word

  """column name"""
  collateral_percent

  """column name"""
  cost_models

  """column name"""
  decentralisation

  """column name"""
  entropy

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  influence

  """column name"""
  key

  """column name"""
  key_deposit

  """column name"""
  max_bh_size

  """column name"""
  max_block_ex_mem

  """column name"""
  max_block_ex_steps

  """column name"""
  max_block_size

  """column name"""
  max_collateral_inputs

  """column name"""
  max_epoch

  """column name"""
  max_tx_ex_mem

  """column name"""
  max_tx_ex_steps

  """column name"""
  max_tx_size

  """column name"""
  max_val_size

  """column name"""
  min_fee_a

  """column name"""
  min_fee_b

  """column name"""
  min_pool_cost

  """column name"""
  min_utxo_value

  """column name"""
  monetary_expand_rate

  """column name"""
  optimal_pool_count

  """column name"""
  pool_deposit

  """column name"""
  price_mem

  """column name"""
  price_step

  """column name"""
  protocol_major

  """column name"""
  protocol_minor

  """column name"""
  registered_tx_id

  """column name"""
  treasury_growth_rate
}

"""aggregate var_pop on columns"""
type param_proposal_var_pop_fields {
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  registered_tx_id: Float
  treasury_growth_rate: Float
}

"""
order by var_pop() on columns of table "param_proposal"
"""
input param_proposal_var_pop_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""aggregate var_samp on columns"""
type param_proposal_var_samp_fields {
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  registered_tx_id: Float
  treasury_growth_rate: Float
}

"""
order by var_samp() on columns of table "param_proposal"
"""
input param_proposal_var_samp_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""aggregate variance on columns"""
type param_proposal_variance_fields {
  coins_per_utxo_word: Float
  collateral_percent: Float
  decentralisation: Float
  epoch_no: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  registered_tx_id: Float
  treasury_growth_rate: Float
}

"""
order by variance() on columns of table "param_proposal"
"""
input param_proposal_variance_order_by {
  coins_per_utxo_word: order_by
  collateral_percent: order_by
  decentralisation: order_by
  epoch_no: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  registered_tx_id: order_by
  treasury_growth_rate: order_by
}

"""
columns and relationships of "pool_hash"
"""
type pool_hash {
  hash_raw: bytea!
  id: bigint!
  view: String!
}

"""
aggregated selection of "pool_hash"
"""
type pool_hash_aggregate {
  aggregate: pool_hash_aggregate_fields
  nodes: [pool_hash!]!
}

"""
aggregate fields of "pool_hash"
"""
type pool_hash_aggregate_fields {
  avg: pool_hash_avg_fields
  count(columns: [pool_hash_select_column!], distinct: Boolean): Int
  max: pool_hash_max_fields
  min: pool_hash_min_fields
  stddev: pool_hash_stddev_fields
  stddev_pop: pool_hash_stddev_pop_fields
  stddev_samp: pool_hash_stddev_samp_fields
  sum: pool_hash_sum_fields
  var_pop: pool_hash_var_pop_fields
  var_samp: pool_hash_var_samp_fields
  variance: pool_hash_variance_fields
}

"""
order by aggregate values of table "pool_hash"
"""
input pool_hash_aggregate_order_by {
  avg: pool_hash_avg_order_by
  count: order_by
  max: pool_hash_max_order_by
  min: pool_hash_min_order_by
  stddev: pool_hash_stddev_order_by
  stddev_pop: pool_hash_stddev_pop_order_by
  stddev_samp: pool_hash_stddev_samp_order_by
  sum: pool_hash_sum_order_by
  var_pop: pool_hash_var_pop_order_by
  var_samp: pool_hash_var_samp_order_by
  variance: pool_hash_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_hash"
"""
input pool_hash_arr_rel_insert_input {
  data: [pool_hash_insert_input!]!
  on_conflict: pool_hash_on_conflict
}

"""aggregate avg on columns"""
type pool_hash_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "pool_hash"
"""
input pool_hash_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "pool_hash". All fields are combined with a logical 'AND'.
"""
input pool_hash_bool_exp {
  _and: [pool_hash_bool_exp]
  _not: pool_hash_bool_exp
  _or: [pool_hash_bool_exp]
  hash_raw: bytea_comparison_exp
  id: bigint_comparison_exp
  view: String_comparison_exp
}

"""
unique or primary key constraints on table "pool_hash"
"""
enum pool_hash_constraint {
  """unique or primary key constraint"""
  pool_hash_pkey

  """unique or primary key constraint"""
  unique_pool_hash
}

"""
input type for incrementing integer column in table "pool_hash"
"""
input pool_hash_inc_input {
  id: bigint
}

"""
input type for inserting data into table "pool_hash"
"""
input pool_hash_insert_input {
  hash_raw: bytea
  id: bigint
  view: String
}

"""aggregate max on columns"""
type pool_hash_max_fields {
  id: bigint
  view: String
}

"""
order by max() on columns of table "pool_hash"
"""
input pool_hash_max_order_by {
  id: order_by
  view: order_by
}

"""aggregate min on columns"""
type pool_hash_min_fields {
  id: bigint
  view: String
}

"""
order by min() on columns of table "pool_hash"
"""
input pool_hash_min_order_by {
  id: order_by
  view: order_by
}

"""
response of any mutation on the table "pool_hash"
"""
type pool_hash_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_hash!]!
}

"""
input type for inserting object relation for remote table "pool_hash"
"""
input pool_hash_obj_rel_insert_input {
  data: pool_hash_insert_input!
  on_conflict: pool_hash_on_conflict
}

"""
on conflict condition type for table "pool_hash"
"""
input pool_hash_on_conflict {
  constraint: pool_hash_constraint!
  update_columns: [pool_hash_update_column!]!
  where: pool_hash_bool_exp
}

"""
ordering options when selecting data from "pool_hash"
"""
input pool_hash_order_by {
  hash_raw: order_by
  id: order_by
  view: order_by
}

"""
primary key columns input for table: "pool_hash"
"""
input pool_hash_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_hash"
"""
enum pool_hash_select_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  view
}

"""
input type for updating data in table "pool_hash"
"""
input pool_hash_set_input {
  hash_raw: bytea
  id: bigint
  view: String
}

"""aggregate stddev on columns"""
type pool_hash_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "pool_hash"
"""
input pool_hash_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type pool_hash_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "pool_hash"
"""
input pool_hash_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type pool_hash_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "pool_hash"
"""
input pool_hash_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type pool_hash_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "pool_hash"
"""
input pool_hash_sum_order_by {
  id: order_by
}

"""
update columns of table "pool_hash"
"""
enum pool_hash_update_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  view
}

"""aggregate var_pop on columns"""
type pool_hash_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "pool_hash"
"""
input pool_hash_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type pool_hash_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "pool_hash"
"""
input pool_hash_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type pool_hash_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "pool_hash"
"""
input pool_hash_variance_order_by {
  id: order_by
}

"""
columns and relationships of "pool_metadata_ref"
"""
type pool_metadata_ref {
  hash: bytea!
  id: bigint!
  pool_id: bigint!
  registered_tx_id: bigint!
  url: String!
}

"""
aggregated selection of "pool_metadata_ref"
"""
type pool_metadata_ref_aggregate {
  aggregate: pool_metadata_ref_aggregate_fields
  nodes: [pool_metadata_ref!]!
}

"""
aggregate fields of "pool_metadata_ref"
"""
type pool_metadata_ref_aggregate_fields {
  avg: pool_metadata_ref_avg_fields
  count(columns: [pool_metadata_ref_select_column!], distinct: Boolean): Int
  max: pool_metadata_ref_max_fields
  min: pool_metadata_ref_min_fields
  stddev: pool_metadata_ref_stddev_fields
  stddev_pop: pool_metadata_ref_stddev_pop_fields
  stddev_samp: pool_metadata_ref_stddev_samp_fields
  sum: pool_metadata_ref_sum_fields
  var_pop: pool_metadata_ref_var_pop_fields
  var_samp: pool_metadata_ref_var_samp_fields
  variance: pool_metadata_ref_variance_fields
}

"""
order by aggregate values of table "pool_metadata_ref"
"""
input pool_metadata_ref_aggregate_order_by {
  avg: pool_metadata_ref_avg_order_by
  count: order_by
  max: pool_metadata_ref_max_order_by
  min: pool_metadata_ref_min_order_by
  stddev: pool_metadata_ref_stddev_order_by
  stddev_pop: pool_metadata_ref_stddev_pop_order_by
  stddev_samp: pool_metadata_ref_stddev_samp_order_by
  sum: pool_metadata_ref_sum_order_by
  var_pop: pool_metadata_ref_var_pop_order_by
  var_samp: pool_metadata_ref_var_samp_order_by
  variance: pool_metadata_ref_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_metadata_ref"
"""
input pool_metadata_ref_arr_rel_insert_input {
  data: [pool_metadata_ref_insert_input!]!
  on_conflict: pool_metadata_ref_on_conflict
}

"""aggregate avg on columns"""
type pool_metadata_ref_avg_fields {
  id: Float
  pool_id: Float
  registered_tx_id: Float
}

"""
order by avg() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_avg_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""
Boolean expression to filter rows from the table "pool_metadata_ref". All fields are combined with a logical 'AND'.
"""
input pool_metadata_ref_bool_exp {
  _and: [pool_metadata_ref_bool_exp]
  _not: pool_metadata_ref_bool_exp
  _or: [pool_metadata_ref_bool_exp]
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  pool_id: bigint_comparison_exp
  registered_tx_id: bigint_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "pool_metadata_ref"
"""
enum pool_metadata_ref_constraint {
  """unique or primary key constraint"""
  pool_metadata_ref_pkey

  """unique or primary key constraint"""
  unique_pool_metadata_ref
}

"""
input type for incrementing integer column in table "pool_metadata_ref"
"""
input pool_metadata_ref_inc_input {
  id: bigint
  pool_id: bigint
  registered_tx_id: bigint
}

"""
input type for inserting data into table "pool_metadata_ref"
"""
input pool_metadata_ref_insert_input {
  hash: bytea
  id: bigint
  pool_id: bigint
  registered_tx_id: bigint
  url: String
}

"""aggregate max on columns"""
type pool_metadata_ref_max_fields {
  id: bigint
  pool_id: bigint
  registered_tx_id: bigint
  url: String
}

"""
order by max() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_max_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
  url: order_by
}

"""aggregate min on columns"""
type pool_metadata_ref_min_fields {
  id: bigint
  pool_id: bigint
  registered_tx_id: bigint
  url: String
}

"""
order by min() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_min_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
  url: order_by
}

"""
response of any mutation on the table "pool_metadata_ref"
"""
type pool_metadata_ref_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_metadata_ref!]!
}

"""
input type for inserting object relation for remote table "pool_metadata_ref"
"""
input pool_metadata_ref_obj_rel_insert_input {
  data: pool_metadata_ref_insert_input!
  on_conflict: pool_metadata_ref_on_conflict
}

"""
on conflict condition type for table "pool_metadata_ref"
"""
input pool_metadata_ref_on_conflict {
  constraint: pool_metadata_ref_constraint!
  update_columns: [pool_metadata_ref_update_column!]!
  where: pool_metadata_ref_bool_exp
}

"""
ordering options when selecting data from "pool_metadata_ref"
"""
input pool_metadata_ref_order_by {
  hash: order_by
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
  url: order_by
}

"""
primary key columns input for table: "pool_metadata_ref"
"""
input pool_metadata_ref_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_metadata_ref"
"""
enum pool_metadata_ref_select_column {
  """column name"""
  hash

  """column name"""
  id

  """column name"""
  pool_id

  """column name"""
  registered_tx_id

  """column name"""
  url
}

"""
input type for updating data in table "pool_metadata_ref"
"""
input pool_metadata_ref_set_input {
  hash: bytea
  id: bigint
  pool_id: bigint
  registered_tx_id: bigint
  url: String
}

"""aggregate stddev on columns"""
type pool_metadata_ref_stddev_fields {
  id: Float
  pool_id: Float
  registered_tx_id: Float
}

"""
order by stddev() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_stddev_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type pool_metadata_ref_stddev_pop_fields {
  id: Float
  pool_id: Float
  registered_tx_id: Float
}

"""
order by stddev_pop() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_stddev_pop_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type pool_metadata_ref_stddev_samp_fields {
  id: Float
  pool_id: Float
  registered_tx_id: Float
}

"""
order by stddev_samp() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_stddev_samp_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""aggregate sum on columns"""
type pool_metadata_ref_sum_fields {
  id: bigint
  pool_id: bigint
  registered_tx_id: bigint
}

"""
order by sum() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_sum_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""
update columns of table "pool_metadata_ref"
"""
enum pool_metadata_ref_update_column {
  """column name"""
  hash

  """column name"""
  id

  """column name"""
  pool_id

  """column name"""
  registered_tx_id

  """column name"""
  url
}

"""aggregate var_pop on columns"""
type pool_metadata_ref_var_pop_fields {
  id: Float
  pool_id: Float
  registered_tx_id: Float
}

"""
order by var_pop() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_var_pop_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""aggregate var_samp on columns"""
type pool_metadata_ref_var_samp_fields {
  id: Float
  pool_id: Float
  registered_tx_id: Float
}

"""
order by var_samp() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_var_samp_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""aggregate variance on columns"""
type pool_metadata_ref_variance_fields {
  id: Float
  pool_id: Float
  registered_tx_id: Float
}

"""
order by variance() on columns of table "pool_metadata_ref"
"""
input pool_metadata_ref_variance_order_by {
  id: order_by
  pool_id: order_by
  registered_tx_id: order_by
}

"""
columns and relationships of "pool_offline_data"
"""
type pool_offline_data {
  bytes: bytea!
  hash: bytea!
  id: bigint!
  json(
    """JSON select path"""
    path: String
  ): jsonb!
  pmr_id: bigint!
  pool_id: bigint!
  ticker_name: String!
}

"""
aggregated selection of "pool_offline_data"
"""
type pool_offline_data_aggregate {
  aggregate: pool_offline_data_aggregate_fields
  nodes: [pool_offline_data!]!
}

"""
aggregate fields of "pool_offline_data"
"""
type pool_offline_data_aggregate_fields {
  avg: pool_offline_data_avg_fields
  count(columns: [pool_offline_data_select_column!], distinct: Boolean): Int
  max: pool_offline_data_max_fields
  min: pool_offline_data_min_fields
  stddev: pool_offline_data_stddev_fields
  stddev_pop: pool_offline_data_stddev_pop_fields
  stddev_samp: pool_offline_data_stddev_samp_fields
  sum: pool_offline_data_sum_fields
  var_pop: pool_offline_data_var_pop_fields
  var_samp: pool_offline_data_var_samp_fields
  variance: pool_offline_data_variance_fields
}

"""
order by aggregate values of table "pool_offline_data"
"""
input pool_offline_data_aggregate_order_by {
  avg: pool_offline_data_avg_order_by
  count: order_by
  max: pool_offline_data_max_order_by
  min: pool_offline_data_min_order_by
  stddev: pool_offline_data_stddev_order_by
  stddev_pop: pool_offline_data_stddev_pop_order_by
  stddev_samp: pool_offline_data_stddev_samp_order_by
  sum: pool_offline_data_sum_order_by
  var_pop: pool_offline_data_var_pop_order_by
  var_samp: pool_offline_data_var_samp_order_by
  variance: pool_offline_data_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input pool_offline_data_append_input {
  json: jsonb
}

"""
input type for inserting array relation for remote table "pool_offline_data"
"""
input pool_offline_data_arr_rel_insert_input {
  data: [pool_offline_data_insert_input!]!
  on_conflict: pool_offline_data_on_conflict
}

"""aggregate avg on columns"""
type pool_offline_data_avg_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
}

"""
order by avg() on columns of table "pool_offline_data"
"""
input pool_offline_data_avg_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""
Boolean expression to filter rows from the table "pool_offline_data". All fields are combined with a logical 'AND'.
"""
input pool_offline_data_bool_exp {
  _and: [pool_offline_data_bool_exp]
  _not: pool_offline_data_bool_exp
  _or: [pool_offline_data_bool_exp]
  bytes: bytea_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  json: jsonb_comparison_exp
  pmr_id: bigint_comparison_exp
  pool_id: bigint_comparison_exp
  ticker_name: String_comparison_exp
}

"""
unique or primary key constraints on table "pool_offline_data"
"""
enum pool_offline_data_constraint {
  """unique or primary key constraint"""
  pool_offline_data_pkey

  """unique or primary key constraint"""
  unique_pool_offline_data
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input pool_offline_data_delete_at_path_input {
  json: [String]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input pool_offline_data_delete_elem_input {
  json: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input pool_offline_data_delete_key_input {
  json: String
}

"""
input type for incrementing integer column in table "pool_offline_data"
"""
input pool_offline_data_inc_input {
  id: bigint
  pmr_id: bigint
  pool_id: bigint
}

"""
input type for inserting data into table "pool_offline_data"
"""
input pool_offline_data_insert_input {
  bytes: bytea
  hash: bytea
  id: bigint
  json: jsonb
  pmr_id: bigint
  pool_id: bigint
  ticker_name: String
}

"""aggregate max on columns"""
type pool_offline_data_max_fields {
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  ticker_name: String
}

"""
order by max() on columns of table "pool_offline_data"
"""
input pool_offline_data_max_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  ticker_name: order_by
}

"""aggregate min on columns"""
type pool_offline_data_min_fields {
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  ticker_name: String
}

"""
order by min() on columns of table "pool_offline_data"
"""
input pool_offline_data_min_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  ticker_name: order_by
}

"""
response of any mutation on the table "pool_offline_data"
"""
type pool_offline_data_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_offline_data!]!
}

"""
input type for inserting object relation for remote table "pool_offline_data"
"""
input pool_offline_data_obj_rel_insert_input {
  data: pool_offline_data_insert_input!
  on_conflict: pool_offline_data_on_conflict
}

"""
on conflict condition type for table "pool_offline_data"
"""
input pool_offline_data_on_conflict {
  constraint: pool_offline_data_constraint!
  update_columns: [pool_offline_data_update_column!]!
  where: pool_offline_data_bool_exp
}

"""
ordering options when selecting data from "pool_offline_data"
"""
input pool_offline_data_order_by {
  bytes: order_by
  hash: order_by
  id: order_by
  json: order_by
  pmr_id: order_by
  pool_id: order_by
  ticker_name: order_by
}

"""
primary key columns input for table: "pool_offline_data"
"""
input pool_offline_data_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input pool_offline_data_prepend_input {
  json: jsonb
}

"""
select columns of table "pool_offline_data"
"""
enum pool_offline_data_select_column {
  """column name"""
  bytes

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  json

  """column name"""
  pmr_id

  """column name"""
  pool_id

  """column name"""
  ticker_name
}

"""
input type for updating data in table "pool_offline_data"
"""
input pool_offline_data_set_input {
  bytes: bytea
  hash: bytea
  id: bigint
  json: jsonb
  pmr_id: bigint
  pool_id: bigint
  ticker_name: String
}

"""aggregate stddev on columns"""
type pool_offline_data_stddev_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
}

"""
order by stddev() on columns of table "pool_offline_data"
"""
input pool_offline_data_stddev_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""aggregate stddev_pop on columns"""
type pool_offline_data_stddev_pop_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
}

"""
order by stddev_pop() on columns of table "pool_offline_data"
"""
input pool_offline_data_stddev_pop_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""aggregate stddev_samp on columns"""
type pool_offline_data_stddev_samp_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
}

"""
order by stddev_samp() on columns of table "pool_offline_data"
"""
input pool_offline_data_stddev_samp_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""aggregate sum on columns"""
type pool_offline_data_sum_fields {
  id: bigint
  pmr_id: bigint
  pool_id: bigint
}

"""
order by sum() on columns of table "pool_offline_data"
"""
input pool_offline_data_sum_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""
update columns of table "pool_offline_data"
"""
enum pool_offline_data_update_column {
  """column name"""
  bytes

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  json

  """column name"""
  pmr_id

  """column name"""
  pool_id

  """column name"""
  ticker_name
}

"""aggregate var_pop on columns"""
type pool_offline_data_var_pop_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
}

"""
order by var_pop() on columns of table "pool_offline_data"
"""
input pool_offline_data_var_pop_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""aggregate var_samp on columns"""
type pool_offline_data_var_samp_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
}

"""
order by var_samp() on columns of table "pool_offline_data"
"""
input pool_offline_data_var_samp_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""aggregate variance on columns"""
type pool_offline_data_variance_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
}

"""
order by variance() on columns of table "pool_offline_data"
"""
input pool_offline_data_variance_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
}

"""
columns and relationships of "pool_offline_fetch_error"
"""
type pool_offline_fetch_error {
  fetch_error: String!
  fetch_time: timestamp!
  id: bigint!
  pmr_id: bigint!
  pool_id: bigint!
  retry_count: Int!
}

"""
aggregated selection of "pool_offline_fetch_error"
"""
type pool_offline_fetch_error_aggregate {
  aggregate: pool_offline_fetch_error_aggregate_fields
  nodes: [pool_offline_fetch_error!]!
}

"""
aggregate fields of "pool_offline_fetch_error"
"""
type pool_offline_fetch_error_aggregate_fields {
  avg: pool_offline_fetch_error_avg_fields
  count(columns: [pool_offline_fetch_error_select_column!], distinct: Boolean): Int
  max: pool_offline_fetch_error_max_fields
  min: pool_offline_fetch_error_min_fields
  stddev: pool_offline_fetch_error_stddev_fields
  stddev_pop: pool_offline_fetch_error_stddev_pop_fields
  stddev_samp: pool_offline_fetch_error_stddev_samp_fields
  sum: pool_offline_fetch_error_sum_fields
  var_pop: pool_offline_fetch_error_var_pop_fields
  var_samp: pool_offline_fetch_error_var_samp_fields
  variance: pool_offline_fetch_error_variance_fields
}

"""
order by aggregate values of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_aggregate_order_by {
  avg: pool_offline_fetch_error_avg_order_by
  count: order_by
  max: pool_offline_fetch_error_max_order_by
  min: pool_offline_fetch_error_min_order_by
  stddev: pool_offline_fetch_error_stddev_order_by
  stddev_pop: pool_offline_fetch_error_stddev_pop_order_by
  stddev_samp: pool_offline_fetch_error_stddev_samp_order_by
  sum: pool_offline_fetch_error_sum_order_by
  var_pop: pool_offline_fetch_error_var_pop_order_by
  var_samp: pool_offline_fetch_error_var_samp_order_by
  variance: pool_offline_fetch_error_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_arr_rel_insert_input {
  data: [pool_offline_fetch_error_insert_input!]!
  on_conflict: pool_offline_fetch_error_on_conflict
}

"""aggregate avg on columns"""
type pool_offline_fetch_error_avg_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
  retry_count: Float
}

"""
order by avg() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_avg_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""
Boolean expression to filter rows from the table "pool_offline_fetch_error". All fields are combined with a logical 'AND'.
"""
input pool_offline_fetch_error_bool_exp {
  _and: [pool_offline_fetch_error_bool_exp]
  _not: pool_offline_fetch_error_bool_exp
  _or: [pool_offline_fetch_error_bool_exp]
  fetch_error: String_comparison_exp
  fetch_time: timestamp_comparison_exp
  id: bigint_comparison_exp
  pmr_id: bigint_comparison_exp
  pool_id: bigint_comparison_exp
  retry_count: Int_comparison_exp
}

"""
unique or primary key constraints on table "pool_offline_fetch_error"
"""
enum pool_offline_fetch_error_constraint {
  """unique or primary key constraint"""
  pool_offline_fetch_error_pkey

  """unique or primary key constraint"""
  unique_pool_offline_fetch_error
}

"""
input type for incrementing integer column in table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_inc_input {
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  retry_count: Int
}

"""
input type for inserting data into table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_insert_input {
  fetch_error: String
  fetch_time: timestamp
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  retry_count: Int
}

"""aggregate max on columns"""
type pool_offline_fetch_error_max_fields {
  fetch_error: String
  fetch_time: timestamp
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  retry_count: Int
}

"""
order by max() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_max_order_by {
  fetch_error: order_by
  fetch_time: order_by
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""aggregate min on columns"""
type pool_offline_fetch_error_min_fields {
  fetch_error: String
  fetch_time: timestamp
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  retry_count: Int
}

"""
order by min() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_min_order_by {
  fetch_error: order_by
  fetch_time: order_by
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""
response of any mutation on the table "pool_offline_fetch_error"
"""
type pool_offline_fetch_error_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_offline_fetch_error!]!
}

"""
input type for inserting object relation for remote table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_obj_rel_insert_input {
  data: pool_offline_fetch_error_insert_input!
  on_conflict: pool_offline_fetch_error_on_conflict
}

"""
on conflict condition type for table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_on_conflict {
  constraint: pool_offline_fetch_error_constraint!
  update_columns: [pool_offline_fetch_error_update_column!]!
  where: pool_offline_fetch_error_bool_exp
}

"""
ordering options when selecting data from "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_order_by {
  fetch_error: order_by
  fetch_time: order_by
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""
primary key columns input for table: "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_offline_fetch_error"
"""
enum pool_offline_fetch_error_select_column {
  """column name"""
  fetch_error

  """column name"""
  fetch_time

  """column name"""
  id

  """column name"""
  pmr_id

  """column name"""
  pool_id

  """column name"""
  retry_count
}

"""
input type for updating data in table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_set_input {
  fetch_error: String
  fetch_time: timestamp
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  retry_count: Int
}

"""aggregate stddev on columns"""
type pool_offline_fetch_error_stddev_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
  retry_count: Float
}

"""
order by stddev() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_stddev_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""aggregate stddev_pop on columns"""
type pool_offline_fetch_error_stddev_pop_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
  retry_count: Float
}

"""
order by stddev_pop() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_stddev_pop_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""aggregate stddev_samp on columns"""
type pool_offline_fetch_error_stddev_samp_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
  retry_count: Float
}

"""
order by stddev_samp() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_stddev_samp_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""aggregate sum on columns"""
type pool_offline_fetch_error_sum_fields {
  id: bigint
  pmr_id: bigint
  pool_id: bigint
  retry_count: Int
}

"""
order by sum() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_sum_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""
update columns of table "pool_offline_fetch_error"
"""
enum pool_offline_fetch_error_update_column {
  """column name"""
  fetch_error

  """column name"""
  fetch_time

  """column name"""
  id

  """column name"""
  pmr_id

  """column name"""
  pool_id

  """column name"""
  retry_count
}

"""aggregate var_pop on columns"""
type pool_offline_fetch_error_var_pop_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
  retry_count: Float
}

"""
order by var_pop() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_var_pop_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""aggregate var_samp on columns"""
type pool_offline_fetch_error_var_samp_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
  retry_count: Float
}

"""
order by var_samp() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_var_samp_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""aggregate variance on columns"""
type pool_offline_fetch_error_variance_fields {
  id: Float
  pmr_id: Float
  pool_id: Float
  retry_count: Float
}

"""
order by variance() on columns of table "pool_offline_fetch_error"
"""
input pool_offline_fetch_error_variance_order_by {
  id: order_by
  pmr_id: order_by
  pool_id: order_by
  retry_count: order_by
}

"""
columns and relationships of "pool_owner"
"""
type pool_owner {
  addr_id: bigint!
  id: bigint!
  pool_hash_id: bigint!
  registered_tx_id: bigint!
}

"""
aggregated selection of "pool_owner"
"""
type pool_owner_aggregate {
  aggregate: pool_owner_aggregate_fields
  nodes: [pool_owner!]!
}

"""
aggregate fields of "pool_owner"
"""
type pool_owner_aggregate_fields {
  avg: pool_owner_avg_fields
  count(columns: [pool_owner_select_column!], distinct: Boolean): Int
  max: pool_owner_max_fields
  min: pool_owner_min_fields
  stddev: pool_owner_stddev_fields
  stddev_pop: pool_owner_stddev_pop_fields
  stddev_samp: pool_owner_stddev_samp_fields
  sum: pool_owner_sum_fields
  var_pop: pool_owner_var_pop_fields
  var_samp: pool_owner_var_samp_fields
  variance: pool_owner_variance_fields
}

"""
order by aggregate values of table "pool_owner"
"""
input pool_owner_aggregate_order_by {
  avg: pool_owner_avg_order_by
  count: order_by
  max: pool_owner_max_order_by
  min: pool_owner_min_order_by
  stddev: pool_owner_stddev_order_by
  stddev_pop: pool_owner_stddev_pop_order_by
  stddev_samp: pool_owner_stddev_samp_order_by
  sum: pool_owner_sum_order_by
  var_pop: pool_owner_var_pop_order_by
  var_samp: pool_owner_var_samp_order_by
  variance: pool_owner_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_owner"
"""
input pool_owner_arr_rel_insert_input {
  data: [pool_owner_insert_input!]!
  on_conflict: pool_owner_on_conflict
}

"""aggregate avg on columns"""
type pool_owner_avg_fields {
  addr_id: Float
  id: Float
  pool_hash_id: Float
  registered_tx_id: Float
}

"""
order by avg() on columns of table "pool_owner"
"""
input pool_owner_avg_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""
Boolean expression to filter rows from the table "pool_owner". All fields are combined with a logical 'AND'.
"""
input pool_owner_bool_exp {
  _and: [pool_owner_bool_exp]
  _not: pool_owner_bool_exp
  _or: [pool_owner_bool_exp]
  addr_id: bigint_comparison_exp
  id: bigint_comparison_exp
  pool_hash_id: bigint_comparison_exp
  registered_tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "pool_owner"
"""
enum pool_owner_constraint {
  """unique or primary key constraint"""
  pool_owner_pkey

  """unique or primary key constraint"""
  unique_pool_owner
}

"""
input type for incrementing integer column in table "pool_owner"
"""
input pool_owner_inc_input {
  addr_id: bigint
  id: bigint
  pool_hash_id: bigint
  registered_tx_id: bigint
}

"""
input type for inserting data into table "pool_owner"
"""
input pool_owner_insert_input {
  addr_id: bigint
  id: bigint
  pool_hash_id: bigint
  registered_tx_id: bigint
}

"""aggregate max on columns"""
type pool_owner_max_fields {
  addr_id: bigint
  id: bigint
  pool_hash_id: bigint
  registered_tx_id: bigint
}

"""
order by max() on columns of table "pool_owner"
"""
input pool_owner_max_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""aggregate min on columns"""
type pool_owner_min_fields {
  addr_id: bigint
  id: bigint
  pool_hash_id: bigint
  registered_tx_id: bigint
}

"""
order by min() on columns of table "pool_owner"
"""
input pool_owner_min_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""
response of any mutation on the table "pool_owner"
"""
type pool_owner_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_owner!]!
}

"""
input type for inserting object relation for remote table "pool_owner"
"""
input pool_owner_obj_rel_insert_input {
  data: pool_owner_insert_input!
  on_conflict: pool_owner_on_conflict
}

"""
on conflict condition type for table "pool_owner"
"""
input pool_owner_on_conflict {
  constraint: pool_owner_constraint!
  update_columns: [pool_owner_update_column!]!
  where: pool_owner_bool_exp
}

"""
ordering options when selecting data from "pool_owner"
"""
input pool_owner_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""
primary key columns input for table: "pool_owner"
"""
input pool_owner_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_owner"
"""
enum pool_owner_select_column {
  """column name"""
  addr_id

  """column name"""
  id

  """column name"""
  pool_hash_id

  """column name"""
  registered_tx_id
}

"""
input type for updating data in table "pool_owner"
"""
input pool_owner_set_input {
  addr_id: bigint
  id: bigint
  pool_hash_id: bigint
  registered_tx_id: bigint
}

"""aggregate stddev on columns"""
type pool_owner_stddev_fields {
  addr_id: Float
  id: Float
  pool_hash_id: Float
  registered_tx_id: Float
}

"""
order by stddev() on columns of table "pool_owner"
"""
input pool_owner_stddev_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type pool_owner_stddev_pop_fields {
  addr_id: Float
  id: Float
  pool_hash_id: Float
  registered_tx_id: Float
}

"""
order by stddev_pop() on columns of table "pool_owner"
"""
input pool_owner_stddev_pop_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type pool_owner_stddev_samp_fields {
  addr_id: Float
  id: Float
  pool_hash_id: Float
  registered_tx_id: Float
}

"""
order by stddev_samp() on columns of table "pool_owner"
"""
input pool_owner_stddev_samp_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""aggregate sum on columns"""
type pool_owner_sum_fields {
  addr_id: bigint
  id: bigint
  pool_hash_id: bigint
  registered_tx_id: bigint
}

"""
order by sum() on columns of table "pool_owner"
"""
input pool_owner_sum_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""
update columns of table "pool_owner"
"""
enum pool_owner_update_column {
  """column name"""
  addr_id

  """column name"""
  id

  """column name"""
  pool_hash_id

  """column name"""
  registered_tx_id
}

"""aggregate var_pop on columns"""
type pool_owner_var_pop_fields {
  addr_id: Float
  id: Float
  pool_hash_id: Float
  registered_tx_id: Float
}

"""
order by var_pop() on columns of table "pool_owner"
"""
input pool_owner_var_pop_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""aggregate var_samp on columns"""
type pool_owner_var_samp_fields {
  addr_id: Float
  id: Float
  pool_hash_id: Float
  registered_tx_id: Float
}

"""
order by var_samp() on columns of table "pool_owner"
"""
input pool_owner_var_samp_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""aggregate variance on columns"""
type pool_owner_variance_fields {
  addr_id: Float
  id: Float
  pool_hash_id: Float
  registered_tx_id: Float
}

"""
order by variance() on columns of table "pool_owner"
"""
input pool_owner_variance_order_by {
  addr_id: order_by
  id: order_by
  pool_hash_id: order_by
  registered_tx_id: order_by
}

"""
columns and relationships of "pool_relay"
"""
type pool_relay {
  dns_name: String
  dns_srv_name: String
  id: bigint!
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint!
}

"""
aggregated selection of "pool_relay"
"""
type pool_relay_aggregate {
  aggregate: pool_relay_aggregate_fields
  nodes: [pool_relay!]!
}

"""
aggregate fields of "pool_relay"
"""
type pool_relay_aggregate_fields {
  avg: pool_relay_avg_fields
  count(columns: [pool_relay_select_column!], distinct: Boolean): Int
  max: pool_relay_max_fields
  min: pool_relay_min_fields
  stddev: pool_relay_stddev_fields
  stddev_pop: pool_relay_stddev_pop_fields
  stddev_samp: pool_relay_stddev_samp_fields
  sum: pool_relay_sum_fields
  var_pop: pool_relay_var_pop_fields
  var_samp: pool_relay_var_samp_fields
  variance: pool_relay_variance_fields
}

"""
order by aggregate values of table "pool_relay"
"""
input pool_relay_aggregate_order_by {
  avg: pool_relay_avg_order_by
  count: order_by
  max: pool_relay_max_order_by
  min: pool_relay_min_order_by
  stddev: pool_relay_stddev_order_by
  stddev_pop: pool_relay_stddev_pop_order_by
  stddev_samp: pool_relay_stddev_samp_order_by
  sum: pool_relay_sum_order_by
  var_pop: pool_relay_var_pop_order_by
  var_samp: pool_relay_var_samp_order_by
  variance: pool_relay_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_relay"
"""
input pool_relay_arr_rel_insert_input {
  data: [pool_relay_insert_input!]!
  on_conflict: pool_relay_on_conflict
}

"""aggregate avg on columns"""
type pool_relay_avg_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by avg() on columns of table "pool_relay"
"""
input pool_relay_avg_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""
Boolean expression to filter rows from the table "pool_relay". All fields are combined with a logical 'AND'.
"""
input pool_relay_bool_exp {
  _and: [pool_relay_bool_exp]
  _not: pool_relay_bool_exp
  _or: [pool_relay_bool_exp]
  dns_name: String_comparison_exp
  dns_srv_name: String_comparison_exp
  id: bigint_comparison_exp
  ipv4: String_comparison_exp
  ipv6: String_comparison_exp
  port: Int_comparison_exp
  update_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "pool_relay"
"""
enum pool_relay_constraint {
  """unique or primary key constraint"""
  pool_relay_pkey

  """unique or primary key constraint"""
  unique_pool_relay
}

"""
input type for incrementing integer column in table "pool_relay"
"""
input pool_relay_inc_input {
  id: bigint
  port: Int
  update_id: bigint
}

"""
input type for inserting data into table "pool_relay"
"""
input pool_relay_insert_input {
  dns_name: String
  dns_srv_name: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""aggregate max on columns"""
type pool_relay_max_fields {
  dns_name: String
  dns_srv_name: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""
order by max() on columns of table "pool_relay"
"""
input pool_relay_max_order_by {
  dns_name: order_by
  dns_srv_name: order_by
  id: order_by
  ipv4: order_by
  ipv6: order_by
  port: order_by
  update_id: order_by
}

"""aggregate min on columns"""
type pool_relay_min_fields {
  dns_name: String
  dns_srv_name: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""
order by min() on columns of table "pool_relay"
"""
input pool_relay_min_order_by {
  dns_name: order_by
  dns_srv_name: order_by
  id: order_by
  ipv4: order_by
  ipv6: order_by
  port: order_by
  update_id: order_by
}

"""
response of any mutation on the table "pool_relay"
"""
type pool_relay_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_relay!]!
}

"""
input type for inserting object relation for remote table "pool_relay"
"""
input pool_relay_obj_rel_insert_input {
  data: pool_relay_insert_input!
  on_conflict: pool_relay_on_conflict
}

"""
on conflict condition type for table "pool_relay"
"""
input pool_relay_on_conflict {
  constraint: pool_relay_constraint!
  update_columns: [pool_relay_update_column!]!
  where: pool_relay_bool_exp
}

"""
ordering options when selecting data from "pool_relay"
"""
input pool_relay_order_by {
  dns_name: order_by
  dns_srv_name: order_by
  id: order_by
  ipv4: order_by
  ipv6: order_by
  port: order_by
  update_id: order_by
}

"""
primary key columns input for table: "pool_relay"
"""
input pool_relay_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_relay"
"""
enum pool_relay_select_column {
  """column name"""
  dns_name

  """column name"""
  dns_srv_name

  """column name"""
  id

  """column name"""
  ipv4

  """column name"""
  ipv6

  """column name"""
  port

  """column name"""
  update_id
}

"""
input type for updating data in table "pool_relay"
"""
input pool_relay_set_input {
  dns_name: String
  dns_srv_name: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""aggregate stddev on columns"""
type pool_relay_stddev_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by stddev() on columns of table "pool_relay"
"""
input pool_relay_stddev_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate stddev_pop on columns"""
type pool_relay_stddev_pop_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by stddev_pop() on columns of table "pool_relay"
"""
input pool_relay_stddev_pop_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate stddev_samp on columns"""
type pool_relay_stddev_samp_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by stddev_samp() on columns of table "pool_relay"
"""
input pool_relay_stddev_samp_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate sum on columns"""
type pool_relay_sum_fields {
  id: bigint
  port: Int
  update_id: bigint
}

"""
order by sum() on columns of table "pool_relay"
"""
input pool_relay_sum_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""
update columns of table "pool_relay"
"""
enum pool_relay_update_column {
  """column name"""
  dns_name

  """column name"""
  dns_srv_name

  """column name"""
  id

  """column name"""
  ipv4

  """column name"""
  ipv6

  """column name"""
  port

  """column name"""
  update_id
}

"""aggregate var_pop on columns"""
type pool_relay_var_pop_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by var_pop() on columns of table "pool_relay"
"""
input pool_relay_var_pop_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate var_samp on columns"""
type pool_relay_var_samp_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by var_samp() on columns of table "pool_relay"
"""
input pool_relay_var_samp_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate variance on columns"""
type pool_relay_variance_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by variance() on columns of table "pool_relay"
"""
input pool_relay_variance_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""
columns and relationships of "pool_retire"
"""
type pool_retire {
  announced_tx_id: bigint!
  cert_index: Int!
  hash_id: bigint!
  id: bigint!
  retiring_epoch: Int!
}

"""
aggregated selection of "pool_retire"
"""
type pool_retire_aggregate {
  aggregate: pool_retire_aggregate_fields
  nodes: [pool_retire!]!
}

"""
aggregate fields of "pool_retire"
"""
type pool_retire_aggregate_fields {
  avg: pool_retire_avg_fields
  count(columns: [pool_retire_select_column!], distinct: Boolean): Int
  max: pool_retire_max_fields
  min: pool_retire_min_fields
  stddev: pool_retire_stddev_fields
  stddev_pop: pool_retire_stddev_pop_fields
  stddev_samp: pool_retire_stddev_samp_fields
  sum: pool_retire_sum_fields
  var_pop: pool_retire_var_pop_fields
  var_samp: pool_retire_var_samp_fields
  variance: pool_retire_variance_fields
}

"""
order by aggregate values of table "pool_retire"
"""
input pool_retire_aggregate_order_by {
  avg: pool_retire_avg_order_by
  count: order_by
  max: pool_retire_max_order_by
  min: pool_retire_min_order_by
  stddev: pool_retire_stddev_order_by
  stddev_pop: pool_retire_stddev_pop_order_by
  stddev_samp: pool_retire_stddev_samp_order_by
  sum: pool_retire_sum_order_by
  var_pop: pool_retire_var_pop_order_by
  var_samp: pool_retire_var_samp_order_by
  variance: pool_retire_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_retire"
"""
input pool_retire_arr_rel_insert_input {
  data: [pool_retire_insert_input!]!
  on_conflict: pool_retire_on_conflict
}

"""aggregate avg on columns"""
type pool_retire_avg_fields {
  announced_tx_id: Float
  cert_index: Float
  hash_id: Float
  id: Float
  retiring_epoch: Float
}

"""
order by avg() on columns of table "pool_retire"
"""
input pool_retire_avg_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""
Boolean expression to filter rows from the table "pool_retire". All fields are combined with a logical 'AND'.
"""
input pool_retire_bool_exp {
  _and: [pool_retire_bool_exp]
  _not: pool_retire_bool_exp
  _or: [pool_retire_bool_exp]
  announced_tx_id: bigint_comparison_exp
  cert_index: Int_comparison_exp
  hash_id: bigint_comparison_exp
  id: bigint_comparison_exp
  retiring_epoch: Int_comparison_exp
}

"""
unique or primary key constraints on table "pool_retire"
"""
enum pool_retire_constraint {
  """unique or primary key constraint"""
  pool_retire_pkey

  """unique or primary key constraint"""
  unique_pool_retiring
}

"""
input type for incrementing integer column in table "pool_retire"
"""
input pool_retire_inc_input {
  announced_tx_id: bigint
  cert_index: Int
  hash_id: bigint
  id: bigint
  retiring_epoch: Int
}

"""
input type for inserting data into table "pool_retire"
"""
input pool_retire_insert_input {
  announced_tx_id: bigint
  cert_index: Int
  hash_id: bigint
  id: bigint
  retiring_epoch: Int
}

"""aggregate max on columns"""
type pool_retire_max_fields {
  announced_tx_id: bigint
  cert_index: Int
  hash_id: bigint
  id: bigint
  retiring_epoch: Int
}

"""
order by max() on columns of table "pool_retire"
"""
input pool_retire_max_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""aggregate min on columns"""
type pool_retire_min_fields {
  announced_tx_id: bigint
  cert_index: Int
  hash_id: bigint
  id: bigint
  retiring_epoch: Int
}

"""
order by min() on columns of table "pool_retire"
"""
input pool_retire_min_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""
response of any mutation on the table "pool_retire"
"""
type pool_retire_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_retire!]!
}

"""
input type for inserting object relation for remote table "pool_retire"
"""
input pool_retire_obj_rel_insert_input {
  data: pool_retire_insert_input!
  on_conflict: pool_retire_on_conflict
}

"""
on conflict condition type for table "pool_retire"
"""
input pool_retire_on_conflict {
  constraint: pool_retire_constraint!
  update_columns: [pool_retire_update_column!]!
  where: pool_retire_bool_exp
}

"""
ordering options when selecting data from "pool_retire"
"""
input pool_retire_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""
primary key columns input for table: "pool_retire"
"""
input pool_retire_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_retire"
"""
enum pool_retire_select_column {
  """column name"""
  announced_tx_id

  """column name"""
  cert_index

  """column name"""
  hash_id

  """column name"""
  id

  """column name"""
  retiring_epoch
}

"""
input type for updating data in table "pool_retire"
"""
input pool_retire_set_input {
  announced_tx_id: bigint
  cert_index: Int
  hash_id: bigint
  id: bigint
  retiring_epoch: Int
}

"""aggregate stddev on columns"""
type pool_retire_stddev_fields {
  announced_tx_id: Float
  cert_index: Float
  hash_id: Float
  id: Float
  retiring_epoch: Float
}

"""
order by stddev() on columns of table "pool_retire"
"""
input pool_retire_stddev_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""aggregate stddev_pop on columns"""
type pool_retire_stddev_pop_fields {
  announced_tx_id: Float
  cert_index: Float
  hash_id: Float
  id: Float
  retiring_epoch: Float
}

"""
order by stddev_pop() on columns of table "pool_retire"
"""
input pool_retire_stddev_pop_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""aggregate stddev_samp on columns"""
type pool_retire_stddev_samp_fields {
  announced_tx_id: Float
  cert_index: Float
  hash_id: Float
  id: Float
  retiring_epoch: Float
}

"""
order by stddev_samp() on columns of table "pool_retire"
"""
input pool_retire_stddev_samp_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""aggregate sum on columns"""
type pool_retire_sum_fields {
  announced_tx_id: bigint
  cert_index: Int
  hash_id: bigint
  id: bigint
  retiring_epoch: Int
}

"""
order by sum() on columns of table "pool_retire"
"""
input pool_retire_sum_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""
update columns of table "pool_retire"
"""
enum pool_retire_update_column {
  """column name"""
  announced_tx_id

  """column name"""
  cert_index

  """column name"""
  hash_id

  """column name"""
  id

  """column name"""
  retiring_epoch
}

"""aggregate var_pop on columns"""
type pool_retire_var_pop_fields {
  announced_tx_id: Float
  cert_index: Float
  hash_id: Float
  id: Float
  retiring_epoch: Float
}

"""
order by var_pop() on columns of table "pool_retire"
"""
input pool_retire_var_pop_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""aggregate var_samp on columns"""
type pool_retire_var_samp_fields {
  announced_tx_id: Float
  cert_index: Float
  hash_id: Float
  id: Float
  retiring_epoch: Float
}

"""
order by var_samp() on columns of table "pool_retire"
"""
input pool_retire_var_samp_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""aggregate variance on columns"""
type pool_retire_variance_fields {
  announced_tx_id: Float
  cert_index: Float
  hash_id: Float
  id: Float
  retiring_epoch: Float
}

"""
order by variance() on columns of table "pool_retire"
"""
input pool_retire_variance_order_by {
  announced_tx_id: order_by
  cert_index: order_by
  hash_id: order_by
  id: order_by
  retiring_epoch: order_by
}

"""
columns and relationships of "pool_update"
"""
type pool_update {
  active_epoch_no: bigint!
  cert_index: Int!
  fixed_cost: numeric!
  hash_id: bigint!
  id: bigint!
  margin: float8!
  meta_id: bigint
  pledge: numeric!
  registered_tx_id: bigint!
  reward_addr: bytea!
  vrf_key_hash: bytea!
}

"""
aggregated selection of "pool_update"
"""
type pool_update_aggregate {
  aggregate: pool_update_aggregate_fields
  nodes: [pool_update!]!
}

"""
aggregate fields of "pool_update"
"""
type pool_update_aggregate_fields {
  avg: pool_update_avg_fields
  count(columns: [pool_update_select_column!], distinct: Boolean): Int
  max: pool_update_max_fields
  min: pool_update_min_fields
  stddev: pool_update_stddev_fields
  stddev_pop: pool_update_stddev_pop_fields
  stddev_samp: pool_update_stddev_samp_fields
  sum: pool_update_sum_fields
  var_pop: pool_update_var_pop_fields
  var_samp: pool_update_var_samp_fields
  variance: pool_update_variance_fields
}

"""
order by aggregate values of table "pool_update"
"""
input pool_update_aggregate_order_by {
  avg: pool_update_avg_order_by
  count: order_by
  max: pool_update_max_order_by
  min: pool_update_min_order_by
  stddev: pool_update_stddev_order_by
  stddev_pop: pool_update_stddev_pop_order_by
  stddev_samp: pool_update_stddev_samp_order_by
  sum: pool_update_sum_order_by
  var_pop: pool_update_var_pop_order_by
  var_samp: pool_update_var_samp_order_by
  variance: pool_update_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_update"
"""
input pool_update_arr_rel_insert_input {
  data: [pool_update_insert_input!]!
  on_conflict: pool_update_on_conflict
}

"""aggregate avg on columns"""
type pool_update_avg_fields {
  active_epoch_no: Float
  cert_index: Float
  fixed_cost: Float
  hash_id: Float
  id: Float
  margin: Float
  meta_id: Float
  pledge: Float
  registered_tx_id: Float
}

"""
order by avg() on columns of table "pool_update"
"""
input pool_update_avg_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""
Boolean expression to filter rows from the table "pool_update". All fields are combined with a logical 'AND'.
"""
input pool_update_bool_exp {
  _and: [pool_update_bool_exp]
  _not: pool_update_bool_exp
  _or: [pool_update_bool_exp]
  active_epoch_no: bigint_comparison_exp
  cert_index: Int_comparison_exp
  fixed_cost: numeric_comparison_exp
  hash_id: bigint_comparison_exp
  id: bigint_comparison_exp
  margin: float8_comparison_exp
  meta_id: bigint_comparison_exp
  pledge: numeric_comparison_exp
  registered_tx_id: bigint_comparison_exp
  reward_addr: bytea_comparison_exp
  vrf_key_hash: bytea_comparison_exp
}

"""
unique or primary key constraints on table "pool_update"
"""
enum pool_update_constraint {
  """unique or primary key constraint"""
  pool_update_pkey

  """unique or primary key constraint"""
  unique_pool_update
}

"""
input type for incrementing integer column in table "pool_update"
"""
input pool_update_inc_input {
  active_epoch_no: bigint
  cert_index: Int
  fixed_cost: numeric
  hash_id: bigint
  id: bigint
  margin: float8
  meta_id: bigint
  pledge: numeric
  registered_tx_id: bigint
}

"""
input type for inserting data into table "pool_update"
"""
input pool_update_insert_input {
  active_epoch_no: bigint
  cert_index: Int
  fixed_cost: numeric
  hash_id: bigint
  id: bigint
  margin: float8
  meta_id: bigint
  pledge: numeric
  registered_tx_id: bigint
  reward_addr: bytea
  vrf_key_hash: bytea
}

"""aggregate max on columns"""
type pool_update_max_fields {
  active_epoch_no: bigint
  cert_index: Int
  fixed_cost: numeric
  hash_id: bigint
  id: bigint
  margin: float8
  meta_id: bigint
  pledge: numeric
  registered_tx_id: bigint
}

"""
order by max() on columns of table "pool_update"
"""
input pool_update_max_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""aggregate min on columns"""
type pool_update_min_fields {
  active_epoch_no: bigint
  cert_index: Int
  fixed_cost: numeric
  hash_id: bigint
  id: bigint
  margin: float8
  meta_id: bigint
  pledge: numeric
  registered_tx_id: bigint
}

"""
order by min() on columns of table "pool_update"
"""
input pool_update_min_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""
response of any mutation on the table "pool_update"
"""
type pool_update_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pool_update!]!
}

"""
input type for inserting object relation for remote table "pool_update"
"""
input pool_update_obj_rel_insert_input {
  data: pool_update_insert_input!
  on_conflict: pool_update_on_conflict
}

"""
on conflict condition type for table "pool_update"
"""
input pool_update_on_conflict {
  constraint: pool_update_constraint!
  update_columns: [pool_update_update_column!]!
  where: pool_update_bool_exp
}

"""
ordering options when selecting data from "pool_update"
"""
input pool_update_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
  reward_addr: order_by
  vrf_key_hash: order_by
}

"""
primary key columns input for table: "pool_update"
"""
input pool_update_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_update"
"""
enum pool_update_select_column {
  """column name"""
  active_epoch_no

  """column name"""
  cert_index

  """column name"""
  fixed_cost

  """column name"""
  hash_id

  """column name"""
  id

  """column name"""
  margin

  """column name"""
  meta_id

  """column name"""
  pledge

  """column name"""
  registered_tx_id

  """column name"""
  reward_addr

  """column name"""
  vrf_key_hash
}

"""
input type for updating data in table "pool_update"
"""
input pool_update_set_input {
  active_epoch_no: bigint
  cert_index: Int
  fixed_cost: numeric
  hash_id: bigint
  id: bigint
  margin: float8
  meta_id: bigint
  pledge: numeric
  registered_tx_id: bigint
  reward_addr: bytea
  vrf_key_hash: bytea
}

"""aggregate stddev on columns"""
type pool_update_stddev_fields {
  active_epoch_no: Float
  cert_index: Float
  fixed_cost: Float
  hash_id: Float
  id: Float
  margin: Float
  meta_id: Float
  pledge: Float
  registered_tx_id: Float
}

"""
order by stddev() on columns of table "pool_update"
"""
input pool_update_stddev_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type pool_update_stddev_pop_fields {
  active_epoch_no: Float
  cert_index: Float
  fixed_cost: Float
  hash_id: Float
  id: Float
  margin: Float
  meta_id: Float
  pledge: Float
  registered_tx_id: Float
}

"""
order by stddev_pop() on columns of table "pool_update"
"""
input pool_update_stddev_pop_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type pool_update_stddev_samp_fields {
  active_epoch_no: Float
  cert_index: Float
  fixed_cost: Float
  hash_id: Float
  id: Float
  margin: Float
  meta_id: Float
  pledge: Float
  registered_tx_id: Float
}

"""
order by stddev_samp() on columns of table "pool_update"
"""
input pool_update_stddev_samp_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""aggregate sum on columns"""
type pool_update_sum_fields {
  active_epoch_no: bigint
  cert_index: Int
  fixed_cost: numeric
  hash_id: bigint
  id: bigint
  margin: float8
  meta_id: bigint
  pledge: numeric
  registered_tx_id: bigint
}

"""
order by sum() on columns of table "pool_update"
"""
input pool_update_sum_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""
update columns of table "pool_update"
"""
enum pool_update_update_column {
  """column name"""
  active_epoch_no

  """column name"""
  cert_index

  """column name"""
  fixed_cost

  """column name"""
  hash_id

  """column name"""
  id

  """column name"""
  margin

  """column name"""
  meta_id

  """column name"""
  pledge

  """column name"""
  registered_tx_id

  """column name"""
  reward_addr

  """column name"""
  vrf_key_hash
}

"""aggregate var_pop on columns"""
type pool_update_var_pop_fields {
  active_epoch_no: Float
  cert_index: Float
  fixed_cost: Float
  hash_id: Float
  id: Float
  margin: Float
  meta_id: Float
  pledge: Float
  registered_tx_id: Float
}

"""
order by var_pop() on columns of table "pool_update"
"""
input pool_update_var_pop_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""aggregate var_samp on columns"""
type pool_update_var_samp_fields {
  active_epoch_no: Float
  cert_index: Float
  fixed_cost: Float
  hash_id: Float
  id: Float
  margin: Float
  meta_id: Float
  pledge: Float
  registered_tx_id: Float
}

"""
order by var_samp() on columns of table "pool_update"
"""
input pool_update_var_samp_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""aggregate variance on columns"""
type pool_update_variance_fields {
  active_epoch_no: Float
  cert_index: Float
  fixed_cost: Float
  hash_id: Float
  id: Float
  margin: Float
  meta_id: Float
  pledge: Float
  registered_tx_id: Float
}

"""
order by variance() on columns of table "pool_update"
"""
input pool_update_variance_order_by {
  active_epoch_no: order_by
  cert_index: order_by
  fixed_cost: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  meta_id: order_by
  pledge: order_by
  registered_tx_id: order_by
}

"""
columns and relationships of "pot_transfer"
"""
type pot_transfer {
  cert_index: Int!
  id: bigint!
  reserves: numeric!
  treasury: numeric!
  tx_id: bigint!
}

"""
aggregated selection of "pot_transfer"
"""
type pot_transfer_aggregate {
  aggregate: pot_transfer_aggregate_fields
  nodes: [pot_transfer!]!
}

"""
aggregate fields of "pot_transfer"
"""
type pot_transfer_aggregate_fields {
  avg: pot_transfer_avg_fields
  count(columns: [pot_transfer_select_column!], distinct: Boolean): Int
  max: pot_transfer_max_fields
  min: pot_transfer_min_fields
  stddev: pot_transfer_stddev_fields
  stddev_pop: pot_transfer_stddev_pop_fields
  stddev_samp: pot_transfer_stddev_samp_fields
  sum: pot_transfer_sum_fields
  var_pop: pot_transfer_var_pop_fields
  var_samp: pot_transfer_var_samp_fields
  variance: pot_transfer_variance_fields
}

"""
order by aggregate values of table "pot_transfer"
"""
input pot_transfer_aggregate_order_by {
  avg: pot_transfer_avg_order_by
  count: order_by
  max: pot_transfer_max_order_by
  min: pot_transfer_min_order_by
  stddev: pot_transfer_stddev_order_by
  stddev_pop: pot_transfer_stddev_pop_order_by
  stddev_samp: pot_transfer_stddev_samp_order_by
  sum: pot_transfer_sum_order_by
  var_pop: pot_transfer_var_pop_order_by
  var_samp: pot_transfer_var_samp_order_by
  variance: pot_transfer_variance_order_by
}

"""
input type for inserting array relation for remote table "pot_transfer"
"""
input pot_transfer_arr_rel_insert_input {
  data: [pot_transfer_insert_input!]!
  on_conflict: pot_transfer_on_conflict
}

"""aggregate avg on columns"""
type pot_transfer_avg_fields {
  cert_index: Float
  id: Float
  reserves: Float
  treasury: Float
  tx_id: Float
}

"""
order by avg() on columns of table "pot_transfer"
"""
input pot_transfer_avg_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "pot_transfer". All fields are combined with a logical 'AND'.
"""
input pot_transfer_bool_exp {
  _and: [pot_transfer_bool_exp]
  _not: pot_transfer_bool_exp
  _or: [pot_transfer_bool_exp]
  cert_index: Int_comparison_exp
  id: bigint_comparison_exp
  reserves: numeric_comparison_exp
  treasury: numeric_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "pot_transfer"
"""
enum pot_transfer_constraint {
  """unique or primary key constraint"""
  pot_transfer_pkey

  """unique or primary key constraint"""
  unique_pot_transfer
}

"""
input type for incrementing integer column in table "pot_transfer"
"""
input pot_transfer_inc_input {
  cert_index: Int
  id: bigint
  reserves: numeric
  treasury: numeric
  tx_id: bigint
}

"""
input type for inserting data into table "pot_transfer"
"""
input pot_transfer_insert_input {
  cert_index: Int
  id: bigint
  reserves: numeric
  treasury: numeric
  tx_id: bigint
}

"""aggregate max on columns"""
type pot_transfer_max_fields {
  cert_index: Int
  id: bigint
  reserves: numeric
  treasury: numeric
  tx_id: bigint
}

"""
order by max() on columns of table "pot_transfer"
"""
input pot_transfer_max_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type pot_transfer_min_fields {
  cert_index: Int
  id: bigint
  reserves: numeric
  treasury: numeric
  tx_id: bigint
}

"""
order by min() on columns of table "pot_transfer"
"""
input pot_transfer_min_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "pot_transfer"
"""
type pot_transfer_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pot_transfer!]!
}

"""
input type for inserting object relation for remote table "pot_transfer"
"""
input pot_transfer_obj_rel_insert_input {
  data: pot_transfer_insert_input!
  on_conflict: pot_transfer_on_conflict
}

"""
on conflict condition type for table "pot_transfer"
"""
input pot_transfer_on_conflict {
  constraint: pot_transfer_constraint!
  update_columns: [pot_transfer_update_column!]!
  where: pot_transfer_bool_exp
}

"""
ordering options when selecting data from "pot_transfer"
"""
input pot_transfer_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "pot_transfer"
"""
input pot_transfer_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pot_transfer"
"""
enum pot_transfer_select_column {
  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  reserves

  """column name"""
  treasury

  """column name"""
  tx_id
}

"""
input type for updating data in table "pot_transfer"
"""
input pot_transfer_set_input {
  cert_index: Int
  id: bigint
  reserves: numeric
  treasury: numeric
  tx_id: bigint
}

"""aggregate stddev on columns"""
type pot_transfer_stddev_fields {
  cert_index: Float
  id: Float
  reserves: Float
  treasury: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "pot_transfer"
"""
input pot_transfer_stddev_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type pot_transfer_stddev_pop_fields {
  cert_index: Float
  id: Float
  reserves: Float
  treasury: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "pot_transfer"
"""
input pot_transfer_stddev_pop_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type pot_transfer_stddev_samp_fields {
  cert_index: Float
  id: Float
  reserves: Float
  treasury: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "pot_transfer"
"""
input pot_transfer_stddev_samp_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type pot_transfer_sum_fields {
  cert_index: Int
  id: bigint
  reserves: numeric
  treasury: numeric
  tx_id: bigint
}

"""
order by sum() on columns of table "pot_transfer"
"""
input pot_transfer_sum_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""
update columns of table "pot_transfer"
"""
enum pot_transfer_update_column {
  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  reserves

  """column name"""
  treasury

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type pot_transfer_var_pop_fields {
  cert_index: Float
  id: Float
  reserves: Float
  treasury: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "pot_transfer"
"""
input pot_transfer_var_pop_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type pot_transfer_var_samp_fields {
  cert_index: Float
  id: Float
  reserves: Float
  treasury: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "pot_transfer"
"""
input pot_transfer_var_samp_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type pot_transfer_variance_fields {
  cert_index: Float
  id: Float
  reserves: Float
  treasury: Float
  tx_id: Float
}

"""
order by variance() on columns of table "pot_transfer"
"""
input pot_transfer_variance_order_by {
  cert_index: order_by
  id: order_by
  reserves: order_by
  treasury: order_by
  tx_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "Asset"
  """
  Asset(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): [Asset!]!

  """
  fetch aggregated fields from the table: "Asset"
  """
  Asset_aggregate(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): Asset_aggregate!

  """fetch data from the table: "Asset" using primary key columns"""
  Asset_by_pk(assetId: bytea!): Asset

  """
  fetch data from the table: "ada_pots"
  """
  ada_pots(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): [ada_pots!]!

  """
  fetch aggregated fields from the table: "ada_pots"
  """
  ada_pots_aggregate(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): ada_pots_aggregate!

  """fetch data from the table: "ada_pots" using primary key columns"""
  ada_pots_by_pk(id: bigint!): ada_pots

  """
  fetch data from the table: "admin_user"
  """
  admin_user(
    """distinct select on columns"""
    distinct_on: [admin_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [admin_user_order_by!]

    """filter the rows returned"""
    where: admin_user_bool_exp
  ): [admin_user!]!

  """
  fetch aggregated fields from the table: "admin_user"
  """
  admin_user_aggregate(
    """distinct select on columns"""
    distinct_on: [admin_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [admin_user_order_by!]

    """filter the rows returned"""
    where: admin_user_bool_exp
  ): admin_user_aggregate!

  """fetch data from the table: "admin_user" using primary key columns"""
  admin_user_by_pk(id: bigint!): admin_user

  """
  fetch data from the table: "block"
  """
  block(
    """distinct select on columns"""
    distinct_on: [block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): [block!]!

  """
  fetch aggregated fields from the table: "block"
  """
  block_aggregate(
    """distinct select on columns"""
    distinct_on: [block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): block_aggregate!

  """fetch data from the table: "block" using primary key columns"""
  block_by_pk(id: bigint!): block

  """
  fetch data from the table: "collateral_tx_in"
  """
  collateral_tx_in(
    """distinct select on columns"""
    distinct_on: [collateral_tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collateral_tx_in_order_by!]

    """filter the rows returned"""
    where: collateral_tx_in_bool_exp
  ): [collateral_tx_in!]!

  """
  fetch aggregated fields from the table: "collateral_tx_in"
  """
  collateral_tx_in_aggregate(
    """distinct select on columns"""
    distinct_on: [collateral_tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collateral_tx_in_order_by!]

    """filter the rows returned"""
    where: collateral_tx_in_bool_exp
  ): collateral_tx_in_aggregate!

  """
  fetch data from the table: "collateral_tx_in" using primary key columns
  """
  collateral_tx_in_by_pk(id: bigint!): collateral_tx_in

  """
  fetch data from the table: "delegation"
  """
  delegation(
    """distinct select on columns"""
    distinct_on: [delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delegation_order_by!]

    """filter the rows returned"""
    where: delegation_bool_exp
  ): [delegation!]!

  """
  fetch aggregated fields from the table: "delegation"
  """
  delegation_aggregate(
    """distinct select on columns"""
    distinct_on: [delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delegation_order_by!]

    """filter the rows returned"""
    where: delegation_bool_exp
  ): delegation_aggregate!

  """fetch data from the table: "delegation" using primary key columns"""
  delegation_by_pk(id: bigint!): delegation

  """
  fetch data from the table: "epoch"
  """
  epoch(
    """distinct select on columns"""
    distinct_on: [epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_order_by!]

    """filter the rows returned"""
    where: epoch_bool_exp
  ): [epoch!]!

  """
  fetch aggregated fields from the table: "epoch"
  """
  epoch_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_order_by!]

    """filter the rows returned"""
    where: epoch_bool_exp
  ): epoch_aggregate!

  """fetch data from the table: "epoch" using primary key columns"""
  epoch_by_pk(id: bigint!): epoch

  """
  fetch data from the table: "epoch_param"
  """
  epoch_param(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): [epoch_param!]!

  """
  fetch aggregated fields from the table: "epoch_param"
  """
  epoch_param_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): epoch_param_aggregate!

  """fetch data from the table: "epoch_param" using primary key columns"""
  epoch_param_by_pk(id: bigint!): epoch_param

  """
  fetch data from the table: "epoch_reward_total_received"
  """
  epoch_reward_total_received(
    """distinct select on columns"""
    distinct_on: [epoch_reward_total_received_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_reward_total_received_order_by!]

    """filter the rows returned"""
    where: epoch_reward_total_received_bool_exp
  ): [epoch_reward_total_received!]!

  """
  fetch aggregated fields from the table: "epoch_reward_total_received"
  """
  epoch_reward_total_received_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_reward_total_received_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_reward_total_received_order_by!]

    """filter the rows returned"""
    where: epoch_reward_total_received_bool_exp
  ): epoch_reward_total_received_aggregate!

  """
  fetch data from the table: "epoch_reward_total_received" using primary key columns
  """
  epoch_reward_total_received_by_pk(id: bigint!): epoch_reward_total_received

  """
  fetch data from the table: "epoch_stake"
  """
  epoch_stake(
    """distinct select on columns"""
    distinct_on: [epoch_stake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_stake_order_by!]

    """filter the rows returned"""
    where: epoch_stake_bool_exp
  ): [epoch_stake!]!

  """
  fetch aggregated fields from the table: "epoch_stake"
  """
  epoch_stake_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_stake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_stake_order_by!]

    """filter the rows returned"""
    where: epoch_stake_bool_exp
  ): epoch_stake_aggregate!

  """fetch data from the table: "epoch_stake" using primary key columns"""
  epoch_stake_by_pk(id: bigint!): epoch_stake

  """
  fetch data from the table: "epoch_sync_time"
  """
  epoch_sync_time(
    """distinct select on columns"""
    distinct_on: [epoch_sync_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_sync_time_order_by!]

    """filter the rows returned"""
    where: epoch_sync_time_bool_exp
  ): [epoch_sync_time!]!

  """
  fetch aggregated fields from the table: "epoch_sync_time"
  """
  epoch_sync_time_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_sync_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_sync_time_order_by!]

    """filter the rows returned"""
    where: epoch_sync_time_bool_exp
  ): epoch_sync_time_aggregate!

  """fetch data from the table: "epoch_sync_time" using primary key columns"""
  epoch_sync_time_by_pk(id: bigint!): epoch_sync_time

  """
  fetch data from the table: "ma_tx_mint"
  """
  ma_tx_mint(
    """distinct select on columns"""
    distinct_on: [ma_tx_mint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_mint_order_by!]

    """filter the rows returned"""
    where: ma_tx_mint_bool_exp
  ): [ma_tx_mint!]!

  """
  fetch aggregated fields from the table: "ma_tx_mint"
  """
  ma_tx_mint_aggregate(
    """distinct select on columns"""
    distinct_on: [ma_tx_mint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_mint_order_by!]

    """filter the rows returned"""
    where: ma_tx_mint_bool_exp
  ): ma_tx_mint_aggregate!

  """fetch data from the table: "ma_tx_mint" using primary key columns"""
  ma_tx_mint_by_pk(id: bigint!): ma_tx_mint

  """
  fetch data from the table: "ma_tx_out"
  """
  ma_tx_out(
    """distinct select on columns"""
    distinct_on: [ma_tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_out_order_by!]

    """filter the rows returned"""
    where: ma_tx_out_bool_exp
  ): [ma_tx_out!]!

  """
  fetch aggregated fields from the table: "ma_tx_out"
  """
  ma_tx_out_aggregate(
    """distinct select on columns"""
    distinct_on: [ma_tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_out_order_by!]

    """filter the rows returned"""
    where: ma_tx_out_bool_exp
  ): ma_tx_out_aggregate!

  """fetch data from the table: "ma_tx_out" using primary key columns"""
  ma_tx_out_by_pk(id: bigint!): ma_tx_out

  """
  fetch data from the table: "meta"
  """
  meta(
    """distinct select on columns"""
    distinct_on: [meta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [meta_order_by!]

    """filter the rows returned"""
    where: meta_bool_exp
  ): [meta!]!

  """
  fetch aggregated fields from the table: "meta"
  """
  meta_aggregate(
    """distinct select on columns"""
    distinct_on: [meta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [meta_order_by!]

    """filter the rows returned"""
    where: meta_bool_exp
  ): meta_aggregate!

  """fetch data from the table: "meta" using primary key columns"""
  meta_by_pk(id: bigint!): meta

  """
  fetch data from the table: "orphaned_reward"
  """
  orphaned_reward(
    """distinct select on columns"""
    distinct_on: [orphaned_reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orphaned_reward_order_by!]

    """filter the rows returned"""
    where: orphaned_reward_bool_exp
  ): [orphaned_reward!]!

  """
  fetch aggregated fields from the table: "orphaned_reward"
  """
  orphaned_reward_aggregate(
    """distinct select on columns"""
    distinct_on: [orphaned_reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orphaned_reward_order_by!]

    """filter the rows returned"""
    where: orphaned_reward_bool_exp
  ): orphaned_reward_aggregate!

  """fetch data from the table: "orphaned_reward" using primary key columns"""
  orphaned_reward_by_pk(id: bigint!): orphaned_reward

  """
  fetch data from the table: "param_proposal"
  """
  param_proposal(
    """distinct select on columns"""
    distinct_on: [param_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [param_proposal_order_by!]

    """filter the rows returned"""
    where: param_proposal_bool_exp
  ): [param_proposal!]!

  """
  fetch aggregated fields from the table: "param_proposal"
  """
  param_proposal_aggregate(
    """distinct select on columns"""
    distinct_on: [param_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [param_proposal_order_by!]

    """filter the rows returned"""
    where: param_proposal_bool_exp
  ): param_proposal_aggregate!

  """fetch data from the table: "param_proposal" using primary key columns"""
  param_proposal_by_pk(id: bigint!): param_proposal

  """
  fetch data from the table: "pool_hash"
  """
  pool_hash(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): [pool_hash!]!

  """
  fetch aggregated fields from the table: "pool_hash"
  """
  pool_hash_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): pool_hash_aggregate!

  """fetch data from the table: "pool_hash" using primary key columns"""
  pool_hash_by_pk(id: bigint!): pool_hash

  """
  fetch data from the table: "pool_metadata_ref"
  """
  pool_metadata_ref(
    """distinct select on columns"""
    distinct_on: [pool_metadata_ref_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_metadata_ref_order_by!]

    """filter the rows returned"""
    where: pool_metadata_ref_bool_exp
  ): [pool_metadata_ref!]!

  """
  fetch aggregated fields from the table: "pool_metadata_ref"
  """
  pool_metadata_ref_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_metadata_ref_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_metadata_ref_order_by!]

    """filter the rows returned"""
    where: pool_metadata_ref_bool_exp
  ): pool_metadata_ref_aggregate!

  """
  fetch data from the table: "pool_metadata_ref" using primary key columns
  """
  pool_metadata_ref_by_pk(id: bigint!): pool_metadata_ref

  """
  fetch data from the table: "pool_offline_data"
  """
  pool_offline_data(
    """distinct select on columns"""
    distinct_on: [pool_offline_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_data_order_by!]

    """filter the rows returned"""
    where: pool_offline_data_bool_exp
  ): [pool_offline_data!]!

  """
  fetch aggregated fields from the table: "pool_offline_data"
  """
  pool_offline_data_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_offline_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_data_order_by!]

    """filter the rows returned"""
    where: pool_offline_data_bool_exp
  ): pool_offline_data_aggregate!

  """
  fetch data from the table: "pool_offline_data" using primary key columns
  """
  pool_offline_data_by_pk(id: bigint!): pool_offline_data

  """
  fetch data from the table: "pool_offline_fetch_error"
  """
  pool_offline_fetch_error(
    """distinct select on columns"""
    distinct_on: [pool_offline_fetch_error_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_fetch_error_order_by!]

    """filter the rows returned"""
    where: pool_offline_fetch_error_bool_exp
  ): [pool_offline_fetch_error!]!

  """
  fetch aggregated fields from the table: "pool_offline_fetch_error"
  """
  pool_offline_fetch_error_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_offline_fetch_error_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_fetch_error_order_by!]

    """filter the rows returned"""
    where: pool_offline_fetch_error_bool_exp
  ): pool_offline_fetch_error_aggregate!

  """
  fetch data from the table: "pool_offline_fetch_error" using primary key columns
  """
  pool_offline_fetch_error_by_pk(id: bigint!): pool_offline_fetch_error

  """
  fetch data from the table: "pool_owner"
  """
  pool_owner(
    """distinct select on columns"""
    distinct_on: [pool_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_owner_order_by!]

    """filter the rows returned"""
    where: pool_owner_bool_exp
  ): [pool_owner!]!

  """
  fetch aggregated fields from the table: "pool_owner"
  """
  pool_owner_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_owner_order_by!]

    """filter the rows returned"""
    where: pool_owner_bool_exp
  ): pool_owner_aggregate!

  """fetch data from the table: "pool_owner" using primary key columns"""
  pool_owner_by_pk(id: bigint!): pool_owner

  """
  fetch data from the table: "pool_relay"
  """
  pool_relay(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): [pool_relay!]!

  """
  fetch aggregated fields from the table: "pool_relay"
  """
  pool_relay_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): pool_relay_aggregate!

  """fetch data from the table: "pool_relay" using primary key columns"""
  pool_relay_by_pk(id: bigint!): pool_relay

  """
  fetch data from the table: "pool_retire"
  """
  pool_retire(
    """distinct select on columns"""
    distinct_on: [pool_retire_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_retire_order_by!]

    """filter the rows returned"""
    where: pool_retire_bool_exp
  ): [pool_retire!]!

  """
  fetch aggregated fields from the table: "pool_retire"
  """
  pool_retire_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_retire_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_retire_order_by!]

    """filter the rows returned"""
    where: pool_retire_bool_exp
  ): pool_retire_aggregate!

  """fetch data from the table: "pool_retire" using primary key columns"""
  pool_retire_by_pk(id: bigint!): pool_retire

  """
  fetch data from the table: "pool_update"
  """
  pool_update(
    """distinct select on columns"""
    distinct_on: [pool_update_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_update_order_by!]

    """filter the rows returned"""
    where: pool_update_bool_exp
  ): [pool_update!]!

  """
  fetch aggregated fields from the table: "pool_update"
  """
  pool_update_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_update_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_update_order_by!]

    """filter the rows returned"""
    where: pool_update_bool_exp
  ): pool_update_aggregate!

  """fetch data from the table: "pool_update" using primary key columns"""
  pool_update_by_pk(id: bigint!): pool_update

  """
  fetch data from the table: "pot_transfer"
  """
  pot_transfer(
    """distinct select on columns"""
    distinct_on: [pot_transfer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pot_transfer_order_by!]

    """filter the rows returned"""
    where: pot_transfer_bool_exp
  ): [pot_transfer!]!

  """
  fetch aggregated fields from the table: "pot_transfer"
  """
  pot_transfer_aggregate(
    """distinct select on columns"""
    distinct_on: [pot_transfer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pot_transfer_order_by!]

    """filter the rows returned"""
    where: pot_transfer_bool_exp
  ): pot_transfer_aggregate!

  """fetch data from the table: "pot_transfer" using primary key columns"""
  pot_transfer_by_pk(id: bigint!): pot_transfer

  """
  fetch data from the table: "redeemer"
  """
  redeemer(
    """distinct select on columns"""
    distinct_on: [redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redeemer_order_by!]

    """filter the rows returned"""
    where: redeemer_bool_exp
  ): [redeemer!]!

  """
  fetch aggregated fields from the table: "redeemer"
  """
  redeemer_aggregate(
    """distinct select on columns"""
    distinct_on: [redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redeemer_order_by!]

    """filter the rows returned"""
    where: redeemer_bool_exp
  ): redeemer_aggregate!

  """fetch data from the table: "redeemer" using primary key columns"""
  redeemer_by_pk(id: bigint!): redeemer

  """
  fetch data from the table: "reserve"
  """
  reserve(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): [reserve!]!

  """
  fetch aggregated fields from the table: "reserve"
  """
  reserve_aggregate(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): reserve_aggregate!

  """fetch data from the table: "reserve" using primary key columns"""
  reserve_by_pk(id: bigint!): reserve

  """
  fetch data from the table: "reserved_pool_ticker"
  """
  reserved_pool_ticker(
    """distinct select on columns"""
    distinct_on: [reserved_pool_ticker_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserved_pool_ticker_order_by!]

    """filter the rows returned"""
    where: reserved_pool_ticker_bool_exp
  ): [reserved_pool_ticker!]!

  """
  fetch aggregated fields from the table: "reserved_pool_ticker"
  """
  reserved_pool_ticker_aggregate(
    """distinct select on columns"""
    distinct_on: [reserved_pool_ticker_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserved_pool_ticker_order_by!]

    """filter the rows returned"""
    where: reserved_pool_ticker_bool_exp
  ): reserved_pool_ticker_aggregate!

  """
  fetch data from the table: "reserved_pool_ticker" using primary key columns
  """
  reserved_pool_ticker_by_pk(id: bigint!): reserved_pool_ticker

  """
  fetch data from the table: "reward"
  """
  reward(
    """distinct select on columns"""
    distinct_on: [reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reward_order_by!]

    """filter the rows returned"""
    where: reward_bool_exp
  ): [reward!]!

  """
  fetch aggregated fields from the table: "reward"
  """
  reward_aggregate(
    """distinct select on columns"""
    distinct_on: [reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reward_order_by!]

    """filter the rows returned"""
    where: reward_bool_exp
  ): reward_aggregate!

  """fetch data from the table: "reward" using primary key columns"""
  reward_by_pk(id: bigint!): reward

  """
  fetch data from the table: "schema_version"
  """
  schema_version(
    """distinct select on columns"""
    distinct_on: [schema_version_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schema_version_order_by!]

    """filter the rows returned"""
    where: schema_version_bool_exp
  ): [schema_version!]!

  """
  fetch aggregated fields from the table: "schema_version"
  """
  schema_version_aggregate(
    """distinct select on columns"""
    distinct_on: [schema_version_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schema_version_order_by!]

    """filter the rows returned"""
    where: schema_version_bool_exp
  ): schema_version_aggregate!

  """fetch data from the table: "schema_version" using primary key columns"""
  schema_version_by_pk(id: bigint!): schema_version

  """
  fetch data from the table: "script"
  """
  script(
    """distinct select on columns"""
    distinct_on: [script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [script_order_by!]

    """filter the rows returned"""
    where: script_bool_exp
  ): [script!]!

  """
  fetch aggregated fields from the table: "script"
  """
  script_aggregate(
    """distinct select on columns"""
    distinct_on: [script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [script_order_by!]

    """filter the rows returned"""
    where: script_bool_exp
  ): script_aggregate!

  """fetch data from the table: "script" using primary key columns"""
  script_by_pk(id: bigint!): script

  """
  fetch data from the table: "slot_leader"
  """
  slot_leader(
    """distinct select on columns"""
    distinct_on: [slot_leader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [slot_leader_order_by!]

    """filter the rows returned"""
    where: slot_leader_bool_exp
  ): [slot_leader!]!

  """
  fetch aggregated fields from the table: "slot_leader"
  """
  slot_leader_aggregate(
    """distinct select on columns"""
    distinct_on: [slot_leader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [slot_leader_order_by!]

    """filter the rows returned"""
    where: slot_leader_bool_exp
  ): slot_leader_aggregate!

  """fetch data from the table: "slot_leader" using primary key columns"""
  slot_leader_by_pk(id: bigint!): slot_leader

  """
  fetch data from the table: "stake_address"
  """
  stake_address(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): [stake_address!]!

  """
  fetch aggregated fields from the table: "stake_address"
  """
  stake_address_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): stake_address_aggregate!

  """fetch data from the table: "stake_address" using primary key columns"""
  stake_address_by_pk(id: bigint!): stake_address

  """
  fetch data from the table: "stake_deregistration"
  """
  stake_deregistration(
    """distinct select on columns"""
    distinct_on: [stake_deregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_deregistration_order_by!]

    """filter the rows returned"""
    where: stake_deregistration_bool_exp
  ): [stake_deregistration!]!

  """
  fetch aggregated fields from the table: "stake_deregistration"
  """
  stake_deregistration_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_deregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_deregistration_order_by!]

    """filter the rows returned"""
    where: stake_deregistration_bool_exp
  ): stake_deregistration_aggregate!

  """
  fetch data from the table: "stake_deregistration" using primary key columns
  """
  stake_deregistration_by_pk(id: bigint!): stake_deregistration

  """
  fetch data from the table: "stake_registration"
  """
  stake_registration(
    """distinct select on columns"""
    distinct_on: [stake_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_registration_order_by!]

    """filter the rows returned"""
    where: stake_registration_bool_exp
  ): [stake_registration!]!

  """
  fetch aggregated fields from the table: "stake_registration"
  """
  stake_registration_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_registration_order_by!]

    """filter the rows returned"""
    where: stake_registration_bool_exp
  ): stake_registration_aggregate!

  """
  fetch data from the table: "stake_registration" using primary key columns
  """
  stake_registration_by_pk(id: bigint!): stake_registration

  """
  fetch data from the table: "treasury"
  """
  treasury(
    """distinct select on columns"""
    distinct_on: [treasury_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_order_by!]

    """filter the rows returned"""
    where: treasury_bool_exp
  ): [treasury!]!

  """
  fetch aggregated fields from the table: "treasury"
  """
  treasury_aggregate(
    """distinct select on columns"""
    distinct_on: [treasury_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_order_by!]

    """filter the rows returned"""
    where: treasury_bool_exp
  ): treasury_aggregate!

  """fetch data from the table: "treasury" using primary key columns"""
  treasury_by_pk(id: bigint!): treasury

  """
  fetch data from the table: "tx"
  """
  tx(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): [tx!]!

  """
  fetch aggregated fields from the table: "tx"
  """
  tx_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): tx_aggregate!

  """fetch data from the table: "tx" using primary key columns"""
  tx_by_pk(id: bigint!): tx

  """
  fetch data from the table: "tx_in"
  """
  tx_in(
    """distinct select on columns"""
    distinct_on: [tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_in_order_by!]

    """filter the rows returned"""
    where: tx_in_bool_exp
  ): [tx_in!]!

  """
  fetch aggregated fields from the table: "tx_in"
  """
  tx_in_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_in_order_by!]

    """filter the rows returned"""
    where: tx_in_bool_exp
  ): tx_in_aggregate!

  """fetch data from the table: "tx_in" using primary key columns"""
  tx_in_by_pk(id: bigint!): tx_in

  """
  fetch data from the table: "tx_metadata"
  """
  tx_metadata(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): [tx_metadata!]!

  """
  fetch aggregated fields from the table: "tx_metadata"
  """
  tx_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): tx_metadata_aggregate!

  """fetch data from the table: "tx_metadata" using primary key columns"""
  tx_metadata_by_pk(id: bigint!): tx_metadata

  """
  fetch data from the table: "tx_out"
  """
  tx_out(
    """distinct select on columns"""
    distinct_on: [tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_out_order_by!]

    """filter the rows returned"""
    where: tx_out_bool_exp
  ): [tx_out!]!

  """
  fetch aggregated fields from the table: "tx_out"
  """
  tx_out_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_out_order_by!]

    """filter the rows returned"""
    where: tx_out_bool_exp
  ): tx_out_aggregate!

  """fetch data from the table: "tx_out" using primary key columns"""
  tx_out_by_pk(id: bigint!): tx_out

  """
  fetch data from the table: "utxo_byron_view"
  """
  utxo_byron_view(
    """distinct select on columns"""
    distinct_on: [utxo_byron_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_byron_view_order_by!]

    """filter the rows returned"""
    where: utxo_byron_view_bool_exp
  ): [utxo_byron_view!]!

  """
  fetch aggregated fields from the table: "utxo_byron_view"
  """
  utxo_byron_view_aggregate(
    """distinct select on columns"""
    distinct_on: [utxo_byron_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_byron_view_order_by!]

    """filter the rows returned"""
    where: utxo_byron_view_bool_exp
  ): utxo_byron_view_aggregate!

  """
  fetch data from the table: "utxo_view"
  """
  utxo_view(
    """distinct select on columns"""
    distinct_on: [utxo_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_view_order_by!]

    """filter the rows returned"""
    where: utxo_view_bool_exp
  ): [utxo_view!]!

  """
  fetch aggregated fields from the table: "utxo_view"
  """
  utxo_view_aggregate(
    """distinct select on columns"""
    distinct_on: [utxo_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_view_order_by!]

    """filter the rows returned"""
    where: utxo_view_bool_exp
  ): utxo_view_aggregate!

  """
  fetch data from the table: "withdrawal"
  """
  withdrawal(
    """distinct select on columns"""
    distinct_on: [withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [withdrawal_order_by!]

    """filter the rows returned"""
    where: withdrawal_bool_exp
  ): [withdrawal!]!

  """
  fetch aggregated fields from the table: "withdrawal"
  """
  withdrawal_aggregate(
    """distinct select on columns"""
    distinct_on: [withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [withdrawal_order_by!]

    """filter the rows returned"""
    where: withdrawal_bool_exp
  ): withdrawal_aggregate!

  """fetch data from the table: "withdrawal" using primary key columns"""
  withdrawal_by_pk(id: bigint!): withdrawal
}

"""
columns and relationships of "redeemer"
"""
type redeemer {
  fee: numeric!
  id: bigint!
  index: Int!
  purpose: scriptpurposetype!
  script_hash: bytea
  tx_id: bigint!
  unit_mem: bigint!
  unit_steps: bigint!
}

"""
aggregated selection of "redeemer"
"""
type redeemer_aggregate {
  aggregate: redeemer_aggregate_fields
  nodes: [redeemer!]!
}

"""
aggregate fields of "redeemer"
"""
type redeemer_aggregate_fields {
  avg: redeemer_avg_fields
  count(columns: [redeemer_select_column!], distinct: Boolean): Int
  max: redeemer_max_fields
  min: redeemer_min_fields
  stddev: redeemer_stddev_fields
  stddev_pop: redeemer_stddev_pop_fields
  stddev_samp: redeemer_stddev_samp_fields
  sum: redeemer_sum_fields
  var_pop: redeemer_var_pop_fields
  var_samp: redeemer_var_samp_fields
  variance: redeemer_variance_fields
}

"""
order by aggregate values of table "redeemer"
"""
input redeemer_aggregate_order_by {
  avg: redeemer_avg_order_by
  count: order_by
  max: redeemer_max_order_by
  min: redeemer_min_order_by
  stddev: redeemer_stddev_order_by
  stddev_pop: redeemer_stddev_pop_order_by
  stddev_samp: redeemer_stddev_samp_order_by
  sum: redeemer_sum_order_by
  var_pop: redeemer_var_pop_order_by
  var_samp: redeemer_var_samp_order_by
  variance: redeemer_variance_order_by
}

"""
input type for inserting array relation for remote table "redeemer"
"""
input redeemer_arr_rel_insert_input {
  data: [redeemer_insert_input!]!
  on_conflict: redeemer_on_conflict
}

"""aggregate avg on columns"""
type redeemer_avg_fields {
  fee: Float
  id: Float
  index: Float
  tx_id: Float
  unit_mem: Float
  unit_steps: Float
}

"""
order by avg() on columns of table "redeemer"
"""
input redeemer_avg_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""
Boolean expression to filter rows from the table "redeemer". All fields are combined with a logical 'AND'.
"""
input redeemer_bool_exp {
  _and: [redeemer_bool_exp]
  _not: redeemer_bool_exp
  _or: [redeemer_bool_exp]
  fee: numeric_comparison_exp
  id: bigint_comparison_exp
  index: Int_comparison_exp
  purpose: scriptpurposetype_comparison_exp
  script_hash: bytea_comparison_exp
  tx_id: bigint_comparison_exp
  unit_mem: bigint_comparison_exp
  unit_steps: bigint_comparison_exp
}

"""
unique or primary key constraints on table "redeemer"
"""
enum redeemer_constraint {
  """unique or primary key constraint"""
  redeemer_pkey

  """unique or primary key constraint"""
  unique_redeemer
}

"""
input type for incrementing integer column in table "redeemer"
"""
input redeemer_inc_input {
  fee: numeric
  id: bigint
  index: Int
  tx_id: bigint
  unit_mem: bigint
  unit_steps: bigint
}

"""
input type for inserting data into table "redeemer"
"""
input redeemer_insert_input {
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  script_hash: bytea
  tx_id: bigint
  unit_mem: bigint
  unit_steps: bigint
}

"""aggregate max on columns"""
type redeemer_max_fields {
  fee: numeric
  id: bigint
  index: Int
  tx_id: bigint
  unit_mem: bigint
  unit_steps: bigint
}

"""
order by max() on columns of table "redeemer"
"""
input redeemer_max_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""aggregate min on columns"""
type redeemer_min_fields {
  fee: numeric
  id: bigint
  index: Int
  tx_id: bigint
  unit_mem: bigint
  unit_steps: bigint
}

"""
order by min() on columns of table "redeemer"
"""
input redeemer_min_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""
response of any mutation on the table "redeemer"
"""
type redeemer_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [redeemer!]!
}

"""
input type for inserting object relation for remote table "redeemer"
"""
input redeemer_obj_rel_insert_input {
  data: redeemer_insert_input!
  on_conflict: redeemer_on_conflict
}

"""
on conflict condition type for table "redeemer"
"""
input redeemer_on_conflict {
  constraint: redeemer_constraint!
  update_columns: [redeemer_update_column!]!
  where: redeemer_bool_exp
}

"""
ordering options when selecting data from "redeemer"
"""
input redeemer_order_by {
  fee: order_by
  id: order_by
  index: order_by
  purpose: order_by
  script_hash: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""
primary key columns input for table: "redeemer"
"""
input redeemer_pk_columns_input {
  id: bigint!
}

"""
select columns of table "redeemer"
"""
enum redeemer_select_column {
  """column name"""
  fee

  """column name"""
  id

  """column name"""
  index

  """column name"""
  purpose

  """column name"""
  script_hash

  """column name"""
  tx_id

  """column name"""
  unit_mem

  """column name"""
  unit_steps
}

"""
input type for updating data in table "redeemer"
"""
input redeemer_set_input {
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  script_hash: bytea
  tx_id: bigint
  unit_mem: bigint
  unit_steps: bigint
}

"""aggregate stddev on columns"""
type redeemer_stddev_fields {
  fee: Float
  id: Float
  index: Float
  tx_id: Float
  unit_mem: Float
  unit_steps: Float
}

"""
order by stddev() on columns of table "redeemer"
"""
input redeemer_stddev_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""aggregate stddev_pop on columns"""
type redeemer_stddev_pop_fields {
  fee: Float
  id: Float
  index: Float
  tx_id: Float
  unit_mem: Float
  unit_steps: Float
}

"""
order by stddev_pop() on columns of table "redeemer"
"""
input redeemer_stddev_pop_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""aggregate stddev_samp on columns"""
type redeemer_stddev_samp_fields {
  fee: Float
  id: Float
  index: Float
  tx_id: Float
  unit_mem: Float
  unit_steps: Float
}

"""
order by stddev_samp() on columns of table "redeemer"
"""
input redeemer_stddev_samp_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""aggregate sum on columns"""
type redeemer_sum_fields {
  fee: numeric
  id: bigint
  index: Int
  tx_id: bigint
  unit_mem: bigint
  unit_steps: bigint
}

"""
order by sum() on columns of table "redeemer"
"""
input redeemer_sum_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""
update columns of table "redeemer"
"""
enum redeemer_update_column {
  """column name"""
  fee

  """column name"""
  id

  """column name"""
  index

  """column name"""
  purpose

  """column name"""
  script_hash

  """column name"""
  tx_id

  """column name"""
  unit_mem

  """column name"""
  unit_steps
}

"""aggregate var_pop on columns"""
type redeemer_var_pop_fields {
  fee: Float
  id: Float
  index: Float
  tx_id: Float
  unit_mem: Float
  unit_steps: Float
}

"""
order by var_pop() on columns of table "redeemer"
"""
input redeemer_var_pop_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""aggregate var_samp on columns"""
type redeemer_var_samp_fields {
  fee: Float
  id: Float
  index: Float
  tx_id: Float
  unit_mem: Float
  unit_steps: Float
}

"""
order by var_samp() on columns of table "redeemer"
"""
input redeemer_var_samp_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""aggregate variance on columns"""
type redeemer_variance_fields {
  fee: Float
  id: Float
  index: Float
  tx_id: Float
  unit_mem: Float
  unit_steps: Float
}

"""
order by variance() on columns of table "redeemer"
"""
input redeemer_variance_order_by {
  fee: order_by
  id: order_by
  index: order_by
  tx_id: order_by
  unit_mem: order_by
  unit_steps: order_by
}

"""
columns and relationships of "reserve"
"""
type reserve {
  addr_id: bigint!
  amount: numeric!
  cert_index: Int!
  id: bigint!
  tx_id: bigint!
}

"""
aggregated selection of "reserve"
"""
type reserve_aggregate {
  aggregate: reserve_aggregate_fields
  nodes: [reserve!]!
}

"""
aggregate fields of "reserve"
"""
type reserve_aggregate_fields {
  avg: reserve_avg_fields
  count(columns: [reserve_select_column!], distinct: Boolean): Int
  max: reserve_max_fields
  min: reserve_min_fields
  stddev: reserve_stddev_fields
  stddev_pop: reserve_stddev_pop_fields
  stddev_samp: reserve_stddev_samp_fields
  sum: reserve_sum_fields
  var_pop: reserve_var_pop_fields
  var_samp: reserve_var_samp_fields
  variance: reserve_variance_fields
}

"""
order by aggregate values of table "reserve"
"""
input reserve_aggregate_order_by {
  avg: reserve_avg_order_by
  count: order_by
  max: reserve_max_order_by
  min: reserve_min_order_by
  stddev: reserve_stddev_order_by
  stddev_pop: reserve_stddev_pop_order_by
  stddev_samp: reserve_stddev_samp_order_by
  sum: reserve_sum_order_by
  var_pop: reserve_var_pop_order_by
  var_samp: reserve_var_samp_order_by
  variance: reserve_variance_order_by
}

"""
input type for inserting array relation for remote table "reserve"
"""
input reserve_arr_rel_insert_input {
  data: [reserve_insert_input!]!
  on_conflict: reserve_on_conflict
}

"""aggregate avg on columns"""
type reserve_avg_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by avg() on columns of table "reserve"
"""
input reserve_avg_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "reserve". All fields are combined with a logical 'AND'.
"""
input reserve_bool_exp {
  _and: [reserve_bool_exp]
  _not: reserve_bool_exp
  _or: [reserve_bool_exp]
  addr_id: bigint_comparison_exp
  amount: numeric_comparison_exp
  cert_index: Int_comparison_exp
  id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "reserve"
"""
enum reserve_constraint {
  """unique or primary key constraint"""
  reserve_pkey

  """unique or primary key constraint"""
  unique_reserves
}

"""
input type for incrementing integer column in table "reserve"
"""
input reserve_inc_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "reserve"
"""
input reserve_insert_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate max on columns"""
type reserve_max_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "reserve"
"""
input reserve_max_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type reserve_min_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "reserve"
"""
input reserve_min_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "reserve"
"""
type reserve_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [reserve!]!
}

"""
input type for inserting object relation for remote table "reserve"
"""
input reserve_obj_rel_insert_input {
  data: reserve_insert_input!
  on_conflict: reserve_on_conflict
}

"""
on conflict condition type for table "reserve"
"""
input reserve_on_conflict {
  constraint: reserve_constraint!
  update_columns: [reserve_update_column!]!
  where: reserve_bool_exp
}

"""
ordering options when selecting data from "reserve"
"""
input reserve_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "reserve"
"""
input reserve_pk_columns_input {
  id: bigint!
}

"""
select columns of table "reserve"
"""
enum reserve_select_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  tx_id
}

"""
input type for updating data in table "reserve"
"""
input reserve_set_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type reserve_stddev_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "reserve"
"""
input reserve_stddev_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type reserve_stddev_pop_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "reserve"
"""
input reserve_stddev_pop_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type reserve_stddev_samp_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "reserve"
"""
input reserve_stddev_samp_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type reserve_sum_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "reserve"
"""
input reserve_sum_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
update columns of table "reserve"
"""
enum reserve_update_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type reserve_var_pop_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "reserve"
"""
input reserve_var_pop_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type reserve_var_samp_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "reserve"
"""
input reserve_var_samp_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type reserve_variance_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by variance() on columns of table "reserve"
"""
input reserve_variance_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
columns and relationships of "reserved_pool_ticker"
"""
type reserved_pool_ticker {
  id: bigint!
  name: String!
  pool_id: bigint!
}

"""
aggregated selection of "reserved_pool_ticker"
"""
type reserved_pool_ticker_aggregate {
  aggregate: reserved_pool_ticker_aggregate_fields
  nodes: [reserved_pool_ticker!]!
}

"""
aggregate fields of "reserved_pool_ticker"
"""
type reserved_pool_ticker_aggregate_fields {
  avg: reserved_pool_ticker_avg_fields
  count(columns: [reserved_pool_ticker_select_column!], distinct: Boolean): Int
  max: reserved_pool_ticker_max_fields
  min: reserved_pool_ticker_min_fields
  stddev: reserved_pool_ticker_stddev_fields
  stddev_pop: reserved_pool_ticker_stddev_pop_fields
  stddev_samp: reserved_pool_ticker_stddev_samp_fields
  sum: reserved_pool_ticker_sum_fields
  var_pop: reserved_pool_ticker_var_pop_fields
  var_samp: reserved_pool_ticker_var_samp_fields
  variance: reserved_pool_ticker_variance_fields
}

"""
order by aggregate values of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_aggregate_order_by {
  avg: reserved_pool_ticker_avg_order_by
  count: order_by
  max: reserved_pool_ticker_max_order_by
  min: reserved_pool_ticker_min_order_by
  stddev: reserved_pool_ticker_stddev_order_by
  stddev_pop: reserved_pool_ticker_stddev_pop_order_by
  stddev_samp: reserved_pool_ticker_stddev_samp_order_by
  sum: reserved_pool_ticker_sum_order_by
  var_pop: reserved_pool_ticker_var_pop_order_by
  var_samp: reserved_pool_ticker_var_samp_order_by
  variance: reserved_pool_ticker_variance_order_by
}

"""
input type for inserting array relation for remote table "reserved_pool_ticker"
"""
input reserved_pool_ticker_arr_rel_insert_input {
  data: [reserved_pool_ticker_insert_input!]!
  on_conflict: reserved_pool_ticker_on_conflict
}

"""aggregate avg on columns"""
type reserved_pool_ticker_avg_fields {
  id: Float
  pool_id: Float
}

"""
order by avg() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_avg_order_by {
  id: order_by
  pool_id: order_by
}

"""
Boolean expression to filter rows from the table "reserved_pool_ticker". All fields are combined with a logical 'AND'.
"""
input reserved_pool_ticker_bool_exp {
  _and: [reserved_pool_ticker_bool_exp]
  _not: reserved_pool_ticker_bool_exp
  _or: [reserved_pool_ticker_bool_exp]
  id: bigint_comparison_exp
  name: String_comparison_exp
  pool_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "reserved_pool_ticker"
"""
enum reserved_pool_ticker_constraint {
  """unique or primary key constraint"""
  reserved_pool_ticker_pkey

  """unique or primary key constraint"""
  unique_reserved_pool_ticker
}

"""
input type for incrementing integer column in table "reserved_pool_ticker"
"""
input reserved_pool_ticker_inc_input {
  id: bigint
  pool_id: bigint
}

"""
input type for inserting data into table "reserved_pool_ticker"
"""
input reserved_pool_ticker_insert_input {
  id: bigint
  name: String
  pool_id: bigint
}

"""aggregate max on columns"""
type reserved_pool_ticker_max_fields {
  id: bigint
  name: String
  pool_id: bigint
}

"""
order by max() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_max_order_by {
  id: order_by
  name: order_by
  pool_id: order_by
}

"""aggregate min on columns"""
type reserved_pool_ticker_min_fields {
  id: bigint
  name: String
  pool_id: bigint
}

"""
order by min() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_min_order_by {
  id: order_by
  name: order_by
  pool_id: order_by
}

"""
response of any mutation on the table "reserved_pool_ticker"
"""
type reserved_pool_ticker_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [reserved_pool_ticker!]!
}

"""
input type for inserting object relation for remote table "reserved_pool_ticker"
"""
input reserved_pool_ticker_obj_rel_insert_input {
  data: reserved_pool_ticker_insert_input!
  on_conflict: reserved_pool_ticker_on_conflict
}

"""
on conflict condition type for table "reserved_pool_ticker"
"""
input reserved_pool_ticker_on_conflict {
  constraint: reserved_pool_ticker_constraint!
  update_columns: [reserved_pool_ticker_update_column!]!
  where: reserved_pool_ticker_bool_exp
}

"""
ordering options when selecting data from "reserved_pool_ticker"
"""
input reserved_pool_ticker_order_by {
  id: order_by
  name: order_by
  pool_id: order_by
}

"""
primary key columns input for table: "reserved_pool_ticker"
"""
input reserved_pool_ticker_pk_columns_input {
  id: bigint!
}

"""
select columns of table "reserved_pool_ticker"
"""
enum reserved_pool_ticker_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  pool_id
}

"""
input type for updating data in table "reserved_pool_ticker"
"""
input reserved_pool_ticker_set_input {
  id: bigint
  name: String
  pool_id: bigint
}

"""aggregate stddev on columns"""
type reserved_pool_ticker_stddev_fields {
  id: Float
  pool_id: Float
}

"""
order by stddev() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_stddev_order_by {
  id: order_by
  pool_id: order_by
}

"""aggregate stddev_pop on columns"""
type reserved_pool_ticker_stddev_pop_fields {
  id: Float
  pool_id: Float
}

"""
order by stddev_pop() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_stddev_pop_order_by {
  id: order_by
  pool_id: order_by
}

"""aggregate stddev_samp on columns"""
type reserved_pool_ticker_stddev_samp_fields {
  id: Float
  pool_id: Float
}

"""
order by stddev_samp() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_stddev_samp_order_by {
  id: order_by
  pool_id: order_by
}

"""aggregate sum on columns"""
type reserved_pool_ticker_sum_fields {
  id: bigint
  pool_id: bigint
}

"""
order by sum() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_sum_order_by {
  id: order_by
  pool_id: order_by
}

"""
update columns of table "reserved_pool_ticker"
"""
enum reserved_pool_ticker_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  pool_id
}

"""aggregate var_pop on columns"""
type reserved_pool_ticker_var_pop_fields {
  id: Float
  pool_id: Float
}

"""
order by var_pop() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_var_pop_order_by {
  id: order_by
  pool_id: order_by
}

"""aggregate var_samp on columns"""
type reserved_pool_ticker_var_samp_fields {
  id: Float
  pool_id: Float
}

"""
order by var_samp() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_var_samp_order_by {
  id: order_by
  pool_id: order_by
}

"""aggregate variance on columns"""
type reserved_pool_ticker_variance_fields {
  id: Float
  pool_id: Float
}

"""
order by variance() on columns of table "reserved_pool_ticker"
"""
input reserved_pool_ticker_variance_order_by {
  id: order_by
  pool_id: order_by
}

"""
columns and relationships of "reward"
"""
type reward {
  addr_id: bigint!
  amount: numeric!
  earned_epoch: bigint!
  id: bigint!
  pool_id: bigint
  spendable_epoch: bigint!
  type: rewardtype!
}

"""
aggregated selection of "reward"
"""
type reward_aggregate {
  aggregate: reward_aggregate_fields
  nodes: [reward!]!
}

"""
aggregate fields of "reward"
"""
type reward_aggregate_fields {
  avg: reward_avg_fields
  count(columns: [reward_select_column!], distinct: Boolean): Int
  max: reward_max_fields
  min: reward_min_fields
  stddev: reward_stddev_fields
  stddev_pop: reward_stddev_pop_fields
  stddev_samp: reward_stddev_samp_fields
  sum: reward_sum_fields
  var_pop: reward_var_pop_fields
  var_samp: reward_var_samp_fields
  variance: reward_variance_fields
}

"""
order by aggregate values of table "reward"
"""
input reward_aggregate_order_by {
  avg: reward_avg_order_by
  count: order_by
  max: reward_max_order_by
  min: reward_min_order_by
  stddev: reward_stddev_order_by
  stddev_pop: reward_stddev_pop_order_by
  stddev_samp: reward_stddev_samp_order_by
  sum: reward_sum_order_by
  var_pop: reward_var_pop_order_by
  var_samp: reward_var_samp_order_by
  variance: reward_variance_order_by
}

"""
input type for inserting array relation for remote table "reward"
"""
input reward_arr_rel_insert_input {
  data: [reward_insert_input!]!
  on_conflict: reward_on_conflict
}

"""aggregate avg on columns"""
type reward_avg_fields {
  addr_id: Float
  amount: Float
  earned_epoch: Float
  id: Float
  pool_id: Float
  spendable_epoch: Float
}

"""
order by avg() on columns of table "reward"
"""
input reward_avg_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""
Boolean expression to filter rows from the table "reward". All fields are combined with a logical 'AND'.
"""
input reward_bool_exp {
  _and: [reward_bool_exp]
  _not: reward_bool_exp
  _or: [reward_bool_exp]
  addr_id: bigint_comparison_exp
  amount: numeric_comparison_exp
  earned_epoch: bigint_comparison_exp
  id: bigint_comparison_exp
  pool_id: bigint_comparison_exp
  spendable_epoch: bigint_comparison_exp
  type: rewardtype_comparison_exp
}

"""
unique or primary key constraints on table "reward"
"""
enum reward_constraint {
  """unique or primary key constraint"""
  reward_pkey

  """unique or primary key constraint"""
  unique_reward
}

"""
input type for incrementing integer column in table "reward"
"""
input reward_inc_input {
  addr_id: bigint
  amount: numeric
  earned_epoch: bigint
  id: bigint
  pool_id: bigint
  spendable_epoch: bigint
}

"""
input type for inserting data into table "reward"
"""
input reward_insert_input {
  addr_id: bigint
  amount: numeric
  earned_epoch: bigint
  id: bigint
  pool_id: bigint
  spendable_epoch: bigint
  type: rewardtype
}

"""aggregate max on columns"""
type reward_max_fields {
  addr_id: bigint
  amount: numeric
  earned_epoch: bigint
  id: bigint
  pool_id: bigint
  spendable_epoch: bigint
}

"""
order by max() on columns of table "reward"
"""
input reward_max_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""aggregate min on columns"""
type reward_min_fields {
  addr_id: bigint
  amount: numeric
  earned_epoch: bigint
  id: bigint
  pool_id: bigint
  spendable_epoch: bigint
}

"""
order by min() on columns of table "reward"
"""
input reward_min_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""
response of any mutation on the table "reward"
"""
type reward_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [reward!]!
}

"""
input type for inserting object relation for remote table "reward"
"""
input reward_obj_rel_insert_input {
  data: reward_insert_input!
  on_conflict: reward_on_conflict
}

"""
on conflict condition type for table "reward"
"""
input reward_on_conflict {
  constraint: reward_constraint!
  update_columns: [reward_update_column!]!
  where: reward_bool_exp
}

"""
ordering options when selecting data from "reward"
"""
input reward_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
  type: order_by
}

"""
primary key columns input for table: "reward"
"""
input reward_pk_columns_input {
  id: bigint!
}

"""
select columns of table "reward"
"""
enum reward_select_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  earned_epoch

  """column name"""
  id

  """column name"""
  pool_id

  """column name"""
  spendable_epoch

  """column name"""
  type
}

"""
input type for updating data in table "reward"
"""
input reward_set_input {
  addr_id: bigint
  amount: numeric
  earned_epoch: bigint
  id: bigint
  pool_id: bigint
  spendable_epoch: bigint
  type: rewardtype
}

"""aggregate stddev on columns"""
type reward_stddev_fields {
  addr_id: Float
  amount: Float
  earned_epoch: Float
  id: Float
  pool_id: Float
  spendable_epoch: Float
}

"""
order by stddev() on columns of table "reward"
"""
input reward_stddev_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""aggregate stddev_pop on columns"""
type reward_stddev_pop_fields {
  addr_id: Float
  amount: Float
  earned_epoch: Float
  id: Float
  pool_id: Float
  spendable_epoch: Float
}

"""
order by stddev_pop() on columns of table "reward"
"""
input reward_stddev_pop_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""aggregate stddev_samp on columns"""
type reward_stddev_samp_fields {
  addr_id: Float
  amount: Float
  earned_epoch: Float
  id: Float
  pool_id: Float
  spendable_epoch: Float
}

"""
order by stddev_samp() on columns of table "reward"
"""
input reward_stddev_samp_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""aggregate sum on columns"""
type reward_sum_fields {
  addr_id: bigint
  amount: numeric
  earned_epoch: bigint
  id: bigint
  pool_id: bigint
  spendable_epoch: bigint
}

"""
order by sum() on columns of table "reward"
"""
input reward_sum_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""
update columns of table "reward"
"""
enum reward_update_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  earned_epoch

  """column name"""
  id

  """column name"""
  pool_id

  """column name"""
  spendable_epoch

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type reward_var_pop_fields {
  addr_id: Float
  amount: Float
  earned_epoch: Float
  id: Float
  pool_id: Float
  spendable_epoch: Float
}

"""
order by var_pop() on columns of table "reward"
"""
input reward_var_pop_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""aggregate var_samp on columns"""
type reward_var_samp_fields {
  addr_id: Float
  amount: Float
  earned_epoch: Float
  id: Float
  pool_id: Float
  spendable_epoch: Float
}

"""
order by var_samp() on columns of table "reward"
"""
input reward_var_samp_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

"""aggregate variance on columns"""
type reward_variance_fields {
  addr_id: Float
  amount: Float
  earned_epoch: Float
  id: Float
  pool_id: Float
  spendable_epoch: Float
}

"""
order by variance() on columns of table "reward"
"""
input reward_variance_order_by {
  addr_id: order_by
  amount: order_by
  earned_epoch: order_by
  id: order_by
  pool_id: order_by
  spendable_epoch: order_by
}

scalar rewardtype

"""
expression to compare columns of type rewardtype. All fields are combined with logical 'AND'.
"""
input rewardtype_comparison_exp {
  _eq: rewardtype
  _gt: rewardtype
  _gte: rewardtype
  _in: [rewardtype!]
  _is_null: Boolean
  _lt: rewardtype
  _lte: rewardtype
  _neq: rewardtype
  _nin: [rewardtype!]
}

"""
columns and relationships of "schema_version"
"""
type schema_version {
  id: bigint!
  stage_one: bigint!
  stage_three: bigint!
  stage_two: bigint!
}

"""
aggregated selection of "schema_version"
"""
type schema_version_aggregate {
  aggregate: schema_version_aggregate_fields
  nodes: [schema_version!]!
}

"""
aggregate fields of "schema_version"
"""
type schema_version_aggregate_fields {
  avg: schema_version_avg_fields
  count(columns: [schema_version_select_column!], distinct: Boolean): Int
  max: schema_version_max_fields
  min: schema_version_min_fields
  stddev: schema_version_stddev_fields
  stddev_pop: schema_version_stddev_pop_fields
  stddev_samp: schema_version_stddev_samp_fields
  sum: schema_version_sum_fields
  var_pop: schema_version_var_pop_fields
  var_samp: schema_version_var_samp_fields
  variance: schema_version_variance_fields
}

"""
order by aggregate values of table "schema_version"
"""
input schema_version_aggregate_order_by {
  avg: schema_version_avg_order_by
  count: order_by
  max: schema_version_max_order_by
  min: schema_version_min_order_by
  stddev: schema_version_stddev_order_by
  stddev_pop: schema_version_stddev_pop_order_by
  stddev_samp: schema_version_stddev_samp_order_by
  sum: schema_version_sum_order_by
  var_pop: schema_version_var_pop_order_by
  var_samp: schema_version_var_samp_order_by
  variance: schema_version_variance_order_by
}

"""
input type for inserting array relation for remote table "schema_version"
"""
input schema_version_arr_rel_insert_input {
  data: [schema_version_insert_input!]!
  on_conflict: schema_version_on_conflict
}

"""aggregate avg on columns"""
type schema_version_avg_fields {
  id: Float
  stage_one: Float
  stage_three: Float
  stage_two: Float
}

"""
order by avg() on columns of table "schema_version"
"""
input schema_version_avg_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""
Boolean expression to filter rows from the table "schema_version". All fields are combined with a logical 'AND'.
"""
input schema_version_bool_exp {
  _and: [schema_version_bool_exp]
  _not: schema_version_bool_exp
  _or: [schema_version_bool_exp]
  id: bigint_comparison_exp
  stage_one: bigint_comparison_exp
  stage_three: bigint_comparison_exp
  stage_two: bigint_comparison_exp
}

"""
unique or primary key constraints on table "schema_version"
"""
enum schema_version_constraint {
  """unique or primary key constraint"""
  schema_version_pkey
}

"""
input type for incrementing integer column in table "schema_version"
"""
input schema_version_inc_input {
  id: bigint
  stage_one: bigint
  stage_three: bigint
  stage_two: bigint
}

"""
input type for inserting data into table "schema_version"
"""
input schema_version_insert_input {
  id: bigint
  stage_one: bigint
  stage_three: bigint
  stage_two: bigint
}

"""aggregate max on columns"""
type schema_version_max_fields {
  id: bigint
  stage_one: bigint
  stage_three: bigint
  stage_two: bigint
}

"""
order by max() on columns of table "schema_version"
"""
input schema_version_max_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""aggregate min on columns"""
type schema_version_min_fields {
  id: bigint
  stage_one: bigint
  stage_three: bigint
  stage_two: bigint
}

"""
order by min() on columns of table "schema_version"
"""
input schema_version_min_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""
response of any mutation on the table "schema_version"
"""
type schema_version_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [schema_version!]!
}

"""
input type for inserting object relation for remote table "schema_version"
"""
input schema_version_obj_rel_insert_input {
  data: schema_version_insert_input!
  on_conflict: schema_version_on_conflict
}

"""
on conflict condition type for table "schema_version"
"""
input schema_version_on_conflict {
  constraint: schema_version_constraint!
  update_columns: [schema_version_update_column!]!
  where: schema_version_bool_exp
}

"""
ordering options when selecting data from "schema_version"
"""
input schema_version_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""
primary key columns input for table: "schema_version"
"""
input schema_version_pk_columns_input {
  id: bigint!
}

"""
select columns of table "schema_version"
"""
enum schema_version_select_column {
  """column name"""
  id

  """column name"""
  stage_one

  """column name"""
  stage_three

  """column name"""
  stage_two
}

"""
input type for updating data in table "schema_version"
"""
input schema_version_set_input {
  id: bigint
  stage_one: bigint
  stage_three: bigint
  stage_two: bigint
}

"""aggregate stddev on columns"""
type schema_version_stddev_fields {
  id: Float
  stage_one: Float
  stage_three: Float
  stage_two: Float
}

"""
order by stddev() on columns of table "schema_version"
"""
input schema_version_stddev_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""aggregate stddev_pop on columns"""
type schema_version_stddev_pop_fields {
  id: Float
  stage_one: Float
  stage_three: Float
  stage_two: Float
}

"""
order by stddev_pop() on columns of table "schema_version"
"""
input schema_version_stddev_pop_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""aggregate stddev_samp on columns"""
type schema_version_stddev_samp_fields {
  id: Float
  stage_one: Float
  stage_three: Float
  stage_two: Float
}

"""
order by stddev_samp() on columns of table "schema_version"
"""
input schema_version_stddev_samp_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""aggregate sum on columns"""
type schema_version_sum_fields {
  id: bigint
  stage_one: bigint
  stage_three: bigint
  stage_two: bigint
}

"""
order by sum() on columns of table "schema_version"
"""
input schema_version_sum_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""
update columns of table "schema_version"
"""
enum schema_version_update_column {
  """column name"""
  id

  """column name"""
  stage_one

  """column name"""
  stage_three

  """column name"""
  stage_two
}

"""aggregate var_pop on columns"""
type schema_version_var_pop_fields {
  id: Float
  stage_one: Float
  stage_three: Float
  stage_two: Float
}

"""
order by var_pop() on columns of table "schema_version"
"""
input schema_version_var_pop_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""aggregate var_samp on columns"""
type schema_version_var_samp_fields {
  id: Float
  stage_one: Float
  stage_three: Float
  stage_two: Float
}

"""
order by var_samp() on columns of table "schema_version"
"""
input schema_version_var_samp_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""aggregate variance on columns"""
type schema_version_variance_fields {
  id: Float
  stage_one: Float
  stage_three: Float
  stage_two: Float
}

"""
order by variance() on columns of table "schema_version"
"""
input schema_version_variance_order_by {
  id: order_by
  stage_one: order_by
  stage_three: order_by
  stage_two: order_by
}

"""
columns and relationships of "script"
"""
type script {
  hash: bytea!
  id: bigint!
  serialised_size: Int
  tx_id: bigint!
  type: scripttype!
}

"""
aggregated selection of "script"
"""
type script_aggregate {
  aggregate: script_aggregate_fields
  nodes: [script!]!
}

"""
aggregate fields of "script"
"""
type script_aggregate_fields {
  avg: script_avg_fields
  count(columns: [script_select_column!], distinct: Boolean): Int
  max: script_max_fields
  min: script_min_fields
  stddev: script_stddev_fields
  stddev_pop: script_stddev_pop_fields
  stddev_samp: script_stddev_samp_fields
  sum: script_sum_fields
  var_pop: script_var_pop_fields
  var_samp: script_var_samp_fields
  variance: script_variance_fields
}

"""
order by aggregate values of table "script"
"""
input script_aggregate_order_by {
  avg: script_avg_order_by
  count: order_by
  max: script_max_order_by
  min: script_min_order_by
  stddev: script_stddev_order_by
  stddev_pop: script_stddev_pop_order_by
  stddev_samp: script_stddev_samp_order_by
  sum: script_sum_order_by
  var_pop: script_var_pop_order_by
  var_samp: script_var_samp_order_by
  variance: script_variance_order_by
}

"""
input type for inserting array relation for remote table "script"
"""
input script_arr_rel_insert_input {
  data: [script_insert_input!]!
  on_conflict: script_on_conflict
}

"""aggregate avg on columns"""
type script_avg_fields {
  id: Float
  serialised_size: Float
  tx_id: Float
}

"""
order by avg() on columns of table "script"
"""
input script_avg_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "script". All fields are combined with a logical 'AND'.
"""
input script_bool_exp {
  _and: [script_bool_exp]
  _not: script_bool_exp
  _or: [script_bool_exp]
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  serialised_size: Int_comparison_exp
  tx_id: bigint_comparison_exp
  type: scripttype_comparison_exp
}

"""
unique or primary key constraints on table "script"
"""
enum script_constraint {
  """unique or primary key constraint"""
  script_pkey

  """unique or primary key constraint"""
  unique_script
}

"""
input type for incrementing integer column in table "script"
"""
input script_inc_input {
  id: bigint
  serialised_size: Int
  tx_id: bigint
}

"""
input type for inserting data into table "script"
"""
input script_insert_input {
  hash: bytea
  id: bigint
  serialised_size: Int
  tx_id: bigint
  type: scripttype
}

"""aggregate max on columns"""
type script_max_fields {
  id: bigint
  serialised_size: Int
  tx_id: bigint
}

"""
order by max() on columns of table "script"
"""
input script_max_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type script_min_fields {
  id: bigint
  serialised_size: Int
  tx_id: bigint
}

"""
order by min() on columns of table "script"
"""
input script_min_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "script"
"""
type script_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [script!]!
}

"""
input type for inserting object relation for remote table "script"
"""
input script_obj_rel_insert_input {
  data: script_insert_input!
  on_conflict: script_on_conflict
}

"""
on conflict condition type for table "script"
"""
input script_on_conflict {
  constraint: script_constraint!
  update_columns: [script_update_column!]!
  where: script_bool_exp
}

"""
ordering options when selecting data from "script"
"""
input script_order_by {
  hash: order_by
  id: order_by
  serialised_size: order_by
  tx_id: order_by
  type: order_by
}

"""
primary key columns input for table: "script"
"""
input script_pk_columns_input {
  id: bigint!
}

"""
select columns of table "script"
"""
enum script_select_column {
  """column name"""
  hash

  """column name"""
  id

  """column name"""
  serialised_size

  """column name"""
  tx_id

  """column name"""
  type
}

"""
input type for updating data in table "script"
"""
input script_set_input {
  hash: bytea
  id: bigint
  serialised_size: Int
  tx_id: bigint
  type: scripttype
}

"""aggregate stddev on columns"""
type script_stddev_fields {
  id: Float
  serialised_size: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "script"
"""
input script_stddev_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type script_stddev_pop_fields {
  id: Float
  serialised_size: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "script"
"""
input script_stddev_pop_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type script_stddev_samp_fields {
  id: Float
  serialised_size: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "script"
"""
input script_stddev_samp_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type script_sum_fields {
  id: bigint
  serialised_size: Int
  tx_id: bigint
}

"""
order by sum() on columns of table "script"
"""
input script_sum_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""
update columns of table "script"
"""
enum script_update_column {
  """column name"""
  hash

  """column name"""
  id

  """column name"""
  serialised_size

  """column name"""
  tx_id

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type script_var_pop_fields {
  id: Float
  serialised_size: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "script"
"""
input script_var_pop_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type script_var_samp_fields {
  id: Float
  serialised_size: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "script"
"""
input script_var_samp_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type script_variance_fields {
  id: Float
  serialised_size: Float
  tx_id: Float
}

"""
order by variance() on columns of table "script"
"""
input script_variance_order_by {
  id: order_by
  serialised_size: order_by
  tx_id: order_by
}

scalar scriptpurposetype

"""
expression to compare columns of type scriptpurposetype. All fields are combined with logical 'AND'.
"""
input scriptpurposetype_comparison_exp {
  _eq: scriptpurposetype
  _gt: scriptpurposetype
  _gte: scriptpurposetype
  _in: [scriptpurposetype!]
  _is_null: Boolean
  _lt: scriptpurposetype
  _lte: scriptpurposetype
  _neq: scriptpurposetype
  _nin: [scriptpurposetype!]
}

scalar scripttype

"""
expression to compare columns of type scripttype. All fields are combined with logical 'AND'.
"""
input scripttype_comparison_exp {
  _eq: scripttype
  _gt: scripttype
  _gte: scripttype
  _in: [scripttype!]
  _is_null: Boolean
  _lt: scripttype
  _lte: scripttype
  _neq: scripttype
  _nin: [scripttype!]
}

"""
columns and relationships of "slot_leader"
"""
type slot_leader {
  description: String!
  hash: bytea!
  id: bigint!
  pool_hash_id: bigint
}

"""
aggregated selection of "slot_leader"
"""
type slot_leader_aggregate {
  aggregate: slot_leader_aggregate_fields
  nodes: [slot_leader!]!
}

"""
aggregate fields of "slot_leader"
"""
type slot_leader_aggregate_fields {
  avg: slot_leader_avg_fields
  count(columns: [slot_leader_select_column!], distinct: Boolean): Int
  max: slot_leader_max_fields
  min: slot_leader_min_fields
  stddev: slot_leader_stddev_fields
  stddev_pop: slot_leader_stddev_pop_fields
  stddev_samp: slot_leader_stddev_samp_fields
  sum: slot_leader_sum_fields
  var_pop: slot_leader_var_pop_fields
  var_samp: slot_leader_var_samp_fields
  variance: slot_leader_variance_fields
}

"""
order by aggregate values of table "slot_leader"
"""
input slot_leader_aggregate_order_by {
  avg: slot_leader_avg_order_by
  count: order_by
  max: slot_leader_max_order_by
  min: slot_leader_min_order_by
  stddev: slot_leader_stddev_order_by
  stddev_pop: slot_leader_stddev_pop_order_by
  stddev_samp: slot_leader_stddev_samp_order_by
  sum: slot_leader_sum_order_by
  var_pop: slot_leader_var_pop_order_by
  var_samp: slot_leader_var_samp_order_by
  variance: slot_leader_variance_order_by
}

"""
input type for inserting array relation for remote table "slot_leader"
"""
input slot_leader_arr_rel_insert_input {
  data: [slot_leader_insert_input!]!
  on_conflict: slot_leader_on_conflict
}

"""aggregate avg on columns"""
type slot_leader_avg_fields {
  id: Float
  pool_hash_id: Float
}

"""
order by avg() on columns of table "slot_leader"
"""
input slot_leader_avg_order_by {
  id: order_by
  pool_hash_id: order_by
}

"""
Boolean expression to filter rows from the table "slot_leader". All fields are combined with a logical 'AND'.
"""
input slot_leader_bool_exp {
  _and: [slot_leader_bool_exp]
  _not: slot_leader_bool_exp
  _or: [slot_leader_bool_exp]
  description: String_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  pool_hash_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "slot_leader"
"""
enum slot_leader_constraint {
  """unique or primary key constraint"""
  slot_leader_pkey

  """unique or primary key constraint"""
  unique_slot_leader
}

"""
input type for incrementing integer column in table "slot_leader"
"""
input slot_leader_inc_input {
  id: bigint
  pool_hash_id: bigint
}

"""
input type for inserting data into table "slot_leader"
"""
input slot_leader_insert_input {
  description: String
  hash: bytea
  id: bigint
  pool_hash_id: bigint
}

"""aggregate max on columns"""
type slot_leader_max_fields {
  description: String
  id: bigint
  pool_hash_id: bigint
}

"""
order by max() on columns of table "slot_leader"
"""
input slot_leader_max_order_by {
  description: order_by
  id: order_by
  pool_hash_id: order_by
}

"""aggregate min on columns"""
type slot_leader_min_fields {
  description: String
  id: bigint
  pool_hash_id: bigint
}

"""
order by min() on columns of table "slot_leader"
"""
input slot_leader_min_order_by {
  description: order_by
  id: order_by
  pool_hash_id: order_by
}

"""
response of any mutation on the table "slot_leader"
"""
type slot_leader_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [slot_leader!]!
}

"""
input type for inserting object relation for remote table "slot_leader"
"""
input slot_leader_obj_rel_insert_input {
  data: slot_leader_insert_input!
  on_conflict: slot_leader_on_conflict
}

"""
on conflict condition type for table "slot_leader"
"""
input slot_leader_on_conflict {
  constraint: slot_leader_constraint!
  update_columns: [slot_leader_update_column!]!
  where: slot_leader_bool_exp
}

"""
ordering options when selecting data from "slot_leader"
"""
input slot_leader_order_by {
  description: order_by
  hash: order_by
  id: order_by
  pool_hash_id: order_by
}

"""
primary key columns input for table: "slot_leader"
"""
input slot_leader_pk_columns_input {
  id: bigint!
}

"""
select columns of table "slot_leader"
"""
enum slot_leader_select_column {
  """column name"""
  description

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  pool_hash_id
}

"""
input type for updating data in table "slot_leader"
"""
input slot_leader_set_input {
  description: String
  hash: bytea
  id: bigint
  pool_hash_id: bigint
}

"""aggregate stddev on columns"""
type slot_leader_stddev_fields {
  id: Float
  pool_hash_id: Float
}

"""
order by stddev() on columns of table "slot_leader"
"""
input slot_leader_stddev_order_by {
  id: order_by
  pool_hash_id: order_by
}

"""aggregate stddev_pop on columns"""
type slot_leader_stddev_pop_fields {
  id: Float
  pool_hash_id: Float
}

"""
order by stddev_pop() on columns of table "slot_leader"
"""
input slot_leader_stddev_pop_order_by {
  id: order_by
  pool_hash_id: order_by
}

"""aggregate stddev_samp on columns"""
type slot_leader_stddev_samp_fields {
  id: Float
  pool_hash_id: Float
}

"""
order by stddev_samp() on columns of table "slot_leader"
"""
input slot_leader_stddev_samp_order_by {
  id: order_by
  pool_hash_id: order_by
}

"""aggregate sum on columns"""
type slot_leader_sum_fields {
  id: bigint
  pool_hash_id: bigint
}

"""
order by sum() on columns of table "slot_leader"
"""
input slot_leader_sum_order_by {
  id: order_by
  pool_hash_id: order_by
}

"""
update columns of table "slot_leader"
"""
enum slot_leader_update_column {
  """column name"""
  description

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  pool_hash_id
}

"""aggregate var_pop on columns"""
type slot_leader_var_pop_fields {
  id: Float
  pool_hash_id: Float
}

"""
order by var_pop() on columns of table "slot_leader"
"""
input slot_leader_var_pop_order_by {
  id: order_by
  pool_hash_id: order_by
}

"""aggregate var_samp on columns"""
type slot_leader_var_samp_fields {
  id: Float
  pool_hash_id: Float
}

"""
order by var_samp() on columns of table "slot_leader"
"""
input slot_leader_var_samp_order_by {
  id: order_by
  pool_hash_id: order_by
}

"""aggregate variance on columns"""
type slot_leader_variance_fields {
  id: Float
  pool_hash_id: Float
}

"""
order by variance() on columns of table "slot_leader"
"""
input slot_leader_variance_order_by {
  id: order_by
  pool_hash_id: order_by
}

scalar smallint

"""
expression to compare columns of type smallint. All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

"""
columns and relationships of "stake_address"
"""
type stake_address {
  hash_raw: bytea!
  id: bigint!
  registered_tx_id: bigint!
  script_hash: bytea
  view: String!
}

"""
aggregated selection of "stake_address"
"""
type stake_address_aggregate {
  aggregate: stake_address_aggregate_fields
  nodes: [stake_address!]!
}

"""
aggregate fields of "stake_address"
"""
type stake_address_aggregate_fields {
  avg: stake_address_avg_fields
  count(columns: [stake_address_select_column!], distinct: Boolean): Int
  max: stake_address_max_fields
  min: stake_address_min_fields
  stddev: stake_address_stddev_fields
  stddev_pop: stake_address_stddev_pop_fields
  stddev_samp: stake_address_stddev_samp_fields
  sum: stake_address_sum_fields
  var_pop: stake_address_var_pop_fields
  var_samp: stake_address_var_samp_fields
  variance: stake_address_variance_fields
}

"""
order by aggregate values of table "stake_address"
"""
input stake_address_aggregate_order_by {
  avg: stake_address_avg_order_by
  count: order_by
  max: stake_address_max_order_by
  min: stake_address_min_order_by
  stddev: stake_address_stddev_order_by
  stddev_pop: stake_address_stddev_pop_order_by
  stddev_samp: stake_address_stddev_samp_order_by
  sum: stake_address_sum_order_by
  var_pop: stake_address_var_pop_order_by
  var_samp: stake_address_var_samp_order_by
  variance: stake_address_variance_order_by
}

"""
input type for inserting array relation for remote table "stake_address"
"""
input stake_address_arr_rel_insert_input {
  data: [stake_address_insert_input!]!
  on_conflict: stake_address_on_conflict
}

"""aggregate avg on columns"""
type stake_address_avg_fields {
  id: Float
  registered_tx_id: Float
}

"""
order by avg() on columns of table "stake_address"
"""
input stake_address_avg_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""
Boolean expression to filter rows from the table "stake_address". All fields are combined with a logical 'AND'.
"""
input stake_address_bool_exp {
  _and: [stake_address_bool_exp]
  _not: stake_address_bool_exp
  _or: [stake_address_bool_exp]
  hash_raw: bytea_comparison_exp
  id: bigint_comparison_exp
  registered_tx_id: bigint_comparison_exp
  script_hash: bytea_comparison_exp
  view: String_comparison_exp
}

"""
unique or primary key constraints on table "stake_address"
"""
enum stake_address_constraint {
  """unique or primary key constraint"""
  stake_address_pkey

  """unique or primary key constraint"""
  unique_stake_address
}

"""
input type for incrementing integer column in table "stake_address"
"""
input stake_address_inc_input {
  id: bigint
  registered_tx_id: bigint
}

"""
input type for inserting data into table "stake_address"
"""
input stake_address_insert_input {
  hash_raw: bytea
  id: bigint
  registered_tx_id: bigint
  script_hash: bytea
  view: String
}

"""aggregate max on columns"""
type stake_address_max_fields {
  id: bigint
  registered_tx_id: bigint
  view: String
}

"""
order by max() on columns of table "stake_address"
"""
input stake_address_max_order_by {
  id: order_by
  registered_tx_id: order_by
  view: order_by
}

"""aggregate min on columns"""
type stake_address_min_fields {
  id: bigint
  registered_tx_id: bigint
  view: String
}

"""
order by min() on columns of table "stake_address"
"""
input stake_address_min_order_by {
  id: order_by
  registered_tx_id: order_by
  view: order_by
}

"""
response of any mutation on the table "stake_address"
"""
type stake_address_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [stake_address!]!
}

"""
input type for inserting object relation for remote table "stake_address"
"""
input stake_address_obj_rel_insert_input {
  data: stake_address_insert_input!
  on_conflict: stake_address_on_conflict
}

"""
on conflict condition type for table "stake_address"
"""
input stake_address_on_conflict {
  constraint: stake_address_constraint!
  update_columns: [stake_address_update_column!]!
  where: stake_address_bool_exp
}

"""
ordering options when selecting data from "stake_address"
"""
input stake_address_order_by {
  hash_raw: order_by
  id: order_by
  registered_tx_id: order_by
  script_hash: order_by
  view: order_by
}

"""
primary key columns input for table: "stake_address"
"""
input stake_address_pk_columns_input {
  id: bigint!
}

"""
select columns of table "stake_address"
"""
enum stake_address_select_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  registered_tx_id

  """column name"""
  script_hash

  """column name"""
  view
}

"""
input type for updating data in table "stake_address"
"""
input stake_address_set_input {
  hash_raw: bytea
  id: bigint
  registered_tx_id: bigint
  script_hash: bytea
  view: String
}

"""aggregate stddev on columns"""
type stake_address_stddev_fields {
  id: Float
  registered_tx_id: Float
}

"""
order by stddev() on columns of table "stake_address"
"""
input stake_address_stddev_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type stake_address_stddev_pop_fields {
  id: Float
  registered_tx_id: Float
}

"""
order by stddev_pop() on columns of table "stake_address"
"""
input stake_address_stddev_pop_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type stake_address_stddev_samp_fields {
  id: Float
  registered_tx_id: Float
}

"""
order by stddev_samp() on columns of table "stake_address"
"""
input stake_address_stddev_samp_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""aggregate sum on columns"""
type stake_address_sum_fields {
  id: bigint
  registered_tx_id: bigint
}

"""
order by sum() on columns of table "stake_address"
"""
input stake_address_sum_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""
update columns of table "stake_address"
"""
enum stake_address_update_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  registered_tx_id

  """column name"""
  script_hash

  """column name"""
  view
}

"""aggregate var_pop on columns"""
type stake_address_var_pop_fields {
  id: Float
  registered_tx_id: Float
}

"""
order by var_pop() on columns of table "stake_address"
"""
input stake_address_var_pop_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""aggregate var_samp on columns"""
type stake_address_var_samp_fields {
  id: Float
  registered_tx_id: Float
}

"""
order by var_samp() on columns of table "stake_address"
"""
input stake_address_var_samp_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""aggregate variance on columns"""
type stake_address_variance_fields {
  id: Float
  registered_tx_id: Float
}

"""
order by variance() on columns of table "stake_address"
"""
input stake_address_variance_order_by {
  id: order_by
  registered_tx_id: order_by
}

"""
columns and relationships of "stake_deregistration"
"""
type stake_deregistration {
  addr_id: bigint!
  cert_index: Int!
  epoch_no: Int!
  id: bigint!
  redeemer_id: bigint
  tx_id: bigint!
}

"""
aggregated selection of "stake_deregistration"
"""
type stake_deregistration_aggregate {
  aggregate: stake_deregistration_aggregate_fields
  nodes: [stake_deregistration!]!
}

"""
aggregate fields of "stake_deregistration"
"""
type stake_deregistration_aggregate_fields {
  avg: stake_deregistration_avg_fields
  count(columns: [stake_deregistration_select_column!], distinct: Boolean): Int
  max: stake_deregistration_max_fields
  min: stake_deregistration_min_fields
  stddev: stake_deregistration_stddev_fields
  stddev_pop: stake_deregistration_stddev_pop_fields
  stddev_samp: stake_deregistration_stddev_samp_fields
  sum: stake_deregistration_sum_fields
  var_pop: stake_deregistration_var_pop_fields
  var_samp: stake_deregistration_var_samp_fields
  variance: stake_deregistration_variance_fields
}

"""
order by aggregate values of table "stake_deregistration"
"""
input stake_deregistration_aggregate_order_by {
  avg: stake_deregistration_avg_order_by
  count: order_by
  max: stake_deregistration_max_order_by
  min: stake_deregistration_min_order_by
  stddev: stake_deregistration_stddev_order_by
  stddev_pop: stake_deregistration_stddev_pop_order_by
  stddev_samp: stake_deregistration_stddev_samp_order_by
  sum: stake_deregistration_sum_order_by
  var_pop: stake_deregistration_var_pop_order_by
  var_samp: stake_deregistration_var_samp_order_by
  variance: stake_deregistration_variance_order_by
}

"""
input type for inserting array relation for remote table "stake_deregistration"
"""
input stake_deregistration_arr_rel_insert_input {
  data: [stake_deregistration_insert_input!]!
  on_conflict: stake_deregistration_on_conflict
}

"""aggregate avg on columns"""
type stake_deregistration_avg_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by avg() on columns of table "stake_deregistration"
"""
input stake_deregistration_avg_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "stake_deregistration". All fields are combined with a logical 'AND'.
"""
input stake_deregistration_bool_exp {
  _and: [stake_deregistration_bool_exp]
  _not: stake_deregistration_bool_exp
  _or: [stake_deregistration_bool_exp]
  addr_id: bigint_comparison_exp
  cert_index: Int_comparison_exp
  epoch_no: Int_comparison_exp
  id: bigint_comparison_exp
  redeemer_id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "stake_deregistration"
"""
enum stake_deregistration_constraint {
  """unique or primary key constraint"""
  stake_deregistration_pkey

  """unique or primary key constraint"""
  unique_stake_deregistration
}

"""
input type for incrementing integer column in table "stake_deregistration"
"""
input stake_deregistration_inc_input {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "stake_deregistration"
"""
input stake_deregistration_insert_input {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""aggregate max on columns"""
type stake_deregistration_max_fields {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "stake_deregistration"
"""
input stake_deregistration_max_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type stake_deregistration_min_fields {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "stake_deregistration"
"""
input stake_deregistration_min_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "stake_deregistration"
"""
type stake_deregistration_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [stake_deregistration!]!
}

"""
input type for inserting object relation for remote table "stake_deregistration"
"""
input stake_deregistration_obj_rel_insert_input {
  data: stake_deregistration_insert_input!
  on_conflict: stake_deregistration_on_conflict
}

"""
on conflict condition type for table "stake_deregistration"
"""
input stake_deregistration_on_conflict {
  constraint: stake_deregistration_constraint!
  update_columns: [stake_deregistration_update_column!]!
  where: stake_deregistration_bool_exp
}

"""
ordering options when selecting data from "stake_deregistration"
"""
input stake_deregistration_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "stake_deregistration"
"""
input stake_deregistration_pk_columns_input {
  id: bigint!
}

"""
select columns of table "stake_deregistration"
"""
enum stake_deregistration_select_column {
  """column name"""
  addr_id

  """column name"""
  cert_index

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  redeemer_id

  """column name"""
  tx_id
}

"""
input type for updating data in table "stake_deregistration"
"""
input stake_deregistration_set_input {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type stake_deregistration_stddev_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "stake_deregistration"
"""
input stake_deregistration_stddev_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type stake_deregistration_stddev_pop_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "stake_deregistration"
"""
input stake_deregistration_stddev_pop_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type stake_deregistration_stddev_samp_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "stake_deregistration"
"""
input stake_deregistration_stddev_samp_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type stake_deregistration_sum_fields {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "stake_deregistration"
"""
input stake_deregistration_sum_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
update columns of table "stake_deregistration"
"""
enum stake_deregistration_update_column {
  """column name"""
  addr_id

  """column name"""
  cert_index

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  redeemer_id

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type stake_deregistration_var_pop_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "stake_deregistration"
"""
input stake_deregistration_var_pop_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type stake_deregistration_var_samp_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "stake_deregistration"
"""
input stake_deregistration_var_samp_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type stake_deregistration_variance_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by variance() on columns of table "stake_deregistration"
"""
input stake_deregistration_variance_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
columns and relationships of "stake_registration"
"""
type stake_registration {
  addr_id: bigint!
  cert_index: Int!
  epoch_no: Int!
  id: bigint!
  tx_id: bigint!
}

"""
aggregated selection of "stake_registration"
"""
type stake_registration_aggregate {
  aggregate: stake_registration_aggregate_fields
  nodes: [stake_registration!]!
}

"""
aggregate fields of "stake_registration"
"""
type stake_registration_aggregate_fields {
  avg: stake_registration_avg_fields
  count(columns: [stake_registration_select_column!], distinct: Boolean): Int
  max: stake_registration_max_fields
  min: stake_registration_min_fields
  stddev: stake_registration_stddev_fields
  stddev_pop: stake_registration_stddev_pop_fields
  stddev_samp: stake_registration_stddev_samp_fields
  sum: stake_registration_sum_fields
  var_pop: stake_registration_var_pop_fields
  var_samp: stake_registration_var_samp_fields
  variance: stake_registration_variance_fields
}

"""
order by aggregate values of table "stake_registration"
"""
input stake_registration_aggregate_order_by {
  avg: stake_registration_avg_order_by
  count: order_by
  max: stake_registration_max_order_by
  min: stake_registration_min_order_by
  stddev: stake_registration_stddev_order_by
  stddev_pop: stake_registration_stddev_pop_order_by
  stddev_samp: stake_registration_stddev_samp_order_by
  sum: stake_registration_sum_order_by
  var_pop: stake_registration_var_pop_order_by
  var_samp: stake_registration_var_samp_order_by
  variance: stake_registration_variance_order_by
}

"""
input type for inserting array relation for remote table "stake_registration"
"""
input stake_registration_arr_rel_insert_input {
  data: [stake_registration_insert_input!]!
  on_conflict: stake_registration_on_conflict
}

"""aggregate avg on columns"""
type stake_registration_avg_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  tx_id: Float
}

"""
order by avg() on columns of table "stake_registration"
"""
input stake_registration_avg_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "stake_registration". All fields are combined with a logical 'AND'.
"""
input stake_registration_bool_exp {
  _and: [stake_registration_bool_exp]
  _not: stake_registration_bool_exp
  _or: [stake_registration_bool_exp]
  addr_id: bigint_comparison_exp
  cert_index: Int_comparison_exp
  epoch_no: Int_comparison_exp
  id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "stake_registration"
"""
enum stake_registration_constraint {
  """unique or primary key constraint"""
  stake_registration_pkey

  """unique or primary key constraint"""
  unique_stake_registration
}

"""
input type for incrementing integer column in table "stake_registration"
"""
input stake_registration_inc_input {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "stake_registration"
"""
input stake_registration_insert_input {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  tx_id: bigint
}

"""aggregate max on columns"""
type stake_registration_max_fields {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "stake_registration"
"""
input stake_registration_max_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type stake_registration_min_fields {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "stake_registration"
"""
input stake_registration_min_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "stake_registration"
"""
type stake_registration_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [stake_registration!]!
}

"""
input type for inserting object relation for remote table "stake_registration"
"""
input stake_registration_obj_rel_insert_input {
  data: stake_registration_insert_input!
  on_conflict: stake_registration_on_conflict
}

"""
on conflict condition type for table "stake_registration"
"""
input stake_registration_on_conflict {
  constraint: stake_registration_constraint!
  update_columns: [stake_registration_update_column!]!
  where: stake_registration_bool_exp
}

"""
ordering options when selecting data from "stake_registration"
"""
input stake_registration_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "stake_registration"
"""
input stake_registration_pk_columns_input {
  id: bigint!
}

"""
select columns of table "stake_registration"
"""
enum stake_registration_select_column {
  """column name"""
  addr_id

  """column name"""
  cert_index

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  tx_id
}

"""
input type for updating data in table "stake_registration"
"""
input stake_registration_set_input {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type stake_registration_stddev_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "stake_registration"
"""
input stake_registration_stddev_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type stake_registration_stddev_pop_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "stake_registration"
"""
input stake_registration_stddev_pop_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type stake_registration_stddev_samp_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "stake_registration"
"""
input stake_registration_stddev_samp_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type stake_registration_sum_fields {
  addr_id: bigint
  cert_index: Int
  epoch_no: Int
  id: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "stake_registration"
"""
input stake_registration_sum_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""
update columns of table "stake_registration"
"""
enum stake_registration_update_column {
  """column name"""
  addr_id

  """column name"""
  cert_index

  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type stake_registration_var_pop_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "stake_registration"
"""
input stake_registration_var_pop_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type stake_registration_var_samp_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "stake_registration"
"""
input stake_registration_var_samp_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type stake_registration_variance_fields {
  addr_id: Float
  cert_index: Float
  epoch_no: Float
  id: Float
  tx_id: Float
}

"""
order by variance() on columns of table "stake_registration"
"""
input stake_registration_variance_order_by {
  addr_id: order_by
  cert_index: order_by
  epoch_no: order_by
  id: order_by
  tx_id: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "Asset"
  """
  Asset(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): [Asset!]!

  """
  fetch aggregated fields from the table: "Asset"
  """
  Asset_aggregate(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): Asset_aggregate!

  """fetch data from the table: "Asset" using primary key columns"""
  Asset_by_pk(assetId: bytea!): Asset

  """
  fetch data from the table: "ada_pots"
  """
  ada_pots(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): [ada_pots!]!

  """
  fetch aggregated fields from the table: "ada_pots"
  """
  ada_pots_aggregate(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): ada_pots_aggregate!

  """fetch data from the table: "ada_pots" using primary key columns"""
  ada_pots_by_pk(id: bigint!): ada_pots

  """
  fetch data from the table: "admin_user"
  """
  admin_user(
    """distinct select on columns"""
    distinct_on: [admin_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [admin_user_order_by!]

    """filter the rows returned"""
    where: admin_user_bool_exp
  ): [admin_user!]!

  """
  fetch aggregated fields from the table: "admin_user"
  """
  admin_user_aggregate(
    """distinct select on columns"""
    distinct_on: [admin_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [admin_user_order_by!]

    """filter the rows returned"""
    where: admin_user_bool_exp
  ): admin_user_aggregate!

  """fetch data from the table: "admin_user" using primary key columns"""
  admin_user_by_pk(id: bigint!): admin_user

  """
  fetch data from the table: "block"
  """
  block(
    """distinct select on columns"""
    distinct_on: [block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): [block!]!

  """
  fetch aggregated fields from the table: "block"
  """
  block_aggregate(
    """distinct select on columns"""
    distinct_on: [block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [block_order_by!]

    """filter the rows returned"""
    where: block_bool_exp
  ): block_aggregate!

  """fetch data from the table: "block" using primary key columns"""
  block_by_pk(id: bigint!): block

  """
  fetch data from the table: "collateral_tx_in"
  """
  collateral_tx_in(
    """distinct select on columns"""
    distinct_on: [collateral_tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collateral_tx_in_order_by!]

    """filter the rows returned"""
    where: collateral_tx_in_bool_exp
  ): [collateral_tx_in!]!

  """
  fetch aggregated fields from the table: "collateral_tx_in"
  """
  collateral_tx_in_aggregate(
    """distinct select on columns"""
    distinct_on: [collateral_tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collateral_tx_in_order_by!]

    """filter the rows returned"""
    where: collateral_tx_in_bool_exp
  ): collateral_tx_in_aggregate!

  """
  fetch data from the table: "collateral_tx_in" using primary key columns
  """
  collateral_tx_in_by_pk(id: bigint!): collateral_tx_in

  """
  fetch data from the table: "delegation"
  """
  delegation(
    """distinct select on columns"""
    distinct_on: [delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delegation_order_by!]

    """filter the rows returned"""
    where: delegation_bool_exp
  ): [delegation!]!

  """
  fetch aggregated fields from the table: "delegation"
  """
  delegation_aggregate(
    """distinct select on columns"""
    distinct_on: [delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delegation_order_by!]

    """filter the rows returned"""
    where: delegation_bool_exp
  ): delegation_aggregate!

  """fetch data from the table: "delegation" using primary key columns"""
  delegation_by_pk(id: bigint!): delegation

  """
  fetch data from the table: "epoch"
  """
  epoch(
    """distinct select on columns"""
    distinct_on: [epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_order_by!]

    """filter the rows returned"""
    where: epoch_bool_exp
  ): [epoch!]!

  """
  fetch aggregated fields from the table: "epoch"
  """
  epoch_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_order_by!]

    """filter the rows returned"""
    where: epoch_bool_exp
  ): epoch_aggregate!

  """fetch data from the table: "epoch" using primary key columns"""
  epoch_by_pk(id: bigint!): epoch

  """
  fetch data from the table: "epoch_param"
  """
  epoch_param(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): [epoch_param!]!

  """
  fetch aggregated fields from the table: "epoch_param"
  """
  epoch_param_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): epoch_param_aggregate!

  """fetch data from the table: "epoch_param" using primary key columns"""
  epoch_param_by_pk(id: bigint!): epoch_param

  """
  fetch data from the table: "epoch_reward_total_received"
  """
  epoch_reward_total_received(
    """distinct select on columns"""
    distinct_on: [epoch_reward_total_received_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_reward_total_received_order_by!]

    """filter the rows returned"""
    where: epoch_reward_total_received_bool_exp
  ): [epoch_reward_total_received!]!

  """
  fetch aggregated fields from the table: "epoch_reward_total_received"
  """
  epoch_reward_total_received_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_reward_total_received_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_reward_total_received_order_by!]

    """filter the rows returned"""
    where: epoch_reward_total_received_bool_exp
  ): epoch_reward_total_received_aggregate!

  """
  fetch data from the table: "epoch_reward_total_received" using primary key columns
  """
  epoch_reward_total_received_by_pk(id: bigint!): epoch_reward_total_received

  """
  fetch data from the table: "epoch_stake"
  """
  epoch_stake(
    """distinct select on columns"""
    distinct_on: [epoch_stake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_stake_order_by!]

    """filter the rows returned"""
    where: epoch_stake_bool_exp
  ): [epoch_stake!]!

  """
  fetch aggregated fields from the table: "epoch_stake"
  """
  epoch_stake_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_stake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_stake_order_by!]

    """filter the rows returned"""
    where: epoch_stake_bool_exp
  ): epoch_stake_aggregate!

  """fetch data from the table: "epoch_stake" using primary key columns"""
  epoch_stake_by_pk(id: bigint!): epoch_stake

  """
  fetch data from the table: "epoch_sync_time"
  """
  epoch_sync_time(
    """distinct select on columns"""
    distinct_on: [epoch_sync_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_sync_time_order_by!]

    """filter the rows returned"""
    where: epoch_sync_time_bool_exp
  ): [epoch_sync_time!]!

  """
  fetch aggregated fields from the table: "epoch_sync_time"
  """
  epoch_sync_time_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_sync_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_sync_time_order_by!]

    """filter the rows returned"""
    where: epoch_sync_time_bool_exp
  ): epoch_sync_time_aggregate!

  """fetch data from the table: "epoch_sync_time" using primary key columns"""
  epoch_sync_time_by_pk(id: bigint!): epoch_sync_time

  """
  fetch data from the table: "ma_tx_mint"
  """
  ma_tx_mint(
    """distinct select on columns"""
    distinct_on: [ma_tx_mint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_mint_order_by!]

    """filter the rows returned"""
    where: ma_tx_mint_bool_exp
  ): [ma_tx_mint!]!

  """
  fetch aggregated fields from the table: "ma_tx_mint"
  """
  ma_tx_mint_aggregate(
    """distinct select on columns"""
    distinct_on: [ma_tx_mint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_mint_order_by!]

    """filter the rows returned"""
    where: ma_tx_mint_bool_exp
  ): ma_tx_mint_aggregate!

  """fetch data from the table: "ma_tx_mint" using primary key columns"""
  ma_tx_mint_by_pk(id: bigint!): ma_tx_mint

  """
  fetch data from the table: "ma_tx_out"
  """
  ma_tx_out(
    """distinct select on columns"""
    distinct_on: [ma_tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_out_order_by!]

    """filter the rows returned"""
    where: ma_tx_out_bool_exp
  ): [ma_tx_out!]!

  """
  fetch aggregated fields from the table: "ma_tx_out"
  """
  ma_tx_out_aggregate(
    """distinct select on columns"""
    distinct_on: [ma_tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ma_tx_out_order_by!]

    """filter the rows returned"""
    where: ma_tx_out_bool_exp
  ): ma_tx_out_aggregate!

  """fetch data from the table: "ma_tx_out" using primary key columns"""
  ma_tx_out_by_pk(id: bigint!): ma_tx_out

  """
  fetch data from the table: "meta"
  """
  meta(
    """distinct select on columns"""
    distinct_on: [meta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [meta_order_by!]

    """filter the rows returned"""
    where: meta_bool_exp
  ): [meta!]!

  """
  fetch aggregated fields from the table: "meta"
  """
  meta_aggregate(
    """distinct select on columns"""
    distinct_on: [meta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [meta_order_by!]

    """filter the rows returned"""
    where: meta_bool_exp
  ): meta_aggregate!

  """fetch data from the table: "meta" using primary key columns"""
  meta_by_pk(id: bigint!): meta

  """
  fetch data from the table: "orphaned_reward"
  """
  orphaned_reward(
    """distinct select on columns"""
    distinct_on: [orphaned_reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orphaned_reward_order_by!]

    """filter the rows returned"""
    where: orphaned_reward_bool_exp
  ): [orphaned_reward!]!

  """
  fetch aggregated fields from the table: "orphaned_reward"
  """
  orphaned_reward_aggregate(
    """distinct select on columns"""
    distinct_on: [orphaned_reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orphaned_reward_order_by!]

    """filter the rows returned"""
    where: orphaned_reward_bool_exp
  ): orphaned_reward_aggregate!

  """fetch data from the table: "orphaned_reward" using primary key columns"""
  orphaned_reward_by_pk(id: bigint!): orphaned_reward

  """
  fetch data from the table: "param_proposal"
  """
  param_proposal(
    """distinct select on columns"""
    distinct_on: [param_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [param_proposal_order_by!]

    """filter the rows returned"""
    where: param_proposal_bool_exp
  ): [param_proposal!]!

  """
  fetch aggregated fields from the table: "param_proposal"
  """
  param_proposal_aggregate(
    """distinct select on columns"""
    distinct_on: [param_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [param_proposal_order_by!]

    """filter the rows returned"""
    where: param_proposal_bool_exp
  ): param_proposal_aggregate!

  """fetch data from the table: "param_proposal" using primary key columns"""
  param_proposal_by_pk(id: bigint!): param_proposal

  """
  fetch data from the table: "pool_hash"
  """
  pool_hash(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): [pool_hash!]!

  """
  fetch aggregated fields from the table: "pool_hash"
  """
  pool_hash_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): pool_hash_aggregate!

  """fetch data from the table: "pool_hash" using primary key columns"""
  pool_hash_by_pk(id: bigint!): pool_hash

  """
  fetch data from the table: "pool_metadata_ref"
  """
  pool_metadata_ref(
    """distinct select on columns"""
    distinct_on: [pool_metadata_ref_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_metadata_ref_order_by!]

    """filter the rows returned"""
    where: pool_metadata_ref_bool_exp
  ): [pool_metadata_ref!]!

  """
  fetch aggregated fields from the table: "pool_metadata_ref"
  """
  pool_metadata_ref_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_metadata_ref_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_metadata_ref_order_by!]

    """filter the rows returned"""
    where: pool_metadata_ref_bool_exp
  ): pool_metadata_ref_aggregate!

  """
  fetch data from the table: "pool_metadata_ref" using primary key columns
  """
  pool_metadata_ref_by_pk(id: bigint!): pool_metadata_ref

  """
  fetch data from the table: "pool_offline_data"
  """
  pool_offline_data(
    """distinct select on columns"""
    distinct_on: [pool_offline_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_data_order_by!]

    """filter the rows returned"""
    where: pool_offline_data_bool_exp
  ): [pool_offline_data!]!

  """
  fetch aggregated fields from the table: "pool_offline_data"
  """
  pool_offline_data_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_offline_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_data_order_by!]

    """filter the rows returned"""
    where: pool_offline_data_bool_exp
  ): pool_offline_data_aggregate!

  """
  fetch data from the table: "pool_offline_data" using primary key columns
  """
  pool_offline_data_by_pk(id: bigint!): pool_offline_data

  """
  fetch data from the table: "pool_offline_fetch_error"
  """
  pool_offline_fetch_error(
    """distinct select on columns"""
    distinct_on: [pool_offline_fetch_error_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_fetch_error_order_by!]

    """filter the rows returned"""
    where: pool_offline_fetch_error_bool_exp
  ): [pool_offline_fetch_error!]!

  """
  fetch aggregated fields from the table: "pool_offline_fetch_error"
  """
  pool_offline_fetch_error_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_offline_fetch_error_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_offline_fetch_error_order_by!]

    """filter the rows returned"""
    where: pool_offline_fetch_error_bool_exp
  ): pool_offline_fetch_error_aggregate!

  """
  fetch data from the table: "pool_offline_fetch_error" using primary key columns
  """
  pool_offline_fetch_error_by_pk(id: bigint!): pool_offline_fetch_error

  """
  fetch data from the table: "pool_owner"
  """
  pool_owner(
    """distinct select on columns"""
    distinct_on: [pool_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_owner_order_by!]

    """filter the rows returned"""
    where: pool_owner_bool_exp
  ): [pool_owner!]!

  """
  fetch aggregated fields from the table: "pool_owner"
  """
  pool_owner_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_owner_order_by!]

    """filter the rows returned"""
    where: pool_owner_bool_exp
  ): pool_owner_aggregate!

  """fetch data from the table: "pool_owner" using primary key columns"""
  pool_owner_by_pk(id: bigint!): pool_owner

  """
  fetch data from the table: "pool_relay"
  """
  pool_relay(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): [pool_relay!]!

  """
  fetch aggregated fields from the table: "pool_relay"
  """
  pool_relay_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): pool_relay_aggregate!

  """fetch data from the table: "pool_relay" using primary key columns"""
  pool_relay_by_pk(id: bigint!): pool_relay

  """
  fetch data from the table: "pool_retire"
  """
  pool_retire(
    """distinct select on columns"""
    distinct_on: [pool_retire_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_retire_order_by!]

    """filter the rows returned"""
    where: pool_retire_bool_exp
  ): [pool_retire!]!

  """
  fetch aggregated fields from the table: "pool_retire"
  """
  pool_retire_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_retire_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_retire_order_by!]

    """filter the rows returned"""
    where: pool_retire_bool_exp
  ): pool_retire_aggregate!

  """fetch data from the table: "pool_retire" using primary key columns"""
  pool_retire_by_pk(id: bigint!): pool_retire

  """
  fetch data from the table: "pool_update"
  """
  pool_update(
    """distinct select on columns"""
    distinct_on: [pool_update_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_update_order_by!]

    """filter the rows returned"""
    where: pool_update_bool_exp
  ): [pool_update!]!

  """
  fetch aggregated fields from the table: "pool_update"
  """
  pool_update_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_update_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_update_order_by!]

    """filter the rows returned"""
    where: pool_update_bool_exp
  ): pool_update_aggregate!

  """fetch data from the table: "pool_update" using primary key columns"""
  pool_update_by_pk(id: bigint!): pool_update

  """
  fetch data from the table: "pot_transfer"
  """
  pot_transfer(
    """distinct select on columns"""
    distinct_on: [pot_transfer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pot_transfer_order_by!]

    """filter the rows returned"""
    where: pot_transfer_bool_exp
  ): [pot_transfer!]!

  """
  fetch aggregated fields from the table: "pot_transfer"
  """
  pot_transfer_aggregate(
    """distinct select on columns"""
    distinct_on: [pot_transfer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pot_transfer_order_by!]

    """filter the rows returned"""
    where: pot_transfer_bool_exp
  ): pot_transfer_aggregate!

  """fetch data from the table: "pot_transfer" using primary key columns"""
  pot_transfer_by_pk(id: bigint!): pot_transfer

  """
  fetch data from the table: "redeemer"
  """
  redeemer(
    """distinct select on columns"""
    distinct_on: [redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redeemer_order_by!]

    """filter the rows returned"""
    where: redeemer_bool_exp
  ): [redeemer!]!

  """
  fetch aggregated fields from the table: "redeemer"
  """
  redeemer_aggregate(
    """distinct select on columns"""
    distinct_on: [redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redeemer_order_by!]

    """filter the rows returned"""
    where: redeemer_bool_exp
  ): redeemer_aggregate!

  """fetch data from the table: "redeemer" using primary key columns"""
  redeemer_by_pk(id: bigint!): redeemer

  """
  fetch data from the table: "reserve"
  """
  reserve(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): [reserve!]!

  """
  fetch aggregated fields from the table: "reserve"
  """
  reserve_aggregate(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): reserve_aggregate!

  """fetch data from the table: "reserve" using primary key columns"""
  reserve_by_pk(id: bigint!): reserve

  """
  fetch data from the table: "reserved_pool_ticker"
  """
  reserved_pool_ticker(
    """distinct select on columns"""
    distinct_on: [reserved_pool_ticker_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserved_pool_ticker_order_by!]

    """filter the rows returned"""
    where: reserved_pool_ticker_bool_exp
  ): [reserved_pool_ticker!]!

  """
  fetch aggregated fields from the table: "reserved_pool_ticker"
  """
  reserved_pool_ticker_aggregate(
    """distinct select on columns"""
    distinct_on: [reserved_pool_ticker_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserved_pool_ticker_order_by!]

    """filter the rows returned"""
    where: reserved_pool_ticker_bool_exp
  ): reserved_pool_ticker_aggregate!

  """
  fetch data from the table: "reserved_pool_ticker" using primary key columns
  """
  reserved_pool_ticker_by_pk(id: bigint!): reserved_pool_ticker

  """
  fetch data from the table: "reward"
  """
  reward(
    """distinct select on columns"""
    distinct_on: [reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reward_order_by!]

    """filter the rows returned"""
    where: reward_bool_exp
  ): [reward!]!

  """
  fetch aggregated fields from the table: "reward"
  """
  reward_aggregate(
    """distinct select on columns"""
    distinct_on: [reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reward_order_by!]

    """filter the rows returned"""
    where: reward_bool_exp
  ): reward_aggregate!

  """fetch data from the table: "reward" using primary key columns"""
  reward_by_pk(id: bigint!): reward

  """
  fetch data from the table: "schema_version"
  """
  schema_version(
    """distinct select on columns"""
    distinct_on: [schema_version_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schema_version_order_by!]

    """filter the rows returned"""
    where: schema_version_bool_exp
  ): [schema_version!]!

  """
  fetch aggregated fields from the table: "schema_version"
  """
  schema_version_aggregate(
    """distinct select on columns"""
    distinct_on: [schema_version_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schema_version_order_by!]

    """filter the rows returned"""
    where: schema_version_bool_exp
  ): schema_version_aggregate!

  """fetch data from the table: "schema_version" using primary key columns"""
  schema_version_by_pk(id: bigint!): schema_version

  """
  fetch data from the table: "script"
  """
  script(
    """distinct select on columns"""
    distinct_on: [script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [script_order_by!]

    """filter the rows returned"""
    where: script_bool_exp
  ): [script!]!

  """
  fetch aggregated fields from the table: "script"
  """
  script_aggregate(
    """distinct select on columns"""
    distinct_on: [script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [script_order_by!]

    """filter the rows returned"""
    where: script_bool_exp
  ): script_aggregate!

  """fetch data from the table: "script" using primary key columns"""
  script_by_pk(id: bigint!): script

  """
  fetch data from the table: "slot_leader"
  """
  slot_leader(
    """distinct select on columns"""
    distinct_on: [slot_leader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [slot_leader_order_by!]

    """filter the rows returned"""
    where: slot_leader_bool_exp
  ): [slot_leader!]!

  """
  fetch aggregated fields from the table: "slot_leader"
  """
  slot_leader_aggregate(
    """distinct select on columns"""
    distinct_on: [slot_leader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [slot_leader_order_by!]

    """filter the rows returned"""
    where: slot_leader_bool_exp
  ): slot_leader_aggregate!

  """fetch data from the table: "slot_leader" using primary key columns"""
  slot_leader_by_pk(id: bigint!): slot_leader

  """
  fetch data from the table: "stake_address"
  """
  stake_address(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): [stake_address!]!

  """
  fetch aggregated fields from the table: "stake_address"
  """
  stake_address_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): stake_address_aggregate!

  """fetch data from the table: "stake_address" using primary key columns"""
  stake_address_by_pk(id: bigint!): stake_address

  """
  fetch data from the table: "stake_deregistration"
  """
  stake_deregistration(
    """distinct select on columns"""
    distinct_on: [stake_deregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_deregistration_order_by!]

    """filter the rows returned"""
    where: stake_deregistration_bool_exp
  ): [stake_deregistration!]!

  """
  fetch aggregated fields from the table: "stake_deregistration"
  """
  stake_deregistration_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_deregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_deregistration_order_by!]

    """filter the rows returned"""
    where: stake_deregistration_bool_exp
  ): stake_deregistration_aggregate!

  """
  fetch data from the table: "stake_deregistration" using primary key columns
  """
  stake_deregistration_by_pk(id: bigint!): stake_deregistration

  """
  fetch data from the table: "stake_registration"
  """
  stake_registration(
    """distinct select on columns"""
    distinct_on: [stake_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_registration_order_by!]

    """filter the rows returned"""
    where: stake_registration_bool_exp
  ): [stake_registration!]!

  """
  fetch aggregated fields from the table: "stake_registration"
  """
  stake_registration_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_registration_order_by!]

    """filter the rows returned"""
    where: stake_registration_bool_exp
  ): stake_registration_aggregate!

  """
  fetch data from the table: "stake_registration" using primary key columns
  """
  stake_registration_by_pk(id: bigint!): stake_registration

  """
  fetch data from the table: "treasury"
  """
  treasury(
    """distinct select on columns"""
    distinct_on: [treasury_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_order_by!]

    """filter the rows returned"""
    where: treasury_bool_exp
  ): [treasury!]!

  """
  fetch aggregated fields from the table: "treasury"
  """
  treasury_aggregate(
    """distinct select on columns"""
    distinct_on: [treasury_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_order_by!]

    """filter the rows returned"""
    where: treasury_bool_exp
  ): treasury_aggregate!

  """fetch data from the table: "treasury" using primary key columns"""
  treasury_by_pk(id: bigint!): treasury

  """
  fetch data from the table: "tx"
  """
  tx(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): [tx!]!

  """
  fetch aggregated fields from the table: "tx"
  """
  tx_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): tx_aggregate!

  """fetch data from the table: "tx" using primary key columns"""
  tx_by_pk(id: bigint!): tx

  """
  fetch data from the table: "tx_in"
  """
  tx_in(
    """distinct select on columns"""
    distinct_on: [tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_in_order_by!]

    """filter the rows returned"""
    where: tx_in_bool_exp
  ): [tx_in!]!

  """
  fetch aggregated fields from the table: "tx_in"
  """
  tx_in_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_in_order_by!]

    """filter the rows returned"""
    where: tx_in_bool_exp
  ): tx_in_aggregate!

  """fetch data from the table: "tx_in" using primary key columns"""
  tx_in_by_pk(id: bigint!): tx_in

  """
  fetch data from the table: "tx_metadata"
  """
  tx_metadata(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): [tx_metadata!]!

  """
  fetch aggregated fields from the table: "tx_metadata"
  """
  tx_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): tx_metadata_aggregate!

  """fetch data from the table: "tx_metadata" using primary key columns"""
  tx_metadata_by_pk(id: bigint!): tx_metadata

  """
  fetch data from the table: "tx_out"
  """
  tx_out(
    """distinct select on columns"""
    distinct_on: [tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_out_order_by!]

    """filter the rows returned"""
    where: tx_out_bool_exp
  ): [tx_out!]!

  """
  fetch aggregated fields from the table: "tx_out"
  """
  tx_out_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_out_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_out_order_by!]

    """filter the rows returned"""
    where: tx_out_bool_exp
  ): tx_out_aggregate!

  """fetch data from the table: "tx_out" using primary key columns"""
  tx_out_by_pk(id: bigint!): tx_out

  """
  fetch data from the table: "utxo_byron_view"
  """
  utxo_byron_view(
    """distinct select on columns"""
    distinct_on: [utxo_byron_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_byron_view_order_by!]

    """filter the rows returned"""
    where: utxo_byron_view_bool_exp
  ): [utxo_byron_view!]!

  """
  fetch aggregated fields from the table: "utxo_byron_view"
  """
  utxo_byron_view_aggregate(
    """distinct select on columns"""
    distinct_on: [utxo_byron_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_byron_view_order_by!]

    """filter the rows returned"""
    where: utxo_byron_view_bool_exp
  ): utxo_byron_view_aggregate!

  """
  fetch data from the table: "utxo_view"
  """
  utxo_view(
    """distinct select on columns"""
    distinct_on: [utxo_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_view_order_by!]

    """filter the rows returned"""
    where: utxo_view_bool_exp
  ): [utxo_view!]!

  """
  fetch aggregated fields from the table: "utxo_view"
  """
  utxo_view_aggregate(
    """distinct select on columns"""
    distinct_on: [utxo_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [utxo_view_order_by!]

    """filter the rows returned"""
    where: utxo_view_bool_exp
  ): utxo_view_aggregate!

  """
  fetch data from the table: "withdrawal"
  """
  withdrawal(
    """distinct select on columns"""
    distinct_on: [withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [withdrawal_order_by!]

    """filter the rows returned"""
    where: withdrawal_bool_exp
  ): [withdrawal!]!

  """
  fetch aggregated fields from the table: "withdrawal"
  """
  withdrawal_aggregate(
    """distinct select on columns"""
    distinct_on: [withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [withdrawal_order_by!]

    """filter the rows returned"""
    where: withdrawal_bool_exp
  ): withdrawal_aggregate!

  """fetch data from the table: "withdrawal" using primary key columns"""
  withdrawal_by_pk(id: bigint!): withdrawal
}

scalar syncstatetype

"""
expression to compare columns of type syncstatetype. All fields are combined with logical 'AND'.
"""
input syncstatetype_comparison_exp {
  _eq: syncstatetype
  _gt: syncstatetype
  _gte: syncstatetype
  _in: [syncstatetype!]
  _is_null: Boolean
  _lt: syncstatetype
  _lte: syncstatetype
  _neq: syncstatetype
  _nin: [syncstatetype!]
}

scalar timestamp

"""
expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "treasury"
"""
type treasury {
  addr_id: bigint!
  amount: numeric!
  cert_index: Int!
  id: bigint!
  tx_id: bigint!
}

"""
aggregated selection of "treasury"
"""
type treasury_aggregate {
  aggregate: treasury_aggregate_fields
  nodes: [treasury!]!
}

"""
aggregate fields of "treasury"
"""
type treasury_aggregate_fields {
  avg: treasury_avg_fields
  count(columns: [treasury_select_column!], distinct: Boolean): Int
  max: treasury_max_fields
  min: treasury_min_fields
  stddev: treasury_stddev_fields
  stddev_pop: treasury_stddev_pop_fields
  stddev_samp: treasury_stddev_samp_fields
  sum: treasury_sum_fields
  var_pop: treasury_var_pop_fields
  var_samp: treasury_var_samp_fields
  variance: treasury_variance_fields
}

"""
order by aggregate values of table "treasury"
"""
input treasury_aggregate_order_by {
  avg: treasury_avg_order_by
  count: order_by
  max: treasury_max_order_by
  min: treasury_min_order_by
  stddev: treasury_stddev_order_by
  stddev_pop: treasury_stddev_pop_order_by
  stddev_samp: treasury_stddev_samp_order_by
  sum: treasury_sum_order_by
  var_pop: treasury_var_pop_order_by
  var_samp: treasury_var_samp_order_by
  variance: treasury_variance_order_by
}

"""
input type for inserting array relation for remote table "treasury"
"""
input treasury_arr_rel_insert_input {
  data: [treasury_insert_input!]!
  on_conflict: treasury_on_conflict
}

"""aggregate avg on columns"""
type treasury_avg_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by avg() on columns of table "treasury"
"""
input treasury_avg_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "treasury". All fields are combined with a logical 'AND'.
"""
input treasury_bool_exp {
  _and: [treasury_bool_exp]
  _not: treasury_bool_exp
  _or: [treasury_bool_exp]
  addr_id: bigint_comparison_exp
  amount: numeric_comparison_exp
  cert_index: Int_comparison_exp
  id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "treasury"
"""
enum treasury_constraint {
  """unique or primary key constraint"""
  treasury_pkey

  """unique or primary key constraint"""
  unique_treasury
}

"""
input type for incrementing integer column in table "treasury"
"""
input treasury_inc_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "treasury"
"""
input treasury_insert_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate max on columns"""
type treasury_max_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "treasury"
"""
input treasury_max_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type treasury_min_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "treasury"
"""
input treasury_min_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "treasury"
"""
type treasury_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [treasury!]!
}

"""
input type for inserting object relation for remote table "treasury"
"""
input treasury_obj_rel_insert_input {
  data: treasury_insert_input!
  on_conflict: treasury_on_conflict
}

"""
on conflict condition type for table "treasury"
"""
input treasury_on_conflict {
  constraint: treasury_constraint!
  update_columns: [treasury_update_column!]!
  where: treasury_bool_exp
}

"""
ordering options when selecting data from "treasury"
"""
input treasury_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "treasury"
"""
input treasury_pk_columns_input {
  id: bigint!
}

"""
select columns of table "treasury"
"""
enum treasury_select_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  tx_id
}

"""
input type for updating data in table "treasury"
"""
input treasury_set_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type treasury_stddev_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "treasury"
"""
input treasury_stddev_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type treasury_stddev_pop_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "treasury"
"""
input treasury_stddev_pop_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type treasury_stddev_samp_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "treasury"
"""
input treasury_stddev_samp_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type treasury_sum_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "treasury"
"""
input treasury_sum_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
update columns of table "treasury"
"""
enum treasury_update_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type treasury_var_pop_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "treasury"
"""
input treasury_var_pop_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type treasury_var_samp_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "treasury"
"""
input treasury_var_samp_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type treasury_variance_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
order by variance() on columns of table "treasury"
"""
input treasury_variance_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""
columns and relationships of "tx"
"""
type tx {
  block_id: bigint!
  block_index: Int!
  deposit: bigint!
  fee: numeric!
  hash: bytea!
  id: bigint!
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric!
  script_size: Int!
  size: Int!
  valid_contract: Boolean!
}

"""
aggregated selection of "tx"
"""
type tx_aggregate {
  aggregate: tx_aggregate_fields
  nodes: [tx!]!
}

"""
aggregate fields of "tx"
"""
type tx_aggregate_fields {
  avg: tx_avg_fields
  count(columns: [tx_select_column!], distinct: Boolean): Int
  max: tx_max_fields
  min: tx_min_fields
  stddev: tx_stddev_fields
  stddev_pop: tx_stddev_pop_fields
  stddev_samp: tx_stddev_samp_fields
  sum: tx_sum_fields
  var_pop: tx_var_pop_fields
  var_samp: tx_var_samp_fields
  variance: tx_variance_fields
}

"""
order by aggregate values of table "tx"
"""
input tx_aggregate_order_by {
  avg: tx_avg_order_by
  count: order_by
  max: tx_max_order_by
  min: tx_min_order_by
  stddev: tx_stddev_order_by
  stddev_pop: tx_stddev_pop_order_by
  stddev_samp: tx_stddev_samp_order_by
  sum: tx_sum_order_by
  var_pop: tx_var_pop_order_by
  var_samp: tx_var_samp_order_by
  variance: tx_variance_order_by
}

"""
input type for inserting array relation for remote table "tx"
"""
input tx_arr_rel_insert_input {
  data: [tx_insert_input!]!
  on_conflict: tx_on_conflict
}

"""aggregate avg on columns"""
type tx_avg_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
}

"""
order by avg() on columns of table "tx"
"""
input tx_avg_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""
Boolean expression to filter rows from the table "tx". All fields are combined with a logical 'AND'.
"""
input tx_bool_exp {
  _and: [tx_bool_exp]
  _not: tx_bool_exp
  _or: [tx_bool_exp]
  block_id: bigint_comparison_exp
  block_index: Int_comparison_exp
  deposit: bigint_comparison_exp
  fee: numeric_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  invalid_before: numeric_comparison_exp
  invalid_hereafter: numeric_comparison_exp
  out_sum: numeric_comparison_exp
  script_size: Int_comparison_exp
  size: Int_comparison_exp
  valid_contract: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "tx"
"""
enum tx_constraint {
  """unique or primary key constraint"""
  tx_pkey

  """unique or primary key constraint"""
  unique_tx
}

"""
columns and relationships of "tx_in"
"""
type tx_in {
  id: bigint!
  redeemer_id: bigint
  tx_in_id: bigint!
  tx_out_id: bigint!
  tx_out_index: smallint!
}

"""
aggregated selection of "tx_in"
"""
type tx_in_aggregate {
  aggregate: tx_in_aggregate_fields
  nodes: [tx_in!]!
}

"""
aggregate fields of "tx_in"
"""
type tx_in_aggregate_fields {
  avg: tx_in_avg_fields
  count(columns: [tx_in_select_column!], distinct: Boolean): Int
  max: tx_in_max_fields
  min: tx_in_min_fields
  stddev: tx_in_stddev_fields
  stddev_pop: tx_in_stddev_pop_fields
  stddev_samp: tx_in_stddev_samp_fields
  sum: tx_in_sum_fields
  var_pop: tx_in_var_pop_fields
  var_samp: tx_in_var_samp_fields
  variance: tx_in_variance_fields
}

"""
order by aggregate values of table "tx_in"
"""
input tx_in_aggregate_order_by {
  avg: tx_in_avg_order_by
  count: order_by
  max: tx_in_max_order_by
  min: tx_in_min_order_by
  stddev: tx_in_stddev_order_by
  stddev_pop: tx_in_stddev_pop_order_by
  stddev_samp: tx_in_stddev_samp_order_by
  sum: tx_in_sum_order_by
  var_pop: tx_in_var_pop_order_by
  var_samp: tx_in_var_samp_order_by
  variance: tx_in_variance_order_by
}

"""
input type for inserting array relation for remote table "tx_in"
"""
input tx_in_arr_rel_insert_input {
  data: [tx_in_insert_input!]!
  on_conflict: tx_in_on_conflict
}

"""aggregate avg on columns"""
type tx_in_avg_fields {
  id: Float
  redeemer_id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by avg() on columns of table "tx_in"
"""
input tx_in_avg_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
Boolean expression to filter rows from the table "tx_in". All fields are combined with a logical 'AND'.
"""
input tx_in_bool_exp {
  _and: [tx_in_bool_exp]
  _not: tx_in_bool_exp
  _or: [tx_in_bool_exp]
  id: bigint_comparison_exp
  redeemer_id: bigint_comparison_exp
  tx_in_id: bigint_comparison_exp
  tx_out_id: bigint_comparison_exp
  tx_out_index: smallint_comparison_exp
}

"""
unique or primary key constraints on table "tx_in"
"""
enum tx_in_constraint {
  """unique or primary key constraint"""
  tx_in_pkey

  """unique or primary key constraint"""
  unique_txin
}

"""
input type for incrementing integer column in table "tx_in"
"""
input tx_in_inc_input {
  id: bigint
  redeemer_id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
input type for inserting data into table "tx_in"
"""
input tx_in_insert_input {
  id: bigint
  redeemer_id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""aggregate max on columns"""
type tx_in_max_fields {
  id: bigint
  redeemer_id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
order by max() on columns of table "tx_in"
"""
input tx_in_max_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate min on columns"""
type tx_in_min_fields {
  id: bigint
  redeemer_id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
order by min() on columns of table "tx_in"
"""
input tx_in_min_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
response of any mutation on the table "tx_in"
"""
type tx_in_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tx_in!]!
}

"""
input type for inserting object relation for remote table "tx_in"
"""
input tx_in_obj_rel_insert_input {
  data: tx_in_insert_input!
  on_conflict: tx_in_on_conflict
}

"""
on conflict condition type for table "tx_in"
"""
input tx_in_on_conflict {
  constraint: tx_in_constraint!
  update_columns: [tx_in_update_column!]!
  where: tx_in_bool_exp
}

"""
ordering options when selecting data from "tx_in"
"""
input tx_in_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
primary key columns input for table: "tx_in"
"""
input tx_in_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tx_in"
"""
enum tx_in_select_column {
  """column name"""
  id

  """column name"""
  redeemer_id

  """column name"""
  tx_in_id

  """column name"""
  tx_out_id

  """column name"""
  tx_out_index
}

"""
input type for updating data in table "tx_in"
"""
input tx_in_set_input {
  id: bigint
  redeemer_id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""aggregate stddev on columns"""
type tx_in_stddev_fields {
  id: Float
  redeemer_id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by stddev() on columns of table "tx_in"
"""
input tx_in_stddev_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate stddev_pop on columns"""
type tx_in_stddev_pop_fields {
  id: Float
  redeemer_id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by stddev_pop() on columns of table "tx_in"
"""
input tx_in_stddev_pop_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate stddev_samp on columns"""
type tx_in_stddev_samp_fields {
  id: Float
  redeemer_id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by stddev_samp() on columns of table "tx_in"
"""
input tx_in_stddev_samp_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate sum on columns"""
type tx_in_sum_fields {
  id: bigint
  redeemer_id: bigint
  tx_in_id: bigint
  tx_out_id: bigint
  tx_out_index: smallint
}

"""
order by sum() on columns of table "tx_in"
"""
input tx_in_sum_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
update columns of table "tx_in"
"""
enum tx_in_update_column {
  """column name"""
  id

  """column name"""
  redeemer_id

  """column name"""
  tx_in_id

  """column name"""
  tx_out_id

  """column name"""
  tx_out_index
}

"""aggregate var_pop on columns"""
type tx_in_var_pop_fields {
  id: Float
  redeemer_id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by var_pop() on columns of table "tx_in"
"""
input tx_in_var_pop_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate var_samp on columns"""
type tx_in_var_samp_fields {
  id: Float
  redeemer_id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by var_samp() on columns of table "tx_in"
"""
input tx_in_var_samp_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""aggregate variance on columns"""
type tx_in_variance_fields {
  id: Float
  redeemer_id: Float
  tx_in_id: Float
  tx_out_id: Float
  tx_out_index: Float
}

"""
order by variance() on columns of table "tx_in"
"""
input tx_in_variance_order_by {
  id: order_by
  redeemer_id: order_by
  tx_in_id: order_by
  tx_out_id: order_by
  tx_out_index: order_by
}

"""
input type for incrementing integer column in table "tx"
"""
input tx_inc_input {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
}

"""
input type for inserting data into table "tx"
"""
input tx_insert_input {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  valid_contract: Boolean
}

"""aggregate max on columns"""
type tx_max_fields {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
}

"""
order by max() on columns of table "tx"
"""
input tx_max_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""
columns and relationships of "tx_metadata"
"""
type tx_metadata {
  bytes: bytea!
  id: bigint!
  json(
    """JSON select path"""
    path: String
  ): jsonb
  key: numeric!
  tx_id: bigint!
}

"""
aggregated selection of "tx_metadata"
"""
type tx_metadata_aggregate {
  aggregate: tx_metadata_aggregate_fields
  nodes: [tx_metadata!]!
}

"""
aggregate fields of "tx_metadata"
"""
type tx_metadata_aggregate_fields {
  avg: tx_metadata_avg_fields
  count(columns: [tx_metadata_select_column!], distinct: Boolean): Int
  max: tx_metadata_max_fields
  min: tx_metadata_min_fields
  stddev: tx_metadata_stddev_fields
  stddev_pop: tx_metadata_stddev_pop_fields
  stddev_samp: tx_metadata_stddev_samp_fields
  sum: tx_metadata_sum_fields
  var_pop: tx_metadata_var_pop_fields
  var_samp: tx_metadata_var_samp_fields
  variance: tx_metadata_variance_fields
}

"""
order by aggregate values of table "tx_metadata"
"""
input tx_metadata_aggregate_order_by {
  avg: tx_metadata_avg_order_by
  count: order_by
  max: tx_metadata_max_order_by
  min: tx_metadata_min_order_by
  stddev: tx_metadata_stddev_order_by
  stddev_pop: tx_metadata_stddev_pop_order_by
  stddev_samp: tx_metadata_stddev_samp_order_by
  sum: tx_metadata_sum_order_by
  var_pop: tx_metadata_var_pop_order_by
  var_samp: tx_metadata_var_samp_order_by
  variance: tx_metadata_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input tx_metadata_append_input {
  json: jsonb
}

"""
input type for inserting array relation for remote table "tx_metadata"
"""
input tx_metadata_arr_rel_insert_input {
  data: [tx_metadata_insert_input!]!
  on_conflict: tx_metadata_on_conflict
}

"""aggregate avg on columns"""
type tx_metadata_avg_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by avg() on columns of table "tx_metadata"
"""
input tx_metadata_avg_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "tx_metadata". All fields are combined with a logical 'AND'.
"""
input tx_metadata_bool_exp {
  _and: [tx_metadata_bool_exp]
  _not: tx_metadata_bool_exp
  _or: [tx_metadata_bool_exp]
  bytes: bytea_comparison_exp
  id: bigint_comparison_exp
  json: jsonb_comparison_exp
  key: numeric_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "tx_metadata"
"""
enum tx_metadata_constraint {
  """unique or primary key constraint"""
  tx_metadata_pkey

  """unique or primary key constraint"""
  unique_tx_metadata
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input tx_metadata_delete_at_path_input {
  json: [String]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input tx_metadata_delete_elem_input {
  json: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input tx_metadata_delete_key_input {
  json: String
}

"""
input type for incrementing integer column in table "tx_metadata"
"""
input tx_metadata_inc_input {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
input type for inserting data into table "tx_metadata"
"""
input tx_metadata_insert_input {
  bytes: bytea
  id: bigint
  json: jsonb
  key: numeric
  tx_id: bigint
}

"""aggregate max on columns"""
type tx_metadata_max_fields {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
order by max() on columns of table "tx_metadata"
"""
input tx_metadata_max_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type tx_metadata_min_fields {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
order by min() on columns of table "tx_metadata"
"""
input tx_metadata_min_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "tx_metadata"
"""
type tx_metadata_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tx_metadata!]!
}

"""
input type for inserting object relation for remote table "tx_metadata"
"""
input tx_metadata_obj_rel_insert_input {
  data: tx_metadata_insert_input!
  on_conflict: tx_metadata_on_conflict
}

"""
on conflict condition type for table "tx_metadata"
"""
input tx_metadata_on_conflict {
  constraint: tx_metadata_constraint!
  update_columns: [tx_metadata_update_column!]!
  where: tx_metadata_bool_exp
}

"""
ordering options when selecting data from "tx_metadata"
"""
input tx_metadata_order_by {
  bytes: order_by
  id: order_by
  json: order_by
  key: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "tx_metadata"
"""
input tx_metadata_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input tx_metadata_prepend_input {
  json: jsonb
}

"""
select columns of table "tx_metadata"
"""
enum tx_metadata_select_column {
  """column name"""
  bytes

  """column name"""
  id

  """column name"""
  json

  """column name"""
  key

  """column name"""
  tx_id
}

"""
input type for updating data in table "tx_metadata"
"""
input tx_metadata_set_input {
  bytes: bytea
  id: bigint
  json: jsonb
  key: numeric
  tx_id: bigint
}

"""aggregate stddev on columns"""
type tx_metadata_stddev_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "tx_metadata"
"""
input tx_metadata_stddev_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type tx_metadata_stddev_pop_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "tx_metadata"
"""
input tx_metadata_stddev_pop_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type tx_metadata_stddev_samp_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "tx_metadata"
"""
input tx_metadata_stddev_samp_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type tx_metadata_sum_fields {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
order by sum() on columns of table "tx_metadata"
"""
input tx_metadata_sum_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""
update columns of table "tx_metadata"
"""
enum tx_metadata_update_column {
  """column name"""
  bytes

  """column name"""
  id

  """column name"""
  json

  """column name"""
  key

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type tx_metadata_var_pop_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "tx_metadata"
"""
input tx_metadata_var_pop_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type tx_metadata_var_samp_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "tx_metadata"
"""
input tx_metadata_var_samp_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type tx_metadata_variance_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by variance() on columns of table "tx_metadata"
"""
input tx_metadata_variance_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type tx_min_fields {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
}

"""
order by min() on columns of table "tx"
"""
input tx_min_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""
response of any mutation on the table "tx"
"""
type tx_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tx!]!
}

"""
input type for inserting object relation for remote table "tx"
"""
input tx_obj_rel_insert_input {
  data: tx_insert_input!
  on_conflict: tx_on_conflict
}

"""
on conflict condition type for table "tx"
"""
input tx_on_conflict {
  constraint: tx_constraint!
  update_columns: [tx_update_column!]!
  where: tx_bool_exp
}

"""
ordering options when selecting data from "tx"
"""
input tx_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  hash: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
  valid_contract: order_by
}

"""
columns and relationships of "tx_out"
"""
type tx_out {
  address: String!
  address_has_script: Boolean!
  address_raw: bytea!
  data_hash: bytea
  id: bigint!
  index: smallint!
  payment_cred: bytea
  stake_address_id: bigint
  tx_id: bigint!
  value: numeric!
}

"""
aggregated selection of "tx_out"
"""
type tx_out_aggregate {
  aggregate: tx_out_aggregate_fields
  nodes: [tx_out!]!
}

"""
aggregate fields of "tx_out"
"""
type tx_out_aggregate_fields {
  avg: tx_out_avg_fields
  count(columns: [tx_out_select_column!], distinct: Boolean): Int
  max: tx_out_max_fields
  min: tx_out_min_fields
  stddev: tx_out_stddev_fields
  stddev_pop: tx_out_stddev_pop_fields
  stddev_samp: tx_out_stddev_samp_fields
  sum: tx_out_sum_fields
  var_pop: tx_out_var_pop_fields
  var_samp: tx_out_var_samp_fields
  variance: tx_out_variance_fields
}

"""
order by aggregate values of table "tx_out"
"""
input tx_out_aggregate_order_by {
  avg: tx_out_avg_order_by
  count: order_by
  max: tx_out_max_order_by
  min: tx_out_min_order_by
  stddev: tx_out_stddev_order_by
  stddev_pop: tx_out_stddev_pop_order_by
  stddev_samp: tx_out_stddev_samp_order_by
  sum: tx_out_sum_order_by
  var_pop: tx_out_var_pop_order_by
  var_samp: tx_out_var_samp_order_by
  variance: tx_out_variance_order_by
}

"""
input type for inserting array relation for remote table "tx_out"
"""
input tx_out_arr_rel_insert_input {
  data: [tx_out_insert_input!]!
  on_conflict: tx_out_on_conflict
}

"""aggregate avg on columns"""
type tx_out_avg_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by avg() on columns of table "tx_out"
"""
input tx_out_avg_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "tx_out". All fields are combined with a logical 'AND'.
"""
input tx_out_bool_exp {
  _and: [tx_out_bool_exp]
  _not: tx_out_bool_exp
  _or: [tx_out_bool_exp]
  address: String_comparison_exp
  address_has_script: Boolean_comparison_exp
  address_raw: bytea_comparison_exp
  data_hash: bytea_comparison_exp
  id: bigint_comparison_exp
  index: smallint_comparison_exp
  payment_cred: bytea_comparison_exp
  stake_address_id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
  value: numeric_comparison_exp
}

"""
unique or primary key constraints on table "tx_out"
"""
enum tx_out_constraint {
  """unique or primary key constraint"""
  tx_out_pkey

  """unique or primary key constraint"""
  unique_txout
}

"""
input type for incrementing integer column in table "tx_out"
"""
input tx_out_inc_input {
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
input type for inserting data into table "tx_out"
"""
input tx_out_insert_input {
  address: String
  address_has_script: Boolean
  address_raw: bytea
  data_hash: bytea
  id: bigint
  index: smallint
  payment_cred: bytea
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""aggregate max on columns"""
type tx_out_max_fields {
  address: String
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by max() on columns of table "tx_out"
"""
input tx_out_max_order_by {
  address: order_by
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type tx_out_min_fields {
  address: String
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by min() on columns of table "tx_out"
"""
input tx_out_min_order_by {
  address: order_by
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
response of any mutation on the table "tx_out"
"""
type tx_out_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tx_out!]!
}

"""
input type for inserting object relation for remote table "tx_out"
"""
input tx_out_obj_rel_insert_input {
  data: tx_out_insert_input!
  on_conflict: tx_out_on_conflict
}

"""
on conflict condition type for table "tx_out"
"""
input tx_out_on_conflict {
  constraint: tx_out_constraint!
  update_columns: [tx_out_update_column!]!
  where: tx_out_bool_exp
}

"""
ordering options when selecting data from "tx_out"
"""
input tx_out_order_by {
  address: order_by
  address_has_script: order_by
  address_raw: order_by
  data_hash: order_by
  id: order_by
  index: order_by
  payment_cred: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
primary key columns input for table: "tx_out"
"""
input tx_out_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tx_out"
"""
enum tx_out_select_column {
  """column name"""
  address

  """column name"""
  address_has_script

  """column name"""
  address_raw

  """column name"""
  data_hash

  """column name"""
  id

  """column name"""
  index

  """column name"""
  payment_cred

  """column name"""
  stake_address_id

  """column name"""
  tx_id

  """column name"""
  value
}

"""
input type for updating data in table "tx_out"
"""
input tx_out_set_input {
  address: String
  address_has_script: Boolean
  address_raw: bytea
  data_hash: bytea
  id: bigint
  index: smallint
  payment_cred: bytea
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""aggregate stddev on columns"""
type tx_out_stddev_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev() on columns of table "tx_out"
"""
input tx_out_stddev_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type tx_out_stddev_pop_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "tx_out"
"""
input tx_out_stddev_pop_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type tx_out_stddev_samp_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "tx_out"
"""
input tx_out_stddev_samp_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate sum on columns"""
type tx_out_sum_fields {
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "tx_out"
"""
input tx_out_sum_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
update columns of table "tx_out"
"""
enum tx_out_update_column {
  """column name"""
  address

  """column name"""
  address_has_script

  """column name"""
  address_raw

  """column name"""
  data_hash

  """column name"""
  id

  """column name"""
  index

  """column name"""
  payment_cred

  """column name"""
  stake_address_id

  """column name"""
  tx_id

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type tx_out_var_pop_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "tx_out"
"""
input tx_out_var_pop_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type tx_out_var_samp_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "tx_out"
"""
input tx_out_var_samp_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type tx_out_variance_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by variance() on columns of table "tx_out"
"""
input tx_out_variance_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
primary key columns input for table: "tx"
"""
input tx_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tx"
"""
enum tx_select_column {
  """column name"""
  block_id

  """column name"""
  block_index

  """column name"""
  deposit

  """column name"""
  fee

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  invalid_before

  """column name"""
  invalid_hereafter

  """column name"""
  out_sum

  """column name"""
  script_size

  """column name"""
  size

  """column name"""
  valid_contract
}

"""
input type for updating data in table "tx"
"""
input tx_set_input {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  valid_contract: Boolean
}

"""aggregate stddev on columns"""
type tx_stddev_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
}

"""
order by stddev() on columns of table "tx"
"""
input tx_stddev_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""aggregate stddev_pop on columns"""
type tx_stddev_pop_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
}

"""
order by stddev_pop() on columns of table "tx"
"""
input tx_stddev_pop_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""aggregate stddev_samp on columns"""
type tx_stddev_samp_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
}

"""
order by stddev_samp() on columns of table "tx"
"""
input tx_stddev_samp_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""aggregate sum on columns"""
type tx_sum_fields {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
}

"""
order by sum() on columns of table "tx"
"""
input tx_sum_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""
update columns of table "tx"
"""
enum tx_update_column {
  """column name"""
  block_id

  """column name"""
  block_index

  """column name"""
  deposit

  """column name"""
  fee

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  invalid_before

  """column name"""
  invalid_hereafter

  """column name"""
  out_sum

  """column name"""
  script_size

  """column name"""
  size

  """column name"""
  valid_contract
}

"""aggregate var_pop on columns"""
type tx_var_pop_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
}

"""
order by var_pop() on columns of table "tx"
"""
input tx_var_pop_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""aggregate var_samp on columns"""
type tx_var_samp_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
}

"""
order by var_samp() on columns of table "tx"
"""
input tx_var_samp_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""aggregate variance on columns"""
type tx_variance_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
}

"""
order by variance() on columns of table "tx"
"""
input tx_variance_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
}

"""
columns and relationships of "utxo_byron_view"
"""
type utxo_byron_view {
  address: String
  address_has_script: Boolean
  address_raw: bytea
  data_hash: bytea
  id: bigint
  index: smallint
  payment_cred: bytea
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
aggregated selection of "utxo_byron_view"
"""
type utxo_byron_view_aggregate {
  aggregate: utxo_byron_view_aggregate_fields
  nodes: [utxo_byron_view!]!
}

"""
aggregate fields of "utxo_byron_view"
"""
type utxo_byron_view_aggregate_fields {
  avg: utxo_byron_view_avg_fields
  count(columns: [utxo_byron_view_select_column!], distinct: Boolean): Int
  max: utxo_byron_view_max_fields
  min: utxo_byron_view_min_fields
  stddev: utxo_byron_view_stddev_fields
  stddev_pop: utxo_byron_view_stddev_pop_fields
  stddev_samp: utxo_byron_view_stddev_samp_fields
  sum: utxo_byron_view_sum_fields
  var_pop: utxo_byron_view_var_pop_fields
  var_samp: utxo_byron_view_var_samp_fields
  variance: utxo_byron_view_variance_fields
}

"""
order by aggregate values of table "utxo_byron_view"
"""
input utxo_byron_view_aggregate_order_by {
  avg: utxo_byron_view_avg_order_by
  count: order_by
  max: utxo_byron_view_max_order_by
  min: utxo_byron_view_min_order_by
  stddev: utxo_byron_view_stddev_order_by
  stddev_pop: utxo_byron_view_stddev_pop_order_by
  stddev_samp: utxo_byron_view_stddev_samp_order_by
  sum: utxo_byron_view_sum_order_by
  var_pop: utxo_byron_view_var_pop_order_by
  var_samp: utxo_byron_view_var_samp_order_by
  variance: utxo_byron_view_variance_order_by
}

"""aggregate avg on columns"""
type utxo_byron_view_avg_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by avg() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_avg_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "utxo_byron_view". All fields are combined with a logical 'AND'.
"""
input utxo_byron_view_bool_exp {
  _and: [utxo_byron_view_bool_exp]
  _not: utxo_byron_view_bool_exp
  _or: [utxo_byron_view_bool_exp]
  address: String_comparison_exp
  address_has_script: Boolean_comparison_exp
  address_raw: bytea_comparison_exp
  data_hash: bytea_comparison_exp
  id: bigint_comparison_exp
  index: smallint_comparison_exp
  payment_cred: bytea_comparison_exp
  stake_address_id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
  value: numeric_comparison_exp
}

"""aggregate max on columns"""
type utxo_byron_view_max_fields {
  address: String
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by max() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_max_order_by {
  address: order_by
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type utxo_byron_view_min_fields {
  address: String
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by min() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_min_order_by {
  address: order_by
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
ordering options when selecting data from "utxo_byron_view"
"""
input utxo_byron_view_order_by {
  address: order_by
  address_has_script: order_by
  address_raw: order_by
  data_hash: order_by
  id: order_by
  index: order_by
  payment_cred: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
select columns of table "utxo_byron_view"
"""
enum utxo_byron_view_select_column {
  """column name"""
  address

  """column name"""
  address_has_script

  """column name"""
  address_raw

  """column name"""
  data_hash

  """column name"""
  id

  """column name"""
  index

  """column name"""
  payment_cred

  """column name"""
  stake_address_id

  """column name"""
  tx_id

  """column name"""
  value
}

"""aggregate stddev on columns"""
type utxo_byron_view_stddev_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_stddev_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type utxo_byron_view_stddev_pop_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_stddev_pop_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type utxo_byron_view_stddev_samp_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_stddev_samp_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate sum on columns"""
type utxo_byron_view_sum_fields {
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_sum_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate var_pop on columns"""
type utxo_byron_view_var_pop_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_var_pop_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type utxo_byron_view_var_samp_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_var_samp_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type utxo_byron_view_variance_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by variance() on columns of table "utxo_byron_view"
"""
input utxo_byron_view_variance_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
columns and relationships of "utxo_view"
"""
type utxo_view {
  address: String
  address_has_script: Boolean
  address_raw: bytea
  data_hash: bytea
  id: bigint
  index: smallint
  payment_cred: bytea
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
aggregated selection of "utxo_view"
"""
type utxo_view_aggregate {
  aggregate: utxo_view_aggregate_fields
  nodes: [utxo_view!]!
}

"""
aggregate fields of "utxo_view"
"""
type utxo_view_aggregate_fields {
  avg: utxo_view_avg_fields
  count(columns: [utxo_view_select_column!], distinct: Boolean): Int
  max: utxo_view_max_fields
  min: utxo_view_min_fields
  stddev: utxo_view_stddev_fields
  stddev_pop: utxo_view_stddev_pop_fields
  stddev_samp: utxo_view_stddev_samp_fields
  sum: utxo_view_sum_fields
  var_pop: utxo_view_var_pop_fields
  var_samp: utxo_view_var_samp_fields
  variance: utxo_view_variance_fields
}

"""
order by aggregate values of table "utxo_view"
"""
input utxo_view_aggregate_order_by {
  avg: utxo_view_avg_order_by
  count: order_by
  max: utxo_view_max_order_by
  min: utxo_view_min_order_by
  stddev: utxo_view_stddev_order_by
  stddev_pop: utxo_view_stddev_pop_order_by
  stddev_samp: utxo_view_stddev_samp_order_by
  sum: utxo_view_sum_order_by
  var_pop: utxo_view_var_pop_order_by
  var_samp: utxo_view_var_samp_order_by
  variance: utxo_view_variance_order_by
}

"""aggregate avg on columns"""
type utxo_view_avg_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by avg() on columns of table "utxo_view"
"""
input utxo_view_avg_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "utxo_view". All fields are combined with a logical 'AND'.
"""
input utxo_view_bool_exp {
  _and: [utxo_view_bool_exp]
  _not: utxo_view_bool_exp
  _or: [utxo_view_bool_exp]
  address: String_comparison_exp
  address_has_script: Boolean_comparison_exp
  address_raw: bytea_comparison_exp
  data_hash: bytea_comparison_exp
  id: bigint_comparison_exp
  index: smallint_comparison_exp
  payment_cred: bytea_comparison_exp
  stake_address_id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
  value: numeric_comparison_exp
}

"""aggregate max on columns"""
type utxo_view_max_fields {
  address: String
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by max() on columns of table "utxo_view"
"""
input utxo_view_max_order_by {
  address: order_by
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type utxo_view_min_fields {
  address: String
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by min() on columns of table "utxo_view"
"""
input utxo_view_min_order_by {
  address: order_by
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
ordering options when selecting data from "utxo_view"
"""
input utxo_view_order_by {
  address: order_by
  address_has_script: order_by
  address_raw: order_by
  data_hash: order_by
  id: order_by
  index: order_by
  payment_cred: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
select columns of table "utxo_view"
"""
enum utxo_view_select_column {
  """column name"""
  address

  """column name"""
  address_has_script

  """column name"""
  address_raw

  """column name"""
  data_hash

  """column name"""
  id

  """column name"""
  index

  """column name"""
  payment_cred

  """column name"""
  stake_address_id

  """column name"""
  tx_id

  """column name"""
  value
}

"""aggregate stddev on columns"""
type utxo_view_stddev_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev() on columns of table "utxo_view"
"""
input utxo_view_stddev_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type utxo_view_stddev_pop_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "utxo_view"
"""
input utxo_view_stddev_pop_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type utxo_view_stddev_samp_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "utxo_view"
"""
input utxo_view_stddev_samp_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate sum on columns"""
type utxo_view_sum_fields {
  id: bigint
  index: smallint
  stake_address_id: bigint
  tx_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "utxo_view"
"""
input utxo_view_sum_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate var_pop on columns"""
type utxo_view_var_pop_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "utxo_view"
"""
input utxo_view_var_pop_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type utxo_view_var_samp_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "utxo_view"
"""
input utxo_view_var_samp_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type utxo_view_variance_fields {
  id: Float
  index: Float
  stake_address_id: Float
  tx_id: Float
  value: Float
}

"""
order by variance() on columns of table "utxo_view"
"""
input utxo_view_variance_order_by {
  id: order_by
  index: order_by
  stake_address_id: order_by
  tx_id: order_by
  value: order_by
}

"""
columns and relationships of "withdrawal"
"""
type withdrawal {
  addr_id: bigint!
  amount: numeric!
  id: bigint!
  redeemer_id: bigint
  tx_id: bigint!
}

"""
aggregated selection of "withdrawal"
"""
type withdrawal_aggregate {
  aggregate: withdrawal_aggregate_fields
  nodes: [withdrawal!]!
}

"""
aggregate fields of "withdrawal"
"""
type withdrawal_aggregate_fields {
  avg: withdrawal_avg_fields
  count(columns: [withdrawal_select_column!], distinct: Boolean): Int
  max: withdrawal_max_fields
  min: withdrawal_min_fields
  stddev: withdrawal_stddev_fields
  stddev_pop: withdrawal_stddev_pop_fields
  stddev_samp: withdrawal_stddev_samp_fields
  sum: withdrawal_sum_fields
  var_pop: withdrawal_var_pop_fields
  var_samp: withdrawal_var_samp_fields
  variance: withdrawal_variance_fields
}

"""
order by aggregate values of table "withdrawal"
"""
input withdrawal_aggregate_order_by {
  avg: withdrawal_avg_order_by
  count: order_by
  max: withdrawal_max_order_by
  min: withdrawal_min_order_by
  stddev: withdrawal_stddev_order_by
  stddev_pop: withdrawal_stddev_pop_order_by
  stddev_samp: withdrawal_stddev_samp_order_by
  sum: withdrawal_sum_order_by
  var_pop: withdrawal_var_pop_order_by
  var_samp: withdrawal_var_samp_order_by
  variance: withdrawal_variance_order_by
}

"""
input type for inserting array relation for remote table "withdrawal"
"""
input withdrawal_arr_rel_insert_input {
  data: [withdrawal_insert_input!]!
  on_conflict: withdrawal_on_conflict
}

"""aggregate avg on columns"""
type withdrawal_avg_fields {
  addr_id: Float
  amount: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by avg() on columns of table "withdrawal"
"""
input withdrawal_avg_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "withdrawal". All fields are combined with a logical 'AND'.
"""
input withdrawal_bool_exp {
  _and: [withdrawal_bool_exp]
  _not: withdrawal_bool_exp
  _or: [withdrawal_bool_exp]
  addr_id: bigint_comparison_exp
  amount: numeric_comparison_exp
  id: bigint_comparison_exp
  redeemer_id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "withdrawal"
"""
enum withdrawal_constraint {
  """unique or primary key constraint"""
  unique_withdrawal

  """unique or primary key constraint"""
  withdrawal_pkey
}

"""
input type for incrementing integer column in table "withdrawal"
"""
input withdrawal_inc_input {
  addr_id: bigint
  amount: numeric
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "withdrawal"
"""
input withdrawal_insert_input {
  addr_id: bigint
  amount: numeric
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""aggregate max on columns"""
type withdrawal_max_fields {
  addr_id: bigint
  amount: numeric
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "withdrawal"
"""
input withdrawal_max_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type withdrawal_min_fields {
  addr_id: bigint
  amount: numeric
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "withdrawal"
"""
input withdrawal_min_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "withdrawal"
"""
type withdrawal_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [withdrawal!]!
}

"""
input type for inserting object relation for remote table "withdrawal"
"""
input withdrawal_obj_rel_insert_input {
  data: withdrawal_insert_input!
  on_conflict: withdrawal_on_conflict
}

"""
on conflict condition type for table "withdrawal"
"""
input withdrawal_on_conflict {
  constraint: withdrawal_constraint!
  update_columns: [withdrawal_update_column!]!
  where: withdrawal_bool_exp
}

"""
ordering options when selecting data from "withdrawal"
"""
input withdrawal_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
primary key columns input for table: "withdrawal"
"""
input withdrawal_pk_columns_input {
  id: bigint!
}

"""
select columns of table "withdrawal"
"""
enum withdrawal_select_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  id

  """column name"""
  redeemer_id

  """column name"""
  tx_id
}

"""
input type for updating data in table "withdrawal"
"""
input withdrawal_set_input {
  addr_id: bigint
  amount: numeric
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type withdrawal_stddev_fields {
  addr_id: Float
  amount: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "withdrawal"
"""
input withdrawal_stddev_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type withdrawal_stddev_pop_fields {
  addr_id: Float
  amount: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "withdrawal"
"""
input withdrawal_stddev_pop_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type withdrawal_stddev_samp_fields {
  addr_id: Float
  amount: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "withdrawal"
"""
input withdrawal_stddev_samp_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate sum on columns"""
type withdrawal_sum_fields {
  addr_id: bigint
  amount: numeric
  id: bigint
  redeemer_id: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "withdrawal"
"""
input withdrawal_sum_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""
update columns of table "withdrawal"
"""
enum withdrawal_update_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  id

  """column name"""
  redeemer_id

  """column name"""
  tx_id
}

"""aggregate var_pop on columns"""
type withdrawal_var_pop_fields {
  addr_id: Float
  amount: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "withdrawal"
"""
input withdrawal_var_pop_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type withdrawal_var_samp_fields {
  addr_id: Float
  amount: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "withdrawal"
"""
input withdrawal_var_samp_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type withdrawal_variance_fields {
  addr_id: Float
  amount: Float
  id: Float
  redeemer_id: Float
  tx_id: Float
}

"""
order by variance() on columns of table "withdrawal"
"""
input withdrawal_variance_order_by {
  addr_id: order_by
  amount: order_by
  id: order_by
  redeemer_id: order_by
  tx_id: order_by
}

